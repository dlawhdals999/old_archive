15장 인강필기//ch15. 예외처리(Exception Handling)

(Intro)
예외(Exception)을 이해하기 // 처리가 어떠한 의미를 갖는지.
=>예외처리는 어려운 요소는 아니지만, 처음 프로그래밍을 하면 잘 안하게됨
=>처음에 내가 얼만큼, 언제 , 적용하는지 혼란스러움
=>조금씩 적용하는 습관을 들이기 & 장점 파악 & 장점을 살리기
---------------------------------------------------------------------
//예외상황을 처리하지 않았을 때의 결과
예외 // 처리 란?

-예외상황은 프로그램 실행 중(러닝)에 발생하는 문제의 상황을 의미한다.

-예외상황의 예
 나이를 입력하라고 했는데, 0보다 작은 값이 입력됨
 나눗셈을 위해서 두 개의 숫자를 입력 받았는데, 제수로 0이 입력됨.
 주민등록번호 13자리만 입력하라고 했는데 중간에 -가 삽입됨

-이렇듯 예외는 문법적 오류가 아닌, 프로그램 논리에 맞지 안는 오류를 뜻한다.
 ==>오류 하면 컴파일 에러가 떠올라서 잘못된 사용 이라고 생각

#include <iostream>
using std::cout; using std::endl; using std::cin;

int main(void)
{
	int num1, num2;
	cout << "두 개의 숫자 입력 : ";
	cin >> num1 >> num2;
	cout << "목 : " << num1/num2 << endl;
	cout << "나머지 : " << num1%num2 << endl;

	return 0;
}

==>num2에 0이 입력되는 상황 -> 예외 발생

=>프로그램은 유저 입장에서 작성
=>유저가 예상하지 못한 것으로 접근...밑의 예
=>예외의 상황이 발생했을 때(프로그램 사용자가 예상치 못한 행동을 했을때) 
  처리를 해주는게 예외처리
=>민번 - 민번 '-'가 입력되었을때, 1)-를 빼고 처리 2)재입력 요구 등등..이 예외처리
=>처리는 예외상황을 해결이 될 수도 아닐 수도 있음.

---------------------------------------------------------------------

//if문을 이용한 예외의 처리

int main(void)
{
	int num1, num2;
	cout << "두 개의 숫자 입력 : ";
	cin >> num1 >> num2;
	cin>>num1>>num2;	//num2에 0이 입력됨으로 인해서 예외가 "발생"

	if (num2 == 0)	//if문을 통해서 예외를 "발견"
	{
		//"처리"
		cout << "제수는 0이 될 수 없습니다." << endl;
		cout << "프로그램을 다시 실행하세요." << endl;
	}
	else
	{
		cout << "목 : " << num1 / num2 << endl;
		cout << "나머지 : " << num1%num2 << endl;
	}
	return 0;
}

=>if문을 이용해서 예외를 발견하고 처리하면, 예외처리 부분과 일반적인
  프로그램의 흐름을 쉽게 구분할 수 없다.
  (if문~ else전까지 예외처리하기 위한 부분)
=>if문은 일반적으로 프로그램의 논리를 구현하는데 주로 사용된다.
=>C++은 별도의 예외처리 메커니즘을 제공하고 있다.

---------------------------------------------------------------------
//15-2 C++의 예외처리 메커니즘
keyword : try ~ catch (like if~else) / throw
=>초반에는 if~else와 비교해서 판단하지는 말기.


try
{
 ....
 if(예외가 발생한다면)
	throw expn; //1.예외의 발생
 ....
}
catch(type exn)	//2.예외 expn의 전달
{
 //예외처리
}

=>프로그래머가 if문에서 예외를 발견하고 스스로 해야됨

---------------------------------------------------------------------
//예외처리 메커니즘의 적용
int main(void)
{
	int num1, num2;
	cout << "두 개의 숫자 입력 : ";
	cin >> num1 >> num2;
	try
	{
		if (num2 == 0)
			throw num2;	//예외의 원인이 된 데이터를 전달하고 프로그래머가 작성
		cout << "나눗셈의 몫 : " << num1 / num2 << endl;
		cout << "나눗셈의 나머지 : " << num1 % num2 << endl;
	}
	catch (int expn)
	{
		cout << "제수는 " << expn << "이 될 수 없습니다." << endl;
		cout << "프로그램을 다시 실행하세요." << endl;
	}

	cout << "end of main" << endl;
	
	return 0;
}

==>try {} 블럭에서 예외가 발생한다. 그 예외를 catch{}블럭에서 처리한다.

==>프로그램 흐름 : 

1)3 1 입력
cin>>num1>>num2;(3 1 입력) > 자연스럽게 try{블록 으로 넘어감(메모리에 뭘 담고 등등의 실행하는 것은 아님)
   > if(num2==0)발견 작업 > 거짓 > cout문장들 실행 > cout<<"end of main"<<endl;실행

2)3 0 입력
cin>>num1>>num2;(3 0 입력) > 자연스럽게 try{블록 으로 넘어감(메모리에 뭘 담고 등등의 실행하는 것은 아님)
   > if(num2==0)발견 작업 > 참 > try를 통해서 catch블록으로 num2(int형 데이터)를 전달(int expn) == 인자전달과 유사함 > catch블록 실행(==예외처리 끝남)


==>if-else보다 좋은점 ?
1)catch 절 )예외가 처리 되는 코드 => catch절
2)try 절) 예외가 발생될 수는 있지만, 프로그램의 일부이다

---------------------------------------------------------------------
//try 블록을 묶는 기준

-잘못 묶인 예

	try
	{
		if (num2 == 0)
			throw num2;
	}
	catch (int expn)
	{
		....
	}
	cout << "나눗셈의 몫 : " << num1 / num2 << endl;
	cout << "나눗셈의 나머지 : " << num1 % num2 << endl;

=>만약 catch{}블록에서 잘못 입력된 num2를 처리해주는 코드가 있으면 가능 하긴 함
=>예외와 연관 된 부분은 try 블록으로 묶어야 한다.(+예외가 발생하였을때 실행되면 코드 넣어주기)
=>언뜻보면, 위의 코드가 더 잘된 것 같음. 실제로는 위의 예제와 같이 예외와 관련있는 부분은 같이 묶고 같이 건너띄자
 라는 마음으로 try 블록 잘 해보기

---------------------------------------------------------------------
//15-3 Stack Unwinding(스택 풀기)

	try
	{
		Divide(num1, num2);
		cout << "나눗셈을 마쳤습니다." << endl;
	}
	catch (int expn)
	{

	}

	void Devide(int num1, int num2)
	{
		if (num2 == 0)
			throw num2;
	}

==>예외가 처리되지 않으면, 예외가 발생한 함수를 호출한 영역으로 예외 데이터가 
   (더불어 예외처리에 대한 책임까지) 전달된다.
==>즉, main->.... A->B->C->D (예외 발생 및 발견)
   ->D에서 C로 넘기고 B로 넘기고 A를 넘기고... main까지 넘김

---------------------------------------------------------------------
//예외의 발생위치와 처리위치가 달라야 하는 경우


int StoI(char *str)
{
	int len = strlen(str);
	int num = 0;
	for (int i = 0; i < len; i++) {
		if (str[i]<'0' || str[i]>'9')
			throw str[i];
		num += (int)(pow((double)10, (len - 1) - i)*(str[i] + (7 - '7')));
	}
	return num;
}

int main(void)
{
	char str1[100];
	char str2[200];

	while (1)
	{
		cout << "두 개의 숫자 입력 : ";
		cin >> str1 >> str2;
		try
		{
			cout << str1 << " + " << str2 << " = " << StoI(str1) + StoI(str2) << endl;
			break;
		}
		catch (char ch)
		{
			cout << "문자 " << ch << "가 입력되었습니다." << endl;
			cout << "재입력 진행바랍니다." << endl << endl;
		}
	}
	cout << "프로그램을 종료합니다." << endl;

	return 0;
}

=>예외가 발생하는 위치와 처리하는 위치가 다른 예제
=>StoI에서 예외가 발생&발견되면 함수를 호출한 곳으로 전달
  (원인은 외부(main)에서 있음 -> 처리도 외부에서 이루어지는게 일반적)

---------------------------------------------------------------------
//스택 풀기 (Stack Unwinding)

void SimpleFuncOne()
{
	SimpleFuncTwo();
}

void SimpleFuncTwo()
{
	SimpleFuncThree();
}

void SimpleFuncThree()
{
	throw - 1;
}

int main(void)
{
	try
	{
		SimpleFuncOne();
	}
	catch (int expn)
	{
		cout << "예외코드 : " << expn << endl;
	}

	return 0;
}


==>
스택이 쌓이는 순서 :
main 스택 > SimpleFuncOne 스택 > SimpleFuncTwo 스택 > SimpleFuncThree 스택

예외 데이터가 전달되면서 스택이 해제되는 순서
SimpleFuncOne 스택 > SimpleFuncTwo 스택 > SimpleFuncThree 스택 >main 스택

==>
main함수에서조차 예외를 처리하지 않으면 terminate 함수(프로그램을 종료시키는 함수)
가 호출되면서 프로그램이 종료됨.

==>스택풀기(Stack Unwinding)
스택이 쌓이는 순서대로(마지막부터) 스택이 풀려나가면서 예외가 전달된다.
---------------------------------------------------------------------
//자료형이 일치하지 않아도 예외 데이터는 전달(처리X 전달)

int SimpleFunc(void)
{
	...
	try
	{
	 if(..)
	  throw -1;	//int형 예외 데이터의 발생
	catch(char expn)	//char형 예외 데이터를 전달하라!
	{..}
}

=>형 변환 발생하지 않아서 예외 데이터는 SImpleFunc함수를 호출한 영역으로 전달된다.
---------------------------------------------------------------------
//하나의 try블록과 다수의 catch블록

	try
	{
		cout << str1 << " + " << str2 << " = " << StoI(str1) + StoI(str2) << endl;
		break;
	}
	catch (char ch)
	{
		cout << "문자 " << ch << "가 입력되었습니다." << endl;
		cout << "재입력 진행바랍니다." << endl << endl;
	}
	catch (int expn)
	{
		if (expn == 0)
			cout << "0으로 시작하는 숫자는 입력 불가" << endl;
		else
			cout << "비정상적 입력이 이루어 졌습니다." << endl;
		cout << "재입력 진행합니다." << endl << endl;
	}

==>하나의 예외를 고려하고 try를 하는게 아니라 A,B,C라는 예외가 발생할 수 있을 때
try{ A,B,C}라고 해놓고 catch(A..){} catch(B..){} catch(C.){} 이런식으로 추가]
==>하나의 try영역 내에서 종류가 다른 둘 이상의 예외가 발생할 수 있기 때문에, 하나의 try 블록에
다수의 catch블록을 추가할 수 있다.
---------------------------------------------------------------------

//전달되는 예외의 명시

int ThrowFunc(int num) throw(int, char)	//함수 내에서 예외상황의 발생으로 인해서 int형 예외 데이터와 
					  char형 예외 데이터가 전달될 수 있음을 명시한 선언
{
	....
}

=>ThrowFunc함수 내에서 int,char형 예외상황이 발생할 수 있는 것을 선언
=>ThrowFunc에서는 발생하는 예외는 int,char형 뿐이다.
=>함수에서 발생하는 예외를 보다 명시할 수 있음 + 이외의 예외
=>int,char 이외의 예외 데이터가 전달되면, terminate 함수의 호출로 인해서 프로그램이 종료된다.
  프로그램의 종료는 대비하지 못한 예외상황의 처리를 알리는 의미로 받아들여진다.



int SimpleFunc(void) throw()
{
  ..
}
어떠한 예외가 ㅂ라생해도 프로그램은 종료된다.
이 함수는 어떠한 예외상황도 발생하지 않는다는 의미의 함수 선언!

---------------------------------------------------------------------

//15-4 예외상황을 표현하는 예외 클래스의 설계

(intro)
=> throw 3; <<정수만 보고 어떤 예외인지 잘 알기 힘듬(프로그래머는 알지만, 충분한 정보를 담지 못하고 있음)
=> 예외 데이터를 객체가 오게끔 하자( 객체 = 다수의 데이터 + 행동 이 가능 )
=> 예외 class 정의 // 예외 객체 를 하는 것이 모범적인 설계임

---------------------------------------------------------------------

//예외 클래스와 예외 객체

-예외 객체 : 예외발생을 알리는데 사용되는 객체
-예외 클래스 : 예외객체의 생성을 위해 정의된 클래스 //목적에서만 차이, 나머지는 일반 클래스와 같음
-객체를 이용해서 예외상황을 알리면 예외가 발생한 원인에 대한 정보를 보다 자세히 담을 수 있다.

class DepositException	//입금 관련 예외상황의 표현을 위해서 정의된 클래스
{
private:
	int reqDep;		// 요청 입금액
public:
	DepositException(int money) : reqDep(money)
	{ }
	void ShowExceptionReason()
	{
		cout<<"[예외 메시지: "<<reqDep<<"는 입금불가]"<<endl;
	}
};

class WithdrawException	//출금 관련 예외상황의 표현을 위해서 정의된 클래스
{
private:
	int	balance;	// 잔고
public:
	WithdrawException(int money) : balance(money)
	{ }
	void ShowExceptionReason()
	{
		cout<<"[예외 메시지: 잔액 "<<balance<<", 잔액부족]"<<endl;
	}
};

=> 하나의 클래스가 다수의 예외상황을 처리할 수 도있다.
=> 입출금을 합쳐서 할 수 도있음. 프로젝트의 성향에 따라 다양하게 나올 수 있다는 열린 생각
   + 상대적으로 Best를 고려해보기

---------------------------------------------------------------------
//예외 클래스 기반의 예외 처리

class Account
{
private:
	char accNum[50];	// 계좌번호
	int	balance;		// 잔고
public:
	Account(char * acc, int money) : balance(money)
	{
		strcpy(accNum, acc);
	}
	void Deposit(int money) throw (DepositException)
	{
		if(money<0){			
			DepositException expn(money);	//객체 형태의 예외 데이터
			throw expn;	
		}
		balance+=money;
	}
	void Withdraw(int money) throw (WithdrawException)
	{
		if(money>balance)
			throw WithdrawException(balance); //임시객체의 형태로 전달 가능
		balance-=money;
	}
	void ShowMyMoney()
	{
		cout<<"잔고: "<<balance<<endl<<endl;
	}
};

int main(void)
{
	Account myAcc("56789-827120", 5000);

	try
	{
		myAcc.Deposit(2000);
		myAcc.Deposit(-300);
	}
	catch(DepositException &expn)
	{
		expn.ShowExceptionReason();
	}
	myAcc.ShowMyMoney();

	try
	{
		myAcc.Withdraw(3500);
		myAcc.Withdraw(4500);
	}
	catch(WithdrawException &expn)
	{
		expn.ShowExceptionReason();
	}	
	myAcc.ShowMyMoney();
	return 0;
}

---------------------------------------------------------------------

//상속관계에 있는 예외 클래스

class AccountException
{
public:
	virtual void ShowExceptionReason() =0;
};

class DepositException : public AccountException
{
private:
	int reqDep;		// 요청 입금액
public:
	DepositException(int money) : reqDep(money)
	{ }
	void ShowExceptionReason()
	{
		cout<<"[예외 메시지: "<<reqDep<<"는 입금불가]"<<endl;
	}
};

class WithdrawException : public AccountException
{
private:
	int	balance;	// 잔고
public:
	WithdrawException(int money) : balance(money)
	{ }
	void ShowExceptionReason()
	{
		cout<<"[예외 메시지: 잔액 "<<balance<<", 잔액부족]"<<endl;
	}
};
-----------------
	try
	{
		myAcc.Deposit(2000);
		myAcc.Deposit(-300);
	}
	catch(AccountException &expn)
	{
		expn.ShowExceptionReason();
	}
	try
	{
		myAcc.Withdraw(3500);
		myAcc.Withdraw(4500);
	}
	catch(AccountException &expn)
	{
		expn.ShowExceptionReason();
	}	

==>Depos~, With~ 예외클래스는 AcountException 클래스를 상속하므로 AccountException
   을 대상으로 정의된 catch 블록에 의해 처리될 수 있다.
==>try{}블록으로 입출금 같이 할 수 있음

---------------------------------------------------------------------
//예외의 전달방식에 따른 주의사항

	try
	{
		..예외 발생!
	}
	catch (type1 param) //1차 : 이 예외에 타당한 catch 블록인가?
	{ ...	}
	catch (type2 param) //2차 : 이 예외에 타당한 catch 블록인가?
	{ ....	}
	catch (type3 param) //3차 : 이 예외에 타당한 catch 블록인가?
	{....	}
==>catch{}블록의 순서대로 확인
==>
AAA <- BBB <- CCC의 상속관계의 예외처리 클래스가 있을 경우
try
{...}
catch(AAA& expn)
{..}
catch(BBB& expn)
{..}
catch(CCC& expn)
{..}
==>try에서 A,B,C의 예외 상황이 발생해도 catch(AAA& expn)이 다 처리 가능
==>
try
{...}
catch(CCC& expn)
{..}
catch(BBB& expn)
{..}
catch(AAA& expn)
{..}
이렇게 처리해줘야됨

---------------------------------------------------------------------

//15-5 예외처리에 관련된 또 다른 특성들

(Intro)
자연적으로 발생하는 예외도 일부가 있음(badalloc)

//new 연산자에 의해서 전달되는 예외

int main(void)
{
	int num=0;

	try
	{
		while(1)
		{
			num++;
			cout<<num<<"번째 할당"<<endl;
			new int[10000][10000];
		}
	}
	catch(bad_alloc &bad)
	{
		cout<<bad.what()<<endl;
		cout<<"더 이상 할당 불가!"<<endl;
	}
	return 0;
}

//모든 예외를 처리하는 catch 블록

	try
	{
	
	}
	catch(...)	// ...은 전달되는 모든 예외를 다 받아주겠다는 선언
	{
	
	}

=>마지막 catch 블록에 덧붙여지는 경우가 많은데, 대신 chatch의 매개변수 선언에서 보이듯이,
발생한 예외와 고나련해서 그 어떠한 정보도 전달받을 수 없으며, 전달된 예외의 종류도 구분이 불가능하다.

//예외 던지
-catch 블록에 전달된 예외는 다시 던져질 수 있다.
 그리고 이로 인해서 하나의 예외가 둘 이상의 catch블록에 의해서 처리되게 할 수 있다.

void Divide(int num1, int num2)
{
	try
	{
		if(num2==0)
			throw 0;
		cout<<"몫: "<<num1/num2<<endl;
		cout<<"나머지: "<<num1%num2<<endl;
	}
	catch(int expn)
	{
		cout<<"first catch"<<endl;
		throw;
	}
}

int main(void)
{	
	try
	{
		Divide(9, 2);
		Divide(4, 0);
	}
	catch(int expn)
	{
		cout<<"second catch"<<endl;
	}
	return 0;
}

=>Divide(4,0)을 실행하면 num2예외 발생 및 발견 -> Divide함수의 catch로 전달 & throw;를 만나면
  그 함수를 호출한 곳(main)으로 다시 전달 > main의 catch{}블록 실행


---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------






























