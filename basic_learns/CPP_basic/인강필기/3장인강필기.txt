ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡch.3 클래스의 기본 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

//struct 키워드를 쓰지 않는 cpp 예제
/*
oo1.cpp
*/
#include <iostream>
using std::cout;
using std::endl;

struct Account {
	char accID[20];    // 계좌 번호 
	char secID[20];    // 비밀 번호 
	char name[20];     // 이     름
	int balance;       // 잔     액 
};

int main(void)
{
	Account yoon = { "1234", "2321", "yoon", 1000 };
	cout << "계좌번호 : " << yoon.accID << endl;
	cout << "비밀번호 : " << yoon.secID << endl;
	cout << "이    름 : " << yoon.name << endl;
	cout << "잔    액 : " << yoon.balance << endl;

	return 0;
}



//기본 계좌관리 프로그램 
//Want : 함수를 구조체 않으로 넣고 싶음!
/*
oo2.cpp
*/
#include <iostream>
using std::cout;
using std::endl;

struct Account {
	char accID[20];    // 계좌 번호 
	char secID[20];    // 비밀 번호 
	char name[20];     // 이     름
	int balance;       // 잔     액 
};

//안정성을 위해 참조 연산자로 받음
void Deposit(Account &acc, int money)  // 입금
{
	acc.balance += money;
}

void Withdraw(Account &acc, int money) // 출금 
{
	acc.balance -= money;
}

int main(void)
{
	Account yoon = { "1234", "2321", "yoon", 1000 };

	Deposit(yoon, 100);
	cout << "잔    액 : " << yoon.balance << endl;

	Withdraw(yoon, 200);
	cout << "잔    액 : " << yoon.balance << endl;

	return 0;
}



//구조체에 함수를 넣는 예제
/*
oo3.cpp
*/
#include <iostream>
using std::cout;
using std::endl;


struct Account {
	//구조체의 멤버 변수
	char accID[20];    // 계좌 번호 
	char secID[20];    // 비밀 번호 
	char name[20];     // 이     름
	int balance;       // 잔     액 

	//구조체의 멤버 함수
	//함수의 변수는 구조체의 멤버 변수를 의미
	//
	void Deposit(int money) {
		//int balance;	//지역변수 ->밑의 balance는 이 변수를 의미하게 됨
		balance += money;
	}
	void Withdraw(int money) {
		balance -= money;
	}

};

int main(void)
{

	Account yoon = { "1234", "2321", "yoon", 1000 };

	yoon.Deposit(100);
	cout << "잔    액 : " << yoon.balance << endl;

	yoon.Withdraw(200);
	cout << "잔    액 : " << yoon.balance << endl;

	return 0;
}






/*

-
c
사용자 : 구조체(기존 자료형을 가지고 변수들로만 이루어 진다), 공용체, enum

c++
사용자 : 클래스(변수만 이용가능 + 함수까지 하나로 묶을 수 있음)
==>why 클래스가 필요한가?
(배경)
Object Orient -> 현실세계 modeling -> Program
e.g)
비디오관리


-계좌란?
-->추상화
데이터 : 계좌번호 , 비밀번호 ,이름 ,잔액
기능 : 입금 , 출금



-클래스의 멤버에 접근하는 형태 :  내부 접근 / 외부 접근
;내부 접근(같은 Class 내부에서 접근하는 형태)  // 외부 접근(클래스 외에서 접근하는 형태) 
e.g)
class Counter
{
 void f(){....}
 void g(){...f()....}	//g에있는 f는 같은 class에있는 f를 말함 -->내부 접근
}



-인스턴스화 vs Object 
==>거의 대부분 같음 BUT 엄밀히 차이는 있음 탬플릿에서 설명





*/


/*클래스의 내부 접근 / 외부 접근*/

#include <iostream>
using std::endl;
using std::cout;

class Counter {
public :
	int val;
	void Increment(void)
	{
		val++;	//함수 안에 있는 val이 class 내부에서 변수 val에 접근 -->내부접근
	}
};

int main(void)
{
	//cnt는 지역의 객체 -> 함수호출~ 반환되면 소멸
	Counter cnt;	//cnt가 stack 공간에 생성 -> val 쓰레기값, 함수코드 
	cnt.val = 0;	//메인함수 내에서 class에 접근 --> 외부 접근
	cnt.Increment();//외부 접근
	cout << cnt.val << endl; //외부 접근
	return 0;
}

/*클래스 멤버의 접근 제어 예제*/
#include <iostream>

using std::cout;
using std::endl;

const int OPEN = 1;
const int CLOSE = 2;

class Door {
//아예 선언 안하면 default 값으로 private 로 선언한 것
private: //지금부터 선언하는 멤버는 변수or함수의 접근을 private로 하겠다 (내부 접근)
	int state;
public:	//지금부터 선언하는 멤버는 변수,함수의 접근을 public으로 하겠다.(내부접근 + 외부접근)
	void Open() {
		state = OPEN; 
	}
	void Close() { 
		state = CLOSE;
	}
	void ShowState() {
		cout << "현재 문의 상태 : ";
		cout << ((state == OPEN) ? "OPEN" : "CLOSE") << endl;
	}
};

int main()
{
	Door d;
	//d.state=OPEN;  //main 함수에서 접근 -> 외부 접근 -> 오류(private이므로)
	d.Open();
	d.ShowState();
	return 0;
}

/* struct vs class */
class : default 값 : private
struct : default 값 : public 
==>>> struct 대신 class 라는 키워드 사용하기!




/*멤버 함수의 외부 정의*/

#include <iostream>

using std::cout;
using std::endl;

const int OPEN = 1;
const int CLOSE = 2;

class Door {
private:
	int state;
public:
	void Open();	//문을 오픈한다.
	void Close();	//문을 닫는다
	void ShowState();	//문 상태를 보여준다.
};

//내부에 존재하는 걸 단순히 밖으로 꺼낸것임. 내부 접근임 
void Door::Open() {
	state = OPEN;
}
void Door::Close() {
	state = CLOSE;
}
void Door::ShowState() {
	cout << "현재 문의 상태 : ";
	cout << ((state == OPEN) ? "OPEN" : "CLOSE") << endl;
}


int main()
{
	struct Door d;
//	d.state=OPEN;
	d.Open();
	d.ShowState();
	return 0;
}


/*4-3 생성자와 소멸자*/

*생성자의 필요성
 -객체를 생성과 동시에 초기화 하기 위해서
 -객체는 생성과 동시에 초기화되는 것이 좋은 구조!(int age=20; 선언과 대입 따로 하면? 1.불편함 BUT
객체는 생성과 동시에 초기화하는게 편한게 아니라 좋은 구조! 
e.g)
int main(void)
{
	Person p;
	cin >> p.name;
	if (p.name 유효하지 않다면)
		; //재입력 or 데이터 소멸은 안되니까 프로그램 끝까지 신경써서 하기는 가능
	return 0;
}


int main(void)
{
	char name[10];
	cin >> name;
	if (name이 적합하다면)
		Person p={name};
	retrun 0;
}

*생성자란?
 -객체 생성 시 반드시 한번 호출되는 함수 <<생성자의 특성
 -클래스와 같은 이름의 함수다	         <<생성자의 외형적 특성
 -리턴형이 없으며 리턴 하지도 않는다.    <<         "

e.g)
//1번
#include <iostream>
using std::cout; using std::endl;
#define SIZE 50
class Person
{
	//접근제어 : private(디폴트 값)
	char name[SIZE];
	char phone[SIZE];
	int age;
public:
	void ShowData();
};

void Person::ShowData()
{
	cout << "name : " << name << endl;
	cout << "phone : " << phone << endl;
	cout << "age : " << age << endl;
}

int main(void)
{
	Person p = { "Kim","010-133-1113",22 };	//구조체에서 초기화 스타일
	//초기화 위치가 main 이라 접근이 안됨 (외부접근 이므로)
	p.ShowData();
	return 0;
}


//2번

#include <iostream>
#include <cstring>
using std::cout; using std::endl;
#define SIZE 50
class Person
{
	
	char name[SIZE];
	char phone[SIZE];
	int age;
public:
	void ShowData();
	void SetData(char *, char*, int);
};

void Person::ShowData()
{
	cout << "name : " << name << endl;
	cout << "phone : " << phone << endl;
	cout << "age : " << age << endl;
}
void Person::SetData(char *_name, char* _phone, int _age)
{
	strcpy(name, _name);
	strcpy(phone, _phone);
	age = _age;
}

int main(void)
{
	//생성과 동시에 초기화와 멀어짐
	Person p;
	p.SetData("Kim", "010-133-1113", 22);	//프로그래머가 일일이 기억해야함.
	p.ShowData();
	return 0;
}



**객체의 생성 과정
(정보은닉은 유지하기 위해서는 위의 2번과 같이 간접 접근을 통해 초기화를 했음
그래서 생성과 동시에 초기화 하기 위해 생성자라는 문법적 요소가 등장)
 -첫째. 메모리 할당
 -둘째. 생성자의 호출
==>객체를 위해서는 생성자의 호출까지 완료(e.g 클래스 100개 생성 -> 생성자 100번 호출)

+그림1

#include <iostream>
using std::cout; using std::endl;

class AAA 
{
	int i, j;
public:
	//생성자	 1)클래스의 이름과 같음 2)리턴없음
	AAA()
	{
		cout << "생성자 호출" << endl;
		i = 10; j = 20;
	}
	//
	void ShowData()
	{
		cout << i << ' ' << j << endl;
	}

};

int main(void)
{
	AAA a; AAA b; AAA c;
	a.ShowData();
	b.ShowData();
	c.ShowData();
	return 0;
}

==>항상 생성과 동시에 10,20으로 초기화됨(우리가 원하는 값으로 초기화 안됨!)


*생성자를 통한 인자의 전달
 -이전의 객체 생성 방법은 구조체 변수의 선언과 동일한 방법
 -Constructor2.cpp , Person3.cpp

#include <iostream>
using std::cout; using std::endl;

class AAA 
{
	int i, j;
public:
	AAA(int _i,int _j) //생성자
	{
		i =_i; j = _j;
	}
	//
	void ShowData()
	{
		cout << i << ' ' << j << endl;
	}

};

int main(void)
{
	AAA a(111,222); //AAA(AAA클래스의 객체 생성) // aaa(객체의 이름은 aaa)
					//(111,222) (111,222)를 인자로 받을 수 있는 생성자 호출
	a.ShowData();

	return 0;
}












ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡch.3 클래스의 기본 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡch.3 클래스의 기본 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ









ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡch.3 클래스의 기본 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡch.3 클래스의 기본 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ









