/*
* Banking System Ver 0.6
* 작성자: 김명수
* 내  용: NormalAccount, HighCreditAccount 라는 클래스 정의
*/

#include <iostream>
#include <cstring>
#include <Windows.h>

using namespace std;
const int NAME_LEN = 20;

//프로그램 사용자의 선택 메뉴
enum { MAKE = 1, DEPOSIT, WITHDRAW, INQUIRE, EXIT };

//계좌종류 선택 메뉴
enum {NORMAL=1,HIGHCREDIT};

//신용등급
enum {RANK_A=7, RANK_B=4,RANK_C=2};



/*
* 클래스 이름: Account
* 클래스 유형: Entity 클래스
*/

class Account
{
private:
	int accID;
	int balance;
	char * cusName;

public:
	Account(int ID, int money, char * name);
	Account(const Account & ref);

	virtual int GetAccID() const;
	virtual void Deposit(int money);
	virtual int Withdraw(int money);
	virtual void ShowAccInfo() const;
	virtual ~Account();
};

Account::Account(int ID, int money, char * name)
	: accID(ID), balance(money)
{
	cusName = new char[strlen(name) + 1];
	strcpy(cusName, name);
}

Account::Account(const Account & ref)
	: accID(ref.accID), balance(ref.balance)
{
	cusName = new char[strlen(ref.cusName) + 1];
	strcpy(cusName, ref.cusName);
}

int Account::GetAccID() const { return accID; }

void Account::Deposit(int money)
{
	balance += money;
}

int Account::Withdraw(int money)
{
	if (balance<money)
		return 0;

	balance -= money;
	return money;
}

void Account::ShowAccInfo() const
{
	cout << "계좌ID: " << accID << endl;
	cout << "이  름: " << cusName << endl;
	cout << "잔  액: " << balance << endl;
}

Account::~Account()
{
	delete[]cusName;
}

/*
* 클래스 이름 : NormalAccount
* 클래스 유형 : Entity 클래스
*/
class NormalAccount : public Account
{
private:
	int interest;	//이자(단위, %)
public:
	NormalAccount(int ID, int money, char * name, int rate);
	int GetAccID() const;
	int GetInterest() const;
	void Deposit(int money);
	int Withdraw(int money);
	void ShowAccInfo() const;
};

NormalAccount::NormalAccount(int ID, int money, char * name, int rate)
	:Account(ID, money, name), interest(rate)
{
	//empty
}
int NormalAccount::GetInterest() const
{
	return interest;
}
void NormalAccount::Deposit(int money)
{
	int addMoney;
	addMoney = (int)(money*interest/100);
	Account::Deposit(addMoney+money);
}
int NormalAccount::Withdraw(int money)
{
	return Account::Withdraw(money);
}
void NormalAccount::ShowAccInfo() const
{	
	Account::ShowAccInfo();
	cout << "이자율: "<< interest <<"%"<< endl;	
}

int NormalAccount::GetAccID() const
{
	return Account::GetAccID();
}

/*
* 클래스 이름 : HighCreditAccount
* 클래스 유형 : Entity 클래스
*/

class HighCreditAccount : public NormalAccount
{
private:
	int gradeInterest;	//A(7%),B(4%),C(2%)
public:
	HighCreditAccount(int ID, int money, char * name,int rate, int grade);
	int GetAccID() const;
	void Deposit(int money);
	int Withdraw(int money);
	void ShowAccInfo() const;
};

HighCreditAccount::HighCreditAccount(int ID, int money, char * name,int rate, int grade)
	:NormalAccount(ID, money, name,rate)
{
	switch (grade) {
	case 1:
		gradeInterest = RANK_A;
		break;
	case 2:
		gradeInterest = RANK_B;
		break;
	case 3:
		gradeInterest = RANK_C;
		break;
	default:
		cout << "입력 오류!" << endl;
		gradeInterest = 0;
	}	
}
void HighCreditAccount::Deposit(int money)
{
	int addMoney,rate;
	rate = gradeInterest + (NormalAccount::GetInterest());
	addMoney = (int)(money*rate / 100);
	Account::Deposit(addMoney + money);
}
int HighCreditAccount::Withdraw(int money)
{
	return Account::Withdraw(money);
}
void HighCreditAccount::ShowAccInfo() const
{
	NormalAccount::ShowAccInfo();
	cout << "추가 이자율: " << gradeInterest << "%" << endl;	
}

int HighCreditAccount::GetAccID() const
{
	return Account::GetAccID();
}



/*
* 클래스 이름: AccountHandler
* 클래스 유형: 컨트롤(Control) 클래스
*/

class AccountHandler
{
private:
	Account * accArr[100];
	int accNum;

public:
	AccountHandler();
	void ShowMenu(void) const;
	void MakeAccount(void);
	void DepositMoney(void);
	void WithdrawMoney(void);
	void ShowAllAccInfo(void) const;
	~AccountHandler();
};

void AccountHandler::ShowMenu(void) const
{
	cout << "-----Menu------" << endl;
	cout << "1. 계좌개설" << endl;
	cout << "2. 입    금" << endl;
	cout << "3. 출    금" << endl;
	cout << "4. 계좌정보 전체 출력" << endl;
	cout << "5. 프로그램 종료" << endl;
}

void AccountHandler::MakeAccount(void)
{
	int id;
	char name[NAME_LEN];
	int balance,choice,rate,grade;

	cout << "[계좌종류선택]" << endl;
	cout << "1.보통예금계좌 2.신용신뢰계좌"<<endl<<"선택 : "; cin >> choice;
	switch (choice) {
	case NORMAL:
		cout << "계좌ID: ";	cin >> id;
		cout << "이  름: ";	cin >> name;
		cout << "입금액: ";	cin >> balance;
		cout << "이자율: "; cin >> rate;
		cout << endl;
		accArr[accNum++] = new NormalAccount(id, balance, name,rate);
		break;
	case HIGHCREDIT:
		cout << "계좌ID: ";	cin >> id;
		cout << "이  름: ";	cin >> name;
		cout << "입금액: ";	cin >> balance;
		cout << "이자율: "; cin >> rate;
		cout << "신용등급(1toA, 2toB, 3toC):"; cin >> grade;
		cout << endl;
		accArr[accNum++] = new HighCreditAccount(id, balance, name, rate,grade);
		break;
	default:
		cout << "1or2입력" << endl;		
	}
}

void AccountHandler::DepositMoney(void)
{
	int money;
	int id;
	cout << "[입    금]" << endl;
	cout << "계좌ID: ";	cin >> id;
	cout << "입금액: ";	cin >> money;

	for (int i = 0; i<accNum; i++)
	{
		if (accArr[i]->GetAccID() == id)
		{
			accArr[i]->Deposit(money);
			cout << "입금완료" << endl << endl;
			return;
		}
	}
	cout << "유효하지 않은 ID 입니다." << endl << endl;
}

void AccountHandler::WithdrawMoney(void)
{
	int money;
	int id;
	cout << "[출    금]" << endl;
	cout << "계좌ID: ";	cin >> id;
	cout << "출금액: ";	cin >> money;

	for (int i = 0; i<accNum; i++)
	{
		if (accArr[i]->GetAccID() == id)
		{
			if (accArr[i]->Withdraw(money) == 0)
			{
				cout << "잔액부족" << endl << endl;
				return;
			}

			cout << "출금완료" << endl << endl;
			return;
		}
	}
	cout << "유효하지 않은 ID 입니다." << endl << endl;
}

AccountHandler::AccountHandler() : accNum(0)
{  }

void AccountHandler::ShowAllAccInfo(void) const
{
	for (int i = 0; i<accNum; i++)
	{
		accArr[i]->ShowAccInfo();
		cout << endl;
	}
}

AccountHandler::~AccountHandler()
{
	for (int i = 0; i<accNum; i++)
		delete accArr[i];
}


int main(void)
{
	AccountHandler manager;
	int choice;

	while (1)
	{
		manager.ShowMenu();
		cout << "선택: ";
		cin >> choice;
		cout << endl;

		switch (choice)
		{
		case MAKE:
			manager.MakeAccount();
			break;
		case DEPOSIT:
			manager.DepositMoney();
			break;
		case WITHDRAW:
			manager.WithdrawMoney();
			break;
		case INQUIRE:
			manager.ShowAllAccInfo();
			break;
		case EXIT:
			return 0;
		default:
			cout << "Illegal selection.." << endl;
		}
		system("pause");
		system("cls");
	}

	return 0;
}