-------------------------ch6--------------------------------------
//6장.const , friend , static


//6-1 const의 추가적인 이야기

/*
(intro)
//const 키워드 복습1
const double PI = 3.14;
//PI = 3.141592; //컴파일 오류
//const int val; //쓰레기 값으로 초기화 ->컴파일 오류
//val = 20;

//const 키워드 복습2
int n1 = 10; int n2 = 20;
const int* pN = &n1; //pN이 가리키는 값을 상수화(pN을 통해서만 변경 불가능)
//*pN = 20; //컴파일 오류
n1 = 20;

int *const pN2 = &n2;
*pN2 = 20; //가능
//*pN2 = &n1; //불가능 컴파일 에러!



//const 객체와 const 객체의 특성들
/*
*멤버 변수의 상수화, 그리고 초기화
 -멤버 이니셜 라이저(member initializer)
 -ConstMember1.cpp

*const 멤버 함수
 -멤버 변수의 값 변경 허용 않는다.
 -멤버 변수 값의 변경에 대한 기회제공도 불가
 -ConstMember2.cpp,ConstMember3.cpp



/*const, 멤버 변수의 상수화 및 초기화 예제*/
//e.g) 학생의 학번이라는 id는 값이 변하면 문제점 찾기 힘듬 -> 그래서 상수화가 필요 

//1단계
class Student
{
	const int id;	//id가 초기화 된 이후 바꾸지X	
			//1)메모리 할당(id가 쓰레기 값으로 생성됨) 2)생성자 호출 =>컴파일 오류

public:
	Student(int _id, int _age, char* _name, char* _major)
	{
		id = _id;

}

//2단계
public:
	Student(int _id, int _age, char* _name, char* _major)
	 : id(_id)
	//생성자 호출 이전에 이루어짐(쓰레기 값으로 생성되기 전에 초기화됨)
	{....}





/*const, 멤버 함수의 예제*/


void ShowData() const	//멤버 함수의 상수화 -> 멤버 변수의 조작 불가능
			//const는 프로그램을 안정적으로 구성하도록 도움을 준다!
{	
	//age = 20;	//컴파일 에러
	cout << "이름: " << name << endl;
}


//


class Count
{
	const int cnt;
public:
	Count() : cnt(0) {}
	//int* GetPtr() const {
	//	return &cnt;  // Compile Error		
	//}	//멤버 변수 cnt를 조작할 기회를 가짐(간접적으로 제공) => 컴파일 에러!
	const int* GetPtr() const {
		return &cnt; 
	}
	

	void Increment() {
		cnt++;
	}

	void ShowData() const {
		ShowIntro();  // Compile Error
		cout << cnt << endl;
	}
	
	void ShowIntro() {
		cout << "현재 count의 값 : " << endl;
	}
	//컴파일타임 : ShowData()를 상수화 -> ShowIntro()함수 호출 ->
	//내부에 변수를 조작하는 가 를 보는 것이 아니라, 상수화 함수 인지 아닌지를 봄(가능성)
	//==>void ShowIntro() const{} <<상수화하면 에러x
};

//==>const키워드를 이용해 코딩을 하다보면, 계속적으로 요구하게됨 
//==>그때마다 const키워드를 삭제하기 보다는, 다른 함수에도 추가할 수 있는 연습하기
*/







//const와 함수 오버로딩
/*const 멤버 함수의 오버로딩 예제*/


#include <iostream>
using std::cout; using std::endl;

class SoSimple
{
private :
	int num;
public:
	SoSimple(int n)
		:num(n) {}
	SoSimple& AddNum(int n)
	{
		num += n;
		return *this;
	}
	void SimpleFunc()
	{
		cout << "SimpleFunc: " << num << endl;
	}
	void SimpleFunc() const
	{
		cout << "const SimpleFunc: " << num << endl;
	}
};

void YourFunc(const SoSimple &obj)
{
	obj.SimpleFunc();
}

int main(void)
{
	SoSimple obj1(2);	//일반 객체 생성
	const SoSimple obj2(7);	//const 객체 생성

	//SimpleFunc()의 오버로딩
	obj1.SimpleFunc();	//멤버 함수 void SimpleFunc() 호출
	obj2.SimpleFunc();	//멤버 함수 void SimpleFunc() const 호출

	YourFunc(obj1);		//YourFunc의 인자는 const 참조자로 받는다. => const 멤버 함수가 호출
	YourFunc(obj2);

	return 0;
}





//6-2 클래스와 함수에 대한 friend 선언

/*클래스의 friend 선언의 예제*/
#include <iostream>
#include <cstring>
using std::cout; using std::cin; using std::endl;
//class Gril;	//Girl 이라는 이름이 클래스의 이름임을 알림 (없어도 컴파일 가능 밑의 friend 에 설명)
class Boy
{
private:
	int height;
	friend class Girl;	//Gril 클래스에 대한 friend 선언 (위치는 클래스 내 어디든 가능)
	//==>1)Girl 은 클래스의 이름이다  2)그 Girl 클래스를 friend로 선언한다.
public:
	Boy(int n)
		:height(n) {}
	void ShowYourFriendInfor(const Girl &frn) const;	//위의 class Girl 이라는 선언을 통해 가능
};

class Girl
{
private :
	char phNum[20];
public:
	Girl(char *num)
	{
		strcpy(phNum, num);
	}
	void ShowYourFriendInfo(const Boy &frn) const;
	friend class Boy;//class 내의 어디서든 선언 가능
};

//Girl 클래스가 선언되고, friend 를 통해 출력문 선언 (순서)
void Boy::ShowYourFriendInfor(const Girl &frn) const
{
	cout << "Her phone number:" << frn.phNum << endl;
	//Girl 클래스의 phNum을 알아야 컴파일 가능. -> 위에서 Girl 클래스 선언.
}

void Girl::ShowYourFriendInfo(const Boy &frn) const
{
	cout << "His height : " << frn.height << endl;
}


int main(void)
{
	Boy boy(170);
	Girl girl("010-1234-5678");

	boy.ShowYourFriendInfor(girl);
	girl.ShowYourFriendInfo(boy);
	
	return 0;
}

//friend의 문법적인 이해만(나중에 friend 선언에 대한 나름의 기준이 설 때까지는 사용X)




/*함수(전역,멤버함수)의 friend 선언 예제*



#include <iostream>
using std::cout; using  std::endl;

class Point; //PointOP클래스의 Point 를 컴파일 하기 위해서 Point가 클래스라고 선언

class PointOP
{
private:
	int opcnt;
public:
	PointOP() :opcnt(0) {}
	
	Point PointAdd(const Point&, const Point&);
	Point PointSub(const Point&, const Point&);
	~PointOP()
	{
		cout << "Opertation time: " << opcnt << endl;
	}
};

class Point
{
private:
	int x;
	int y;
public:
	Point(const int& xpos, const int& ypos) :x(xpos), y(ypos)
	{}
	//PointOP 클래스의 멤버함수 PointAdd(),PointSub()에 대해 frined 선언
	//위의 2 멤버함수는 Point클래스의 멤버에 접근할 수 있음.
	friend Point PointOP::PointAdd(const Point&, const Point&);
	friend Point PointOP::PointSub(const Point&, const Point&);
	friend void ShowPointPos(const Point& pos);	//함수 선언 & 프렌드 선언
};

Point PointOP::PointAdd(const Point& pnt1, const Point& pnt2)
{
	opcnt++;
	return Point(pnt1.x + pnt2.x, pnt1.y + pnt2.y);
}

Point PointOP::PointSub(const Point& pnt1, const Point& pnt2)
{
	opcnt++;
	return Point(pnt1.x - pnt2.x, pnt1.y - pnt2.y);
}


int main(void)
{
	Point pos1(1, 2);
	Point pos2(2, 4);
	PointOP op;

	ShowPointPos(op.PointAdd(pos1, pos2));
	ShowPointPos(op.PointSub(pos2, pos1));

	return 0;
}

//ShowPointPos함수도 Point 클래스의 friend 선언 => private 멤버 변수 접근 가능
void ShowPointPos(const Point& pos)
{
	cout << "x: " << pos.x << ",";
	cout << "y: " << pos.y << endl;
}













//6-3 클래스와 static

//c에서의 static
1)전역변수에 선언된 static의 의미
 -선언된 파일 내에서만 참조를 허용하겠다는 의미
2)함수 내에 선언된 static의 의미
 -한번만 초기화되고, 지역변수와 달리 함수를 빠져나가도 소멸되지 않는다.
==>static int cnt; //0으로 초기화


/*

//객체 지향(Object Oriented)에는 전역이라는 개념이 X
*static 멤버의 등장
 -전역 변수와 전역 함수를 일부 대체하기 위해서 등장
 -PersonCount1.cpp

*static 키워드의 효과
 -모든 객체가 공유할 수 있는 멤버
 -PersonCount2.cpp, PersonCount3.cpp


*static 멤버의 특징
 -클래스 변수,클래스 함수라 한다.
 -main 함수 호출 이전에 메모리 공간에 올라 가서 초기화(전역변수와 동일)
 -선언된 클래스의 객체 내에 직접 접근 허용
 -static 멤버 초기화문으로 초기화해야함
 -외울 생각 말자! 이해하자!

==>static int n;
==>클래스에서는 1.직접접근 권한 2.가릴 수 있는 권한(AAA::n=10; 안됨)



//1단계 : 전역변수가 필요한 상황

#include <iostream>
using std::cout; using std::endl;

int simObjCnt = 0;
int cmxObjCnt = 0;

class SoSimple
{
public:
	explicit SoSimple()
	{
		simObjCnt++;
		cout << simObjCnt << "번째 SoSimple 객체" << endl;
	}
};

class SoComplex
{
public:
	explicit SoComplex()
	{
		cmxObjCnt++;
		cout << cmxObjCnt << "번째 SoComplex 객체" << endl;
	}
	explicit SoComplex(SoComplex &copy)
	{
		cmxObjCnt++;
		cout << cmxObjCnt << "번째 SoComplex 객체" << endl;
	}
};

int main(void)
{
	SoSimple sim1;
	SoSimple sim2;

	SoComplex com1;
	SoComplex com2(com1);
	SoComplex();

	return 0;
}


//2단계
class SoSimple
{
private:
simObjCnt=1;
...
}

class SoComplex
{
private:
comObjCnt=1;
}
//=>각 객체의 ~ObjCnt=1; 즉 객체를 생성할때 마다 새로운 Cnt 생성 & 1로 초기화


//3단계


#include <iostream>
using std::cout; using std::endl;




class SoSimple
{
	static int simObjCnt;
	//SoSimple 클래스의 변수. 객체의 변수x 
public:
	explicit SoSimple()
	{
		simObjCnt++;
		cout << simObjCnt << "번째 SoSimple 객체" << endl;
	}
};

class SoComplex
{
	static int cmxObjCnt;
public:
	explicit SoComplex()
	{
		//객체가 멤버 변수처럼 접근이 가능 BUT 멤버변수는 아님!!!
		cmxObjCnt++;
		cout << cmxObjCnt << "번째 SoComplex 객체" << endl;
	}
	explicit SoComplex(SoComplex &copy)
	{
		cmxObjCnt++;
		cout << cmxObjCnt << "번째 SoComplex 객체" << endl;
	}
};

//변수 simObjCnt는 객체가 생성될 때 동시에 생성되는 변수가 아니고, 이미 메모리 공간에 할당이
//이루어진 변수이다. => static 변수의 초기화 문법은 별도로 정의.
int SoSimple::simObjCnt = 0;
int SoComplex::cmxObjCnt = 0;

int main(void)
{
	SoSimple sim1;
	SoSimple sim2;

	SoComplex com1;
	SoComplex com2(com1);
	SoComplex();

	return 0;
}


//static 멤버변수의 또 다른 접근방법



#include <iostream>
using std::cout; using std::endl;

class SoSimple
{
public:
	static int simObjCnt;
public:	//불필요하지만 변수와 함수의 구분을 목적으로 삽입하기도 함
	SoSimple()
	{
		simObjCnt++;
	}
};

int SoSimple::simObjCnt = 0;	//static 클래스 변수 초기화 방법

int main(void)
{
	cout << SoSimple::simObjCnt << "번째 SoSimple 객체" << endl;
	//클래스의 이름을 이용해서 simObjCnt에 접근(static 변수가 객체 내에 존재하지 않음을 증명)
	SoSimple sim1;
	SoSimple sim2;

	cout<<SoSimple::simObjCnt<< "번째 SoSimple 객체" << endl;
	cout<<sim1.simObjCnt<< "번째 SoSimple 객체" << endl;
	cout<<sim2.simObjCnt<< "번째 SoSimple 객체" << endl;
	//sim1.simObjCnt , sim2.simObjCnt 는 좋지 않은 표현(sim1,sim2객체의 멤버 변수 같이 보임!)
	//=>public static 변수에 접근할때는 SoSimple::simObjCnt와 같이 접근하는 것이 좋음
	return 0;
}




//static 멤버함수


#include <iostream>
using std::cout; using std::endl;

class SoSimple
{
private:
	int num1;
	static int num2;
public:	
	SoSimple(int n) : num1(n)
	{}
	static void Adder(int n)
	{
		num1 += n;	//컴파일 에러
		num2 += n;
	}
};
int SoSimple::num2 = 0;

//num1+=n; 컴파일 에러 이유
//1)객체의 멤버가 아닌데, 어떻게 멤버변수에 접근을 하겠는가?
//2)객체생성 이전에도 호출이 가능하다. 그런데 어떻게 멤버변수에 접근이 가능하겠는가?
//3)멤버변수에 접근을 한다고 치자. 그렇다면 어떤 객체의 멤버변수에 접근을 해야겠는가?
//==>static 멤버함수 내에서는 static 멤버변수와 static 멤버함수만 호출이 가능하다.
//전역변수와 전역함수를 대체할 수 있음




//const static 멤버


#include <iostream>
using std::cout; using std::endl;

class CountryArea
{
public:
	const static int RUSSIA = 1707540;
	const static int CANADA = 998467;
	const static int CHINA = 957290;
	const static int SOUTH_KOREA = 9922;
	//const static 상수는 하나의 클래스에 둘 이상 모이는 것이 보통
};

int main(void)
{
	cout << "러시아 면적:" << CountryArea::RUSSIA << "㎢" << endl;
	cout << "캐나다 면적:" << CountryArea::CANADA << "㎢" << endl;
	cout << "중국 면적:" << CountryArea::CHINA << "㎢" << endl;
	cout << "한국 면적:" << CountryArea::SOUTH_KOREA << "㎢" << endl;

	//클래스에 정의된 상수에 접근하기 위해 굳이 객체를 생성할 필요가 없다.
	//클래스의 이름을 통해서 접근하는 것이 편하고, 접근하는 대상에 대한 정보를 쉽게 노출하는 방법
	return 0;
}








//explicit & mutable

/*

*explicit
 -명시적 호출만 허용한다.
 -explicit.cpp

/*
explicit.cpp
*/

#include<iostream>
using std::cout;
using std::endl;

class AAA
{
public:
	explicit AAA(int n) {
		cout << "explicit AAA(int n)" << endl;
	}
};

int main(void)
{
	//AAA a1 = 10; //컴파일 에러
	//혼란을 피하기 위해서

	AAA a1(10);

	return 0;
}



*mutable
 -const에 예외를 둔다
 -mutable.cpp
//유용하지 x 가급적 쓰지 x

/*
mutable.cpp
*/
#include<iostream>
using std::cout;
using std::endl;

class AAA
{
private:
	mutable int val1;
	//상수함수 내에서 멤버변수 조작이 가능
	//이게 필요한 상황이 오면 1)함수의 const를 빼라 2)두 변수를 나눠서 함수2개로 만들어라
	//안쓰는게 좋음
	int val2;

public:
	void SetData(int a, int b) const
	{
		val1 = a;  // val1이 mutable이므로 OK!
		val2 = b;  // Error!
	}
};

int main(void)
{
	AAA a1;
	a1.SetData(10, 20);
	return 0;
}

*/








