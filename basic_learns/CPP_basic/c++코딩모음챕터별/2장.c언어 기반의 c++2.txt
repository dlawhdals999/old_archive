ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡch2ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/*
BOOL 자료형
(intro) 
C에서 const int TRUE=1; 하면서 가독성을 높여줌(0,1써도 잘 되지만 한번에 알아보기 힘듬)
BUT C++ 에서는 기본 자료형 제공

자료형 bool에 대한 이해
-기본 자료형의 일종
-참을 의미하는 true, 거짓을 의미하는 false 중 하나의 값을 지닌다.
-BOOL은 내부적으로는 숫자라고 해도 맞기는 함. true,false를 값 자체로 이해하는게 좋음
-1과 0이 아니라, 논리적인 참과 거짓을 의미하는 키워드이다.
-int형 데이터로 형 변환 시 1과 0이 된다.


*/


/*true 와 false 의 사용 및 바이트 크기*/

#include <iostream>
using namespace std;

int main(void)
{
	int num = 10;
	int i = 0;

	cout << "true : " << true << endl;
	cout << "false : " << false << endl;

	while (true)
	{
		cout << i++ << ' ';
		if (i > num) break;
	}

	cout << endl;

	cout << "sizeof 1 : " << sizeof(1) << endl;
	cout << "sizeof 0 : " << sizeof(0) << endl;
	cout << "sizeof true : " << sizeof(true) << endl;
	cout << "sizeof false : " << sizeof(false) << endl;
	
	return 0;
}

/*bool 자료형 예제*/

#include <iostream>
using std::cin;
using std::cout;
using std::endl;

bool IsPositive(int num) 
{
	if (num < 0)
		return false;	//false라는 값을 리턴(false는 논리적 거짓이다)
	else
		return true;	//true라는 것은 논리적 참
}

int main(void)
{
	bool isPos;	//bool형은 true아니면 false를 저장
	int num;
	cout << "Input number : ";
	cin >> num;

	isPos = IsPositive(num);
	if (isPos) {
		cout << "Positive number" << endl;
	}
	else {
		cout << "Negative number" << endl;
	}

	return 0;
}


/*

레퍼런스(Reference)의 이해

개념
-이름 지니는 대상에 별명을 붙여주는 행위
-변수 : 메모리 공간에 붙은 이름
e.g) int a; (메모리 공간이 할당되고, a라는 이름이 붙음. -> a라는 이름으로 메모리에 접근)
=>c에서는 변수에 하나의 이름이 가능.
=>BUT c++에서는 여러개의 이름이 가능

e.g)
c : &ref  ==>주소값을 얻기 위해 활용
c++ : &ref ==> 주소값을 얻기 위해 활용 // 레퍼런스를 위해 활용

int *p    int &ref
*p=10     &ref
사용되는 위치가 달라서 혼동이 안됨
-레퍼런스와 변수는 생성되는 방법에서만 차이 존재. 그 이후에는 같음


레퍼런스의 제약
-이름이 존재하지 않는 대상을 레퍼런스 할 수 없다. 선언과 동시에 반드시 초기화 되어야 한다.


단점 : 
-
기존 c에서
swap(&a,&b) -> call-by-reference 구나
swap(a,b) -> call-by-value 구나 하면서 구분할 수 있었음.

but c++에서
swap(a,b) -> call-by-value? call-by-reference?

*/




/*참조자의 이해*/

#include <iostream>
using namespace std;

int main(void)
{
	int num1 = 1020;
	int &num2 = num1;	// int & : int형 변수를 참조할 수 있는 레퍼런스로 선언하겠다.
 	//num1이 가리키는 메모리 공간에다가 num2라는 이름을 또 붙여라
	//num1이라는 변수에 별명(별칭)을 num2로 또 부여.
	//int &ref=20 //불가능
	//int &ref;		//불가능
	//int &ref=NULL	//불가능

	num2 = 3047;
	cout << "VAL : " << num1 << endl;
	cout << "REF : " << num2 << endl;

	cout << "VAL : " << &num1 << endl;
	cout << "REF : " << &num2 << endl;

	return 0;
}



/*배열과 참조자예제*/
#include <iostream>
using namespace std;

int main(void)
{
	int arr[3] = { 1,3,5 };
	int &ref1 = arr[0];
	int &ref2 = arr[1];
	int &ref3 = arr[2];

	cout << ref1 << endl;
	cout << ref2 << endl;
	cout << ref3 << endl;

	return 0;
}


/*참조자를 이용한 swap스왑함수 이용*/

#include<iostream>
using namespace std;			//Reference 사용
void Swap(int & n1, int & n2)
{
	int temp = n1;
	n1 = n2;
	n2 = temp;
}
int main(void)
{
	int num1 = 10, num2 = 20;
	cout << num1 << " " << num2 << endl;
	Swap(num1, num2);
	cout << num1 << " " << num2 << endl;
	return 0;
}




/*포인터와 참조자 예제*/

#include <iostream>
using namespace std;


int main(void)
{
	int num = 12;
	int *ptr = &num;
	int **dptr = &ptr;

	int &ref = num;			//int형 변수 num의 별명 ref
	int *(&pref) = ptr;		//int 의 포인터 변수 ptr의 별명 pref
	int **(&dpref) = dptr;	//이중포인터 변수 dptr의 별명 dpref

	cout << ref << endl;	//12나옴
	cout << *pref << endl;	//12나옴
	cout << **dpref << endl;	//12나옴

	return 0;
}



// 예제 - 리턴타입이 변수형이고, 반환값을 레퍼런스 변수로 받는 경우

#include <iostream>
using namespace std;
int Reference(int &ref) { //일반변수로 받을때는 반환형에 연산자를 빼줘도무방하다.
	return ++ref;
}
int main(void) {
	int num1 = 10;
	// int & num2 = Reference(num1); ( X )
	int num2 = Reference(num1);	//num1=11, num2=11

	num1++;//12
	num2++;//12

	cout << "num1 : " << num1 << endl;
	cout << "num2 : " << num2 << endl;
}



/*참조연산자를 이용해서 스왑하는 예제*/
#include <iostream>
using namespace std;

void SwapbyRef2(int &ref1, int &ref2)
{
	int temp = ref1;
	ref1 = ref2;
	ref2 = temp;
}

int main(void)
{
	int val1 = 10;
	int val2 = 20;

	SwapbyRef2(val1, val2);

	cout << "val1 : " << val1 << endl;
	cout << "val2 : " << val2 << endl;

	return 0;
}



/*반환형이 참조형인 경우*/
#include <iostream>
using namespace std;

int& RefRetFuncOne(int &ref)
{
	ref++;
	return ref;
}


int main(void)
{
	int num1 = 1;
	//int &num2 = RefRetFuncOne(num1);	//num1에 별명 num2
	int num2 = RefRetFuncOne(num1);		//num2라는 변수 생성, 값 저장

	num1++;
	num2 += 100;
	cout << "num1 : " << num1 << endl;
	cout << "num2 : " << num2 << endl;

	return 0;
}

/*함수의 반환형이 int, int& 에 따른 예제*/

#include <iostream>

using std::cout;
using std::endl;

int & ex_1(int &val)
{
	val++;
	return val;
}

int ex_2(int &val)
{
	val++;
	return val;
}

int ex_3(int &val)
{
	val++;
	return val;
}


int main(void)
{
	int n1 = 10, n2 = 10, n3 = 10;
	int& ref1 = ex_1(n1);
//	int &ref2 = ex_2(n2); //컴파일 오류   int&ref2=11 이므로 오류. 
	int ref3= ex_2(n3);

	cout << "n1 : " << n1 << endl;
	cout << "n3 : " << n3 << endl;

	return 0;
}



/* 함수의 반환이 레퍼런스일 경우 주의해야 할 예제*/

#include <iostream>

using std::cout;
using std::endl;

int& function(void)
{
	int val = 10;
	return val;
}

int main(void)
{
	int &ref = function();
	//지역변수 이므로 val을 반환하고 없어져야됨
	//출력은 되더라도, 문제가 있음(나중에 프로그램이 오랜시간 지속되면)
	cout << ref << endl;
	return 0;

}


/*Const 참조자의 또다른 특징*/

#include <iostream>
using namespace std;

int main(void)
{
	const int num = 20;
	//int &ref = num; //컴파일 에러
	const int &ref = num;

	//ref += 10;		//에러	//ref+=0; 해도 에러. 결과가 변하는게 중요한게 아니라, 그 식 자체를 에러 발생 시킴
	cout << num << endl;
}




/*Const 참조자의 또다른 특징2*/

#include <iostream>
using namespace std;

//상수를 임시변수 공간을 확보하고 그 공간에 대입후 참조함.
int Adder(const int&ref1, const int & ref2)
{
	return ref1 + ref2;
}




int main(void)
{
	int num = 20 + 30;	//20,30 리터럴(literal) or 리터럴상수(literal constant)
						//다음 행으로 넘어가면 존재하지 x -> 임시적 상수
	const int &ref = 30;	//가능. 임시변수를 만들고, 그 공간에 30을 넣고 참조한다.

	cout << Adder(3, 5) << endl;

	return 0;

}



/*c언어 문자열 길이만큼 동적할당하는 예제*/
/*단점 : 할당할 대상의 정보를 무조건 바이트 크기단위로 전달해야 한다.
         반환형이 void형 포인터이기 때문에 적절한 형 변환을 거쳐야 한다.
*/

#include <iostream>
#include <string.h>
#include <stdlib.h>
using namespace std;

char * MakeStrAdr(int len)
{
	char *str = (char*)malloc(sizeof(char)*len);
	return str;
}

int main(void)
{
	char *str = MakeStrAdr(20);
	strcpy(str, "I am so happy~");
	cout << str << endl;
	free(str);
	return 0;
}



/*

c++식 동적 할당 예제
-훨씬 간편해 졌다 임

-NULL 포인터 리턴하는 new 연산자.
=>if(arr==NULL){} 이라고 검사해주는 코드 넣어도 안정적
=>일부 프로그래머는 운영체제 좋아지고, 프로그래머도 실수 안해서 불필요하다고 생각
==>
#define DEBUG 0 
#define DEBUG 1 삽입해서 테스트할때는 0을 //, 배포할때는 1로 함

*/


#include <iostream>
#include <string.h>
using namespace std;

char *MakeStrAder(int len)
{
	char *str = new char[len];
	return str;
	//int * ptr1=new int;
}



int main(void)
{
	char *str = MakeStrAder(20);
	strcpy(str, "I am so happy~");
	cout << str << endl;

	delete []str;

	return 0;

}

/*c++식 동적 할당 예제2 */

#include <iostream>
#include <string.h>
using namespace std;

int main(void)
{
	int *ptr1 = new int;
	double *ptr2 = new double;
	int *arr1 = new int[3];
	double *arr2 = new double[7];
	
	delete ptr1;
	delete ptr2;
	delete[]arr1;	//인덱스 연산자 사용!
	delete[]arr2;

	return 0;
}


/*힙에 할당된 변수를 참조자로 값을 대입하는 예제*/
//흔히 사용되지는 않음.

#include <iostream>
using namespace std;

int main(void)
{
	int *ptr = new int;
	int &ref = *ptr;
	ref = 20;
	cout << *ptr << endl;
	delete ptr;

	return 0;

}




/*c++에서 c언어의 표준함수 호출하기*/
//c를 더하고 h 를 뺴라
/*
#include <stdio.h>  --> #include <cstdio>
#include <stdlib.h> --> #include <cstdlib>
#include <math.h>   --> #include <cmath>
#include <string.h< --> #include <cstring>
*/



#include <cmath>
#include <cstdio>
#include <cstring>
using namespace std;

int main(void)
{
	char str1[] = "Result";
	char str2[30];

	strcpy(str2, str1);
	printf("%s: %f\n", str1, sin(0.14));
	printf("%s: %f\n", str2, sin(-1.25));

	return 0;
}