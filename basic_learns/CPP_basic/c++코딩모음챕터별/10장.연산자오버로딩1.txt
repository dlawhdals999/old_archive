-------------------------ch10--------------------------------------

//10.1 연산자 오버로딩의 이해와 유형
-------------------------------------------------
(Intro)
Point라는 클래스 & p1,p2 객체 생성
==> + - * / 가 불가능
==> 기본자료형과 유사한 형태의 연산을 허용하기를 원함.

p1+p2 ??
==>덧셈이 불가능 한 대상
==>BUT C++컴파일러는 약속

p1 + p2 ?
 
 1)멤버함수
 ==>p1 operator+ p2	//p1을 대상으로 함수를 호출한다고 약속
 ==>p1.operator+()	//p2는 사용안됨
 ==>p1.operator+(p2)	//결론

 2)전역함수
 ==>operator+(p1,p2)

==>멤버함수이던, 전역함수이던 컴파일러는 2가지로 각각 해결함
-------------------------------------------------

Why 연산자 오버로딩??

 3+4 vs p1+p2
===>피연산자에 따라 진행되는 연산이 다름(like fct() , fct(int)

-------------------------------------------------

//멤버함수의 예제

#include <iostream>
using std::endl; using std::cout;

class Point
{
private:
	int xpos, ypos;
public:
	Point()
	{
		cout << "Point() 생성자 호출" << endl;
	}
	Point(int x = 0, int y = 0) :xpos(x), ypos(y)
	{
		cout << "Point(int,int) 생성자 호출" << endl;
	}
	void ShowPosition()const
	{
		cout << '[' << xpos << ',' << ypos << ']' << endl;
	}
	Point operator+(const Point &ref)
	{
		Point pos(xpos + ref.xpos, ypos + ref.ypos);
		return pos;
	}

	Point operator-(const Point & ref)
	{
		Point pos(xpos - ref.xpos, ypos - ref.ypos);
		return pos;
	}
	Point operator*(const Point&ref)
	{
		Point pos(xpos*ref.xpos, ypos*ref.ypos);
		return pos;
	}
};

int main(void)
{
	Point pos1(3, 4);
	Point pos2(10, 20);
	//Point pos3 = pos1.operator+(pos2);
	Point pos3 = pos1 + pos2;
	Point pos4 = pos1 - pos2;
	Point pos5 = pos1*pos2;
	//==>함수호출의 경로를 또 하나 마련해 준것이다.
	//pos2.operator+(pos1); 호출
	//Point 객체생성
	//return 되면서 복사생성자 pos3 생성
	pos1.ShowPosition();
	pos2.ShowPosition();
	pos3.ShowPosition();
	pos4.ShowPosition();
	pos5.ShowPosition();


	return 0;
}


-------------------------------------------------

//전역함수 예제


#include <iostream>
using std::cout; using std::endl;

class Point
{
private:
	int xpos, ypos;
public:
	Point(int x = 0, int y = 0)
		:xpos(x), ypos(y) {}
	void ShowPosition()
	{
		cout << '[' << xpos << ',' << ypos << ']' << endl;
	}
	friend Point operator+(const Point&, const Point&);
};

Point operator+(const Point&ref1, const Point& ref2)
{
	Point pos(ref1.xpos + ref2.xpos, ref1.ypos + ref2.ypos);
	return pos;
}


int main(void)
{
	Point pos1(1, 2);
	Point pos2(10, 20);
	Point pos3 = pos1 + pos2;
	Point pos4 = operator+(pos1, pos2);
	pos3.ShowPosition();
	pos4.ShowPosition();

	return 0;
}

-------------------------------------------------
//+=, -=, == ,!= 연산 예제

#include <iostream>
using std::endl; using std::cout;

class Point
{
private:
	int xpos, ypos;
public:
	Point()
	{
		cout << "Point() 생성자 호출" << endl;
	}
	Point(int x = 0, int y = 0) :xpos(x), ypos(y)
	{
		cout << "Point(int,int) 생성자 호출" << endl;
	}
	void ShowPosition()const
	{
		cout << '[' << xpos << ',' << ypos << ']' << endl;
	}

	Point& operator+=(const Point& ref)
	{
		xpos += ref.xpos;
		ypos += ref.ypos;
		return *this;
	}

	Point& operator-=(const Point& ref)
	{
		xpos -= ref.xpos;
		ypos -= ref.ypos;
		return *this;
	}

	friend Point operator+(const Point&, const Point&);
	friend bool operator==(const Point&, const Point&);
	friend bool operator!=(const Point&, const Point&);
};

Point operator-(const Point&ref1, const Point& ref2)
{
	Point pos(ref1.xpos - ref2.xpos, ref1.ypos - ref2.ypos);
	return pos;
}

bool operator==(const Point&ref1, const Point&ref2)
{
	if (ref1.xpos == ref2.xpos&&ref1.ypos == ref2.ypos) {
		return true;
	}
	else {
		return false;
	}
}

bool operator!=(const Point&ref1, const Point&ref2)
{
	return !(ref1 == ref2);
}


-------------------------------------------------
//오버로딩 주의사항
-본래의 의도를 벗어난 형태의 연산자 오버로딩은 좋지 않다!
 프로그램을 혼란스럽게 만들 수 있다.

-연산자의 우선순위와 결합성은 바뀌지 않는다.
 따라서 이 둘을 고려해서 연산자를 오버로딩 해야 한다.

-매개변수의 디폴트 값 설정이 불가능하다.
 매개변수의 자료형에 따라서 호출되는 함수가 결정되므로.
(연산자를 오버로딩했다는 것은, 피연산자(객체)가 함수를 호출하므로.

-연산자의 순수 기능까지 빼앗을 수는 없다.
int operator+(const int num1, const int num2)
{
	return num1*num2;
}
-------------------------------------------------

//10.2 단항 연산자의 오버로딩 (피연산의 개수가 한개 e.g: ++,--

 
1. ++pos;

1)전역함수
==> operator++(pos);

2)멤버함수
==>pos.operator++();


2. pos++;

1)전역함수
operator(Point pos,int);

2)멤버함수
==>pos.operator++(int);
-------------------------------------------------

//단항 연산자 예제

#include <iostream>
using std::cout; using std::endl;

class Point
{
private:
	int xpos, ypos;
public:
	Point(int x = 0, int y = 0)
		:xpos(x), ypos(y) {}
	void ShowPosition()
	{
		cout << '[' << xpos << ',' << ypos << ']' << endl;
	}

	Point& operator++()
	{
		xpos+=1;
		ypos+=1;
		return *this;
	}

	const Point operator++(int)
	{
		const Point retobj(xpos, ypos);
		xpos +=1 ;
		ypos += 1;
		return retobj;
	}


	friend Point& operator--(Point &);
	friend const Point operator--(Point &, int);

};

//전위증가
Point& operator--(Point & ref)
{
	ref.xpos-=1;
	ref.ypos-=1;
	return ref;
}

const Point operator--(Point &ref, int)
{
	const Point retobj(ref.xpos, ref.ypos);
	ref.xpos -= 1;
	ref.ypos -= 1;
	return retobj;
}

int main(void)
{
	Point pos1(10, 20);
	Point pos2(10, 20);
	//전위증가 예제
	++pos1;	//pos.operator++();
	pos1.ShowPosition();
	++(++pos1);
	//++(pos1.operator++();)
	//++(pos1의 참조값);
	//(pos1의 참조값).operator++();
	
	--pos1;
	//--(--pos1);
	//--(operator--(pos1);
	//--(pos1의 참조 값);
	//operator--(pos1의 참조값);	
	--(--pos1);

	//후위증가예제
	Point cpy;
	cpy = pos2++;
	cpy.ShowPosition();
	pos2.ShowPosition();

	return 0;
}

-------------------------------------------------

//반환형에서 const 선언과 const 객체

const Point operator--(Point &ref, int)
{
	const Point retobj(ref.xpos, ref.ypos);	//retobj를 함수내에서 변경x
	ref.xpos -= 1;
	ref.ypos -= 1;
	return retobj;	//반환된 임시객체를 상수화 즉 반환된 객체의 변경x
}

---------

int main(void)
{
	const Point pos(3,4);
	//Point &ref=pos;		//컴파일 에러
	const Point &ref=pos;	//컴파일 OK
	//const가 아니면 ref를 가지고 변경이 가능해짐.그래서 const 참조자로 참조해야됨
	...
}

=>
const 객체는 멤버변수의 변경이 불가능한 객체
const 객체는 const 참조자로만 참조가 가능하다.
const 객체를 대상으로는 const 함수만 호출 가능하다.

(C언어에서 (num++)++; 는 표준안이 아니라서 어떠한 결과를 나올지 모름.)

==>
1)
(pos++)++;
=>(Point형 const 임시객체)++;
=>(Point형 const 임시객체).operator++();	//operator++(int)호출
==>operator++는 const로 선언된 함수가 아니기 때문에 const 임시객체를 대상으로 호출 불가능

2)
(pos--)--;
=>(Point형 const임시객체)--;
=> operator--( (Point형 const임시객체),int );
//const Point operator--(Point &ref, int) 에서 ref가 const가 아니므로 에러!


-------------------------------------------------



//10.3 교환법칙 문제의 해결

(Intro)
p1*p2, p1*3==p1.operator*(3) 문제는 안됨.
BUT 3*p1==p1*3 과같이 교환법칙이 성립해야함.
==> 3*p1이 멤버함수일 경우 해석
3.operator*(p1)? //X
p1.operator*(3)? //X
==>불가능..

==>전역함수 operator+(3,p1); 여야 가능!



예제)

#include <iostream>
using std::cout; using std::endl;

class Point
{
private:
	int xpos, ypos;
public:
	Point(int x = 0, int y = 0)
		:xpos(x), ypos(y) {}
	void ShowPosition()
	{
		cout << '[' << xpos << ',' << ypos << ']' << endl;
	}



	Point operator*(int times)
	{
		Point pos(xpos*times, ypos*times);
		return pos;
	}
	friend Point operator*(int, Point &);
};

//방법1
Point operator*(int times, Point &ref)
{
	Point pos(times*ref.xpos, times*ref.ypos);
	return pos;
}

//방법2
//Point operator*(int times, Point &ref)
//{
//	return ref*times;
//}


int main(void)
{
	Point pos1(1, 2);
	Point cpy = pos1 * 3;
	Point cpy2 = 3 * pos1;

	cpy.ShowPosition();
	cpy2.ShowPosition();
	return 0;

	
}



-------------------------------------------------


//10.4 cout,cin 그리고 endl의 정체

cout과 endl 이해하기

#include <iostream>

namespace mystd {
	class ostream
	{
	public:
		ostream& operator<<(char *str)
		{
			printf("%s", str);
			return *this
		}
		ostream& operator<<(char str)
		{
			printf("%c", str);
			return *this
		}
		ostream& operator<<(int num)
		{
			printf("%d", num);
			return *this
		}
		ostream& operator<<(double e)
		{
			printf("%g", e);
			return *this
		}
		ostream& operator<<(ostream& (*fp)(ostream&ostm))
		{
			fp(*this);
			return *this
		}
	};

	ostream& endl(ostream &ostm)
	{
		ostm << '\n';
		fflush(stdout);
		return ostm;
	}
	ostream cout;
}

int main(void)
{
	using mystd::cout;
	using mystd::endl;

	cout << "Simple String";
	cout << endl;
	//cout.operator<<(endl);
	//위의 fp에 endl함수 주소값 넘김
	//=>fp(*this); =>endl()함수를 호출하면서 cout을 인자로 전달! =>ostm<<'\n'
	cout << 3.14;
	endl(cout);

	cout<<123<<3.14;
	//cout.operator<<(123)
	//cout의 참조가 반환이 됨
	//==> (cout의 참조자)<<3.14;	//즉 cout<<3.14;와 같음
	return 0;
}



-------------------------------------------------


// <<, >> 연산자의 오버로딩
(intro)

Point pos1(1,3);

Want : cout<<pos1;	//[1,3]출력되게
==>
case1: 멤버함수 => cout.operator<<(pos1);	//(ostream클래스 변경해야함)불가능
						//이미 ostream 결정하고 Point클래스만듬
case2: 전역함수 => ostream& operator<<(ostream &ostm,const Point pos);	//가능!

	

#include <iostream>
using namespace std;

class Point
{
private:
	int xpos, ypos;
public:
	Point(int x = 0, int y = 0)
		:xpos(x), ypos(y) {}
	friend ostream& operator<<(ostream &, const Point&);
};

ostream& operator<<(ostream &os, const Point& pos)
{
	os << '[' << pos.xpos << ','<<pos.ypos << ']'<<endl;
	return os;
}



int main(void)
{
	Point pos1(1, 3);
	cout << pos1;

	Point pos2(101, 303);
	cout << pos2;

	return 0;
}

-------------------------------------------------


혼자해보기

1)pos1+pos2; // - *  까지

2)++pos1; pos++; // -까지

3)pos1+=pos2; pos1-=pos2;

4)pos1+3은 3+pos1과 같게

5)pos1==pos2 , pos1!=pos2	참 거짓 반환하기

6)Point pos2=-pos1;	

7)Point pos2=~pos1;	pos1의 xpos가 pos2의 ypos로 // pos1의 ypos가 pos2가 xpos로

8)cout<<pos1 하면 [xpos,ypos]로 출력되게끔

9>cin>>pos1 하면 4 7엔터 ==> xpos=4, ypos=7 되게끔
























