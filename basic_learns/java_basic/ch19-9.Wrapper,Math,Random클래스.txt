-------------------ch20. 자바의 다양한 기본 클래스-----------------------
(Intro)
설명이 필요한 클래스들을 별도로 모아놓음.
--------------------------------------------------------------------------
//20-1 Wrapper 클래스
; 기본 자료형 Data를 감싸기 위해 설계 된 클래스
=>직접 Wrapper 클래스 정의 or 자바에서 제공하는 Wrapper 클래스..

(상황)
	public static void showData(Object obj) {
		System.out.println(obj);
	}

=>위의 showData 메소드가 정의 & 이 메소드를 반드시 활용해야만 하는 상황이라고 가정(기능의 단순함 신경쓰지 말고)
=>System.out.println(obj)==System.out.println(obj.toSting());
=>우리는 이 메소드를 통해 출력해야 할 데이터가 정수3과 실수 7.15라고 하자. 그러면 기본 자료형의 경우 우리가 원하는
 값을 출력할 수가 없다. 그래서  정수 3과 실수 7.15가 Object 클래스를 상속하는 인스턴스의 형태가 되야만 위의 
 메소드의 인자로 전달 가능.
=>위의 메소드에서 보이듯이 기본 자료형 데이터를 인스턴스화 해야 하는 상황이 발생할 수 있다.
 이러한 상황에 사용할 수 있는 클래스를 가리켜 Wrapper 클래스라 한다.

/*사용자 정의 IntWrapper 클래스*/
class IntWrapper	//int형 데이터를 저장하기 위한(표현하기 위한) Wrapper 클래스가 정의
{
	private int num;
	public IntWrapper(int data) {
		num=data;
	}
	
	public String toString() {
		return ""+num;
	}
}

=>프로그래머가 정의한 int형 기본 자료형에 대한 Wrapper 클래스!
 이렇듯 Wrapper 클래스는 기본 자료형 데이터를 저장 및 참조할 수 있는 구조로 정의 (주관적!)
=>Wrapper 클래스라고 이름을 정의한 이유? => 자바에서는 기본 Wrapper 클래스를 제공!

--------------------------------------------------------------------------

//자바에서 제공하는 Wrapper 클래스

-Boolean	Boolean(boolean value)
-Character	Character(char value)
-Byte		Byte(byte value)
-Short		Short(short value)
-Integer	Integer(int value)
-Long		Long(long value)
-Float		Float(float value), Float(double value)

=>순전히 기본 자료형 데이터의 표현이 목적이라면, 별도의 클래스 정의 없이 제공되는
 Wrapper 클래스를 사용하면 된다.
=>API 참조하기
=>자바제공 Wrapper 클래스(java.lang에 존재) 사용의 예

	public static void main (String[] args) {
		Integer intInst=new Integer(3);
		showData(intInst);		//3출력
		showData(new Integer(7));	//7출력	
	}
	
	public static void showData(Object obj) {
		System.out.println(obj);
	}

+위의 클래스 이외에도 문자열 기반으로 정의된 Wrapper 클래스도 존재하기 때문에 다음과같이 인스턴스 생성도 가능.
 (단, Character 클래스 제외!)
Integer num1=new Integer("240");
Double num2=new Double("12.257");

--------------------------------------------------------------------------

//Wrapper 클래스의 두 가지 기능

-Boxing(포장)
=>기본 자료형 데이터를 Wrapper 인스턴스로 감싸는 것!

-UnBoxing(포장해체)
=>Wrapper 인스턴스에 저장된 데이터를 꺼내는 것!
=>폭 넓게 사용(Box에 담겨져 있는 data를 꺼낼 때 마다 UnBoxing이라고 함)

기본 자료형 데이터	--->Boxing	Wrapper인스턴스
byte					Byte
short					Short
int					Int
			<---UnBoxing


	public static void main (String[] args) {
		Integer iValue=new Integer(10);	
		//기본 int 형 자료 10을 인스턴스화
		//=>Boxing
		Double dValue=new Double(3.14);	//Boxing
		
		System.out.println(iValue);
		System.out.println(dValue);
		
		iValue=new Integer(iValue.intValue()+10);
		//iValue.intValue() //UnBoxing & new Integer(정수)를 통해 다시 Boxing
		dValue=new Double(dValue.doubleValue()+1.2);
		//dValue.doubleValue() //UnBoxing & new Double(실수)를 통해 다시 Boxing
	
		System.out.println(iValue);
		System.out.println(dValue);
	}

=>Wrapper 클래스는 산술연산을 고려해서 정의되는 클래스가 아니다. 따라서 Wrapper 인스턴스를 대상으로 산술연산을 할
경우에는 왼쪽과 같이 코드가 복잡해진다.
=>Auto Boxing & Auto UnBoxing 을 이용하면 다소 편해짐.

--------------------------------------------------------------------------

//Auto Boxing & Auto Unboxing
;자바제공 Wrapper 클래스를 사용하는 것이 좋은 이유!

Auto Boxing
=>기본 자료형 데이터가 자동으로 Wrapper 인스턴스로 감싸지는 것!

Auto UnBoxing
=>Wrapper 인스턴스에 저장된 데이터가 자동으로 꺼내지는 것!
-----

=>
1)기본 자료형 데이터가 와야 하는데, Wrapper 인스턴스가 있다면, Auto Unboxing!
2)인스턴스가 와야 하는데, 기본 자료형 데이터가 있다면, Auto Boxing!

e.g)

public class AutoBoxingUnBoxing {
	public static void main (String[] args) {
		Integer iValue=10;	
		//auto boxing (원래 10(기본 자료형)이 아니라 인스턴스가 와야 함)
		//자바는 new Integer(10)와 같이 자동으로 인스턴스 생성하고 참조값을 반환함
		Double dValue=3.13;	//auto boxing (원래 3.14(기본 자료형)가 아니라 인스턴스가 와야 함)
		
		System.out.println(iValue);
		System.out.println(dValue);
		
		int num1=iValue;	
		//auto unboxing	기본자료형이 와야하는데, Wrapper 클래스의 인스턴스가 있음
		double num2=dValue;
		//auto unboxing	기본자료형이 와야하는데, Wrapper 클래스의 인스턴스가 있음
		
		System.out.println(num1);
		System.out.println(num2);
	}
}

--------------------------------------------------------------------------

//Auto Boxing & Auto Unboxing 어떻게 ?

	public static void main (String[] args) {
		Integer num1=10;
		Integer num2=20;
		
		num1++;	//num1=new Integer(num1.intValue()+1);
		//꺼내오고 1더하고 Integer 인스턴스 생성 & num1이 참조값 저장
		//Auto Boxing, Auto Unboxing 동시 발생
		
		System.out.println(num1);
		
		num2+=3;	//num2=new Integer(num2.intValue()+3);
		//Auto Boxing, Auto Unboxing 동시 발생
		
		System.out.println(num2);	
		
		int addResult=num1+num2;
		System.out.println(addResult);
		
		int minResult=num1-num2;	
		System.out.println(minResult);	
	}


-why Wrapper클래스의 기본 데이터 변경안하고 새로 인스턴스 생성?

String 인스턴스는 안의 내용을 변경할 수 없듯이 Wrapper 클래스도 인스턴스의 값을 변경하지 못함. 
=>변경하고 싶으면 새로 인스턴스를 생성함
==>사용자가 인스턴스에 저장된 기본자료형을 빈번히 변경하고 싶으면,
   별도의 Wrapper클래스를 정의할 수도 있음.

==>예제에서 보이듯이 Auto Boxing과 Unboxing은 다양한 형태로 진행된다.
Wrapper 클래스는 산술연산을 위해 정의된 클래스가 아님. 다만 Wrapper 클래스의
Autoboxing과 Auto Unboxing으로 인해서 산술연산이 가능해졌을 뿐이다.

--------------------------------------------------------------------------
20-1 연습문제

	public static void main (String[] args) {
		Integer iValue1=new Integer(10);
		Integer iValue2=new Integer(10);
		
		if(iValue1==iValue2) {
			System.out.println("iValue1과 iValue2는 동일 인스턴스 참조");
		} else {
			System.out.println("iValue1과 iValue2는 다른 인스턴스 참조");	//실행 문장
		}

		Integer iValue3=Integer.valueOf(20);
		Integer iValue4=Integer.valueOf(20);
		
		if(iValue3==iValue4) {
			System.out.println("iValue3과 iValue4는 동일 인스턴스 참조");	//실행 문장
		} else {
			System.out.println("iValue3과 iValue4는 다른 인스턴스 참조");
		}		
	}


=>"valueOf 메소드를 이용한 인스턴스의 생성은 성능의 향상으로 이어진다. 따라서 특별한 상황이 아니라면, static으로
  선언된 valueOf 메소드를 이용해서 인스턴스를 생성하기 바란다."
(valueOf 메소드는 인스턴스의 생성 요청으로 전달되는 값에 해당하는 인스턴스가 있으면 기존 인스턴스의 참조 값 반환)

--------------------------------------------------------------------------

//20-2. BigInteger 클래스와 BigDecimal 클래스

(Intro)
BigInteger : 자바가 제공하는 기본자료형의 범위를 넘어가는 큰 정수들
BigDecimal : 오차가 발생하지 않는 실수 표현을 위한 클래스

//매우 큰 정수의 표현을 위한 BigInteger 클래스

import java.math.*;

public class SoBigInteger {
	public static void main (String[] args) {
		System.out.println("최대 정수: " + Long.MAX_VALUE);	//Wrapper 클래스의 멤버필드 MAX_VALUE,MIN_VALUE..등등
		System.out.println("최소 정수: " + Long.MIN_VALUE);
		
		BigInteger bigValue1=new BigInteger("100000000000000000000");//BigInteger의 인스턴스 생성(문자열로 전달!)
		
		BigInteger bigValue2=new BigInteger("-99999999999999999999");
		
		//BigInteger의 산술연산(BigInteger의 내용도 변경 불가) => 연산결과를 담는 새로운 인스턴스 생성
		BigInteger addResult=bigValue1.add(bigValue2);
		BigInteger mulResult=bigValue1.multiply(bigValue2);
		
		System.out.println("큰 수의 덧셈결과: "+addResult);
		System.out.println("큰 수의 곱셈결과: "+mulResult);
	}
}

--실행결과--
최대 정수: 9223372036854775807
최소 정수: -9223372036854775808
큰 수의 덧셈결과: 1
큰 수의 곱셈결과: -9999999999999999999900000000000000000000

=>why 문자열??
BigInteger(100000000000000000000) => 100000000000000000000 을 기본 자료형으로 표현 & 생성자로 전달해라 인데, 
표현 자체가 불가능함(기본 자료형의 범위를 넘어서는 크기의 정수는 숫자로 표현이 불가능하므로)
=>i.e 저러한 큰 수를 전달받을 수 있는 매개변수 선언이 불가능 => 생성자도 존재할 수 없음

--------------------------------------------------------------------------

//오차 없는 실수의 표현을 위한 BigDecimal 클래스


	public static void main (String[] args) {
		double e1=1.6;
		double e2=0.1;
		//실수 1.6과 0.1을 숫자로 표현하는 순간 이미 오차가 포함되어 버렸다.
		
		System.out.println(e1);
		System.out.println(e2);
		
		System.out.println("두 실수의 덧셈결과 : "+(e1+e2));
		System.out.println("두 실수의 곱셈결과 : "+(e1*e2));
	}

==>--실행결과--
1.6
0.1
두 실수의 덧셈결과 : 1.7000000000000002
두 실수의 곱셈결과 : 0.16000000000000003

==>1.6, 0.1을 표현하는 순간 오차가 포함!


	public static void main (String[] args) {
		BigDecimal e1=new BigDecimal("1.6");
		BigDecimal e2=new BigDecimal("0.1");
		
		System.out.println("두 실수의 덧셈결과: "+ e1.add(e2));
		System.out.println("두 실수의 곱셈결과: "+ e1.multiply(e2));		
	}

--실행결과--
두 실수의 덧셈결과: 1.7
두 실수의 곱셈결과: 0.16


=>실수도 문자열로 표현을 해서, BigDecimal 클래스에 오차 없는 값을 전달해야 한다.
 (BigDecimal e1=new BigDecimal(1.6);가능도 하지만 매개변수로 전달하는 과정에서 이미 오차가 발생

--------------------------------------------------------------------------
//연습문제 20-2

import java.math.*;
import java.util.Scanner;

public class Test {
	public static void main (String[] args) {
		Scanner keyboard=new Scanner(System.in);
		System.out.print("실수1 입력 : ");
		String dStr1=keyboard.nextLine();	//double로 받는 순간 오차가 발생 => 실수로 받기
		System.out.print("실수2 입력 : ");
		String dStr2=keyboard.nextLine();
		
		BigDecimal bigValue1=new BigDecimal(dStr1);
		BigDecimal bigValue2=new BigDecimal(dStr2);
		BigDecimal subResult=bigValue1.subtract(bigValue2);
		
		System.out.println("두 실수의 차의 절대 값 : "+subResult.abs());
	}
}

--------------------------------------------------------------------------

//Math 클래스와 난수의 생성, 그리고 문자열 토큰의 구분
=>강의 듣고 공부를 끝내는게 아니라 API를 통해서 메소드 생성자 등등 살펴보기 항상

//수학관련 기능을 제공하는 Math 클래스
;ceil : 올림 // floor : 가우스 // rint : 가장 가까운 정수값 // round : 반올림값
;Math 클래스는 모든 멤버가 static으로 선언 => 수학관련 기능의 제공을 위해 정의된 클래스(인스턴스 생성 목적X)
 + 메소드의 이름과 사용방법이 매우 직관적이므로 필요로 하는 기능을 찾으면 됨.

	public static void main (String[] args) {
		System.out.println("원주율: " + Math.PI);	//파이
		System.out.println("2의 제곱근: " + Math.sqrt(2));//2의 제곱근
		
		System.out.println(
				"파이에 대한 Degree: " + Math.toDegrees(Math.PI)); //라디안 값을 디그리 값으로
		System.out.println(
				"2파이에 대한 Degree: " + Math.toDegrees(2.0*Math.PI));	
		
		double radian45=Math.toRadians(45);	// 라디안으로의 변환!
		System.out.println("싸인 45: " + Math.sin(radian45));
		System.out.println("코싸인 45: " + Math.cos(radian45));
		System.out.println("탄젠트 45: " + Math.tan(radian45));
		
		System.out.println("로그 25: " + Math.log(25));	//log25값
		System.out.println("2의 4승: "+ Math.pow(2, 4));//2^4		
	}
=>--실행결과--
원주율 : 3.141592653589793
2의 제곱근 : 1.4142135623730951
파이에 대한 Degree : 180.0
2파이에 대한 Degree : 360.0
싸인45 : 0.7071067811865475
코싸인45 : 0.7071067811865476
탄젠트45 : 0.9999999999999999
로그 25 : 3.2188758248682006
2의 4승 : 16.0
-----------------------------

=>Math클래스에는 수학관련 메소드가 static으로 정의되어 있다는 사실을 기억하는 것이 중요하다!
필요한 메소드는 API 문자를 통해 참조하면 된다. 단, 대부분의 메소드가 라디안 단위로 정의되어 있음은
기억

--------------------------------------------------------------------------

//Random 클래스
Random() 현재 시간이 시드
Random(long seed) 시드 값 제공


//난수(Random Number)의 생성
:게임 이외에도 실질적인 서비스에 있어서 매우 유용함 
 //난수==예측이 불가능한 수

Random rand=new Random();	//java.util.Random
-boolean nextBoolean()	boolean형 난수 반환
-int nextInt()		int형 난수 반환
-long nextLong()	long형 난수 반환
-int nextInt(int n)	0이상 n미만의 범위 내에 있는 int형 난수 반환
-float nextFloat()	0.0이상 1.0 미만의 float형 난수 반환
-double nextDouble()	0.0이상 1.0 미만의 double형 난수 반환


e.g)

import java.util.Random;

public class RandomNumberGenerator {
	public static void main (String[] args) {
		Random rand=new Random();
		
		for(int i=0;i<100;i++) { //난수 100개 생성
			System.out.println(rand.nextInt(100)); //0이상 100미만의 난수가 생성
		}
	}
}

--------------------------------------------------------------------------

//씨드(Seed)기반의 난수 생성
;사람은 난수를 생성하기는 쉬움 BUT 컴퓨터는 난수를 만들 수 있는 구조가 아님

=>컴퓨터가 만드는 난수는 알고리즘에 의해 만들어짐 => 가짜 난수 (Pseudo Random Number)
=>만약 난수를 만들어서 1,7,2,4,1,9를 찍어내고 다시 아무런 정보를 주지 않고 난수를 만들면 같은 난수를 만듬
=>씨앗을 기반으로 생성
=>
씨앗1 : 난수.....
씨앗2 : 다른 난수... =>씨앗이 달라지면 난수가 달라진다.
==>매번 실행할 때 마다 씨앗을 다르게 하면 매번 다른 난수가 생성

	public static void main (String[] args) {
		Random rand=new Random(12);	//난수 제너레이터
		//씨앗을 제공
		
		for(int i=0;i<100;i++) {
			System.out.println(rand.nextInt(1000));
		}
	}

=>매번 같은 난수 생성
==>
-Random rand=new Random(); //자체적으로 seed를 심음

	public static void main (String[] args) {
		Random rand=new Random(12);
		rand.setSeed(System.currentTimeMillis());

		for(int i=0;i<10;i++) {
			System.out.println(rand.nextInt(100));
		}
	}

=>
//System.currentTimeMillis() ==현재 시간(1970년 1월 1일 자정 이후로 지나온 시간을)을 밀리 초 단위로 반환
(일반 초도 아니고 밀리 초(1/1000초) )

--------------------------------------------------------------------------

//연습문제 20-3
1)A<=n<=B의 정수 10개 출력

import java.util.Scanner;
import java.util.Random;

class InputException extends Exception 
{
	private int maxNum;
	private int minNum;
	
	public InputException(int num1,int num2) {
		super("입력 정수의 최대정수가 최소 정수 보다 작거나 같습니다.");
		maxNum=num1;
		minNum=num2;
	}
	
	public int getMaxNum() {
		return maxNum;
	}
	
	public int getMinNum() {
		return minNum;
	}
	
	public void showReason() {
		System.out.println(super.getMessage());
	}
}

public class Test {
	public static void main (String[] args) {
		Random rand=new Random();
		Scanner sc=new Scanner(System.in);
		
		System.out.print("최소 정수 입력 : ");
		int minNum=sc.nextInt();	
		System.out.print("최대 정수 입력 : ");
		int maxNum=sc.nextInt();
			
		try {
		if(maxNum<=minNum) {
			throw new InputException(maxNum,minNum);
		}
		
		} catch(InputException e) {
			e.showReason();
			System.out.println("최대 정수와 최소 정수를 바꿉니다.");
			int temp;
			temp=maxNum;
			maxNum=minNum;
			minNum=temp;						
		} 
		int diff=maxNum-minNum+1;
		int randValue;
		for(int i=0;i<10;i++) {
			randValue=rand.nextInt(diff)+minNum;
			System.out.println((i+1)+"번째 난수 : "+randValue);
		}
				
	}
}


//2) Math.random()을 이용해서 0이상 10미만 난수 5개 생성

	public static void main (String[] args) {
		int randValue;
		for(int i=0;i<5;i++) {
			randValue=(int)(Math.random()*10);
			System.out.println((i+1)+"번째 난수 : "+randValue);
		}				
	}



