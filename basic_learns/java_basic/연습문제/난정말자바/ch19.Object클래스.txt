-------ch19--------


//19-1
class Point
{
	int xPos,yPos;
	
	public Point(int x,int y) {
		xPos=x;
		yPos=y;
	}
	
	public void showPosition() {
		System.out.printf("[%d,%d]",xPos,yPos);
	}
	
	public boolean equals(Object obj) {
		Point cmp=(Point)obj;
		
		if( (xPos==cmp.xPos) && (yPos==cmp.yPos) ) {
			return true;		
		} else {
			return false;
		}
	}
}

class Rectangle
{
	Point upperLeft, lowerRight;
	
	public Rectangle(int x1,int y1,int x2,int y2) {
		upperLeft=new Point(x1,y1);
		lowerRight=new Point(x2,y2);
	}
	
	public void showPosition() {
		System.out.println("직사각형 위치정보..");
		System.out.print("좌 상단 : ");
		upperLeft.showPosition();
		
		System.out.print("우 하단 : ");
		lowerRight.showPosition();
	}
	
	public boolean equals(Object obj) {
		Rectangle cmp=(Rectangle)obj;
		if( (upperLeft.equals(cmp.upperLeft))
				&&(lowerRight.equals(cmp.lowerRight)) ) {
			return true;
		} else {
			return false;
		}
	}
}

public class Test {
	public static void main(String[] args) {
		//테스트1 Point 인스턴스 비교
		Point pos1=new Point(1,2);
		Point pos2=new Point(1,3);
		Point pos3=new Point(1,2);
		
		if(pos1.equals(pos2)) {
			System.out.println("pos1과 pos2는 같은 좌표");
		} else {
			System.out.println("pos1과 pos2는 다른 좌표");
		}
		
		if(pos1.equals(pos3)) {
			System.out.println("pos1과 pos3는 같은 좌표");
		} else {
			System.out.println("pos1과 pos3는 다른 좌표");
		}

		
		Rectangle rec1=new Rectangle(1,1,2,2);
		Rectangle rec2=new Rectangle(1,1,3,3);
		Rectangle rec3=new Rectangle(1,1,2,2);
		
		if(rec1.equals(rec2)) {
			System.out.println("rec1과 rec2는 같은 직사각형");
		} else {
			System.out.println("rec1과 rec2는 다른 직사각형");
		}
		
		if(rec1.equals(rec3)) {
			System.out.println("rec1과 rec3는 같은 직사각형");
		} else {
			System.out.println("rec1과 rec3는 같은 직사각형");
		}
		
		
	}
}




//19-2

class Business implements Cloneable
{
	private String company;
	private String work;
	
	public Business(String company,String work) {
		this.company=company;
		this.work=work;
	}
	
	public void showBusinessInfo() {
		System.out.println("회사 : "+company);
		System.out.println("업무 : "+work);
	}
	
	public void changeWork(String work) {
		this.work=work;
	}
	
	public Object clone() throws CloneNotSupportedException {
		Business copy=(Business)super.clone();
		return copy;
	}
}


class PersonalInfo implements Cloneable
{
	private String name;
	private int age;
	private Business bness;
	
	public PersonalInfo(String name,int age,String company,String work) {
		this.name=name;
		this.age=age;
		bness=new Business(company,work);
	}
	
	public void showPersonInfo() {
		System.out.println("이름 : "+name);
		System.out.println("나이 : "+age);
		bness.showBusinessInfo();
		System.out.println("");
	}
	
	public void changeWork(String work) {
		bness.changeWork(work);
	}
	
	public Object clone() throws CloneNotSupportedException {
		PersonalInfo copy=(PersonalInfo)super.clone();
		copy.bness=(Business)bness.clone();
		return copy;		
	}	
}

public class Test {
	public static void main(String[] args) {
		try {
			PersonalInfo pInfo=new PersonalInfo("James",22,"HiMedia","encoding");
			PersonalInfo pCopy=(PersonalInfo)pInfo.clone();
			pCopy.changeWork("decoding");
			
			pInfo.showPersonInfo();
			pCopy.showPersonInfo();
			
			
			
		} catch(CloneNotSupportedException e) {
			e.printStackTrace();
		}		
	}
}






































