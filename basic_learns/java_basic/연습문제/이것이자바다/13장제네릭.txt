1.4
-----------------------------------------------------------------------------
2.
public class Container <T>{
	private T inst;
	public void set(T t){
		this.inst=t;
	}
	public T get(){
		return inst;
	}
}
-----------------------------------------------------------------------------
3.

public class Container <T,V>{
	private T key;
	private V value;
	
	public T getKey() {
		return key;
	}
	public void setKey(T key) {
		this.key = key;
	}
	public V getValue() {
		return value;
	}
	public void setValue(V value) {
		this.value = value;
	}	
}

-----------------------------------------------------------------------------
4.
class Pair<K,V>{
	private K key;
	private V value;
	
	public Pair(K key,V value){
		this.key=key;
		this.value=value;
	}
	
	public K getKey(){return key;}
	public V getValue(){return value;}	
}

class ChildPair<K,V> extends Pair<K,V>{
	public ChildPair(K k,V v){
		super(k,v);
	}
}

class OtherPair<K,V>{
	private K key;
	private V value;
	
	public OtherPair(K key,V value){
		this.key=key;
		this.value=value;
	}
	
	public K getKey(){return key;}
	public V getValue(){return value;}
}

class Util{
	//Sol1)
	public static <K,V> V getValue(Pair<K,V> pair,K key){
		if(pair.getKey().equals(key))
			return pair.getValue();
		return null;
	}
	
	//Sol2)
//	public static <P extends Pair<K,V>,K,V> V getValue(P pair,K key){
//		if(pair.getKey().equals(key))
//			return pair.getValue();
//		return null;
//	}
	
}


public class Main {	
	public static void main(String[] args){
		Pair<String,Integer> pair=new Pair<>("È«±æµ¿",35);
		Integer age=Util.getValue(pair, "È«±æµ¿");
		System.out.println(age);
		
		ChildPair<String,Integer> childPair=new ChildPair<>("È«»ï¿ø",20);
		Integer childAge=Util.getValue(childPair, "È«»ï¼ø");
		System.out.println(childAge);
		
		OtherPair<String,Integer> otherPair=new OtherPair<>("È«»ï¿ø",20);
		int otherAge=Util.getValue(otherPair, "È«»ï¿ø");
		System.out.println(otherAge);
	}
}


















