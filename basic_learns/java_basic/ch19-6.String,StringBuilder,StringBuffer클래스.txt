-------------------ch19-6.String클래스-----------------------


//String 클래스

(Intro)
String ->[문자열] ->컴퓨터 공학에서 골칫거리임(이유: 못쓸정도가 아니라 불편하다는 정도)

["String"] 
==>각각의 문자를 표현하기 위한
==>"" <문자열을 쓸때마다 String 클래스의 인스턴스 생성 & 문자열 저장
e.g)
"ABC"
=>인스턴스 생성 & "AAA"에 참조변수 반환

String str1="AAA";   	//AAA를 담는 인스턴스 생성 & 참조값이 str1에 저장
String str2="AAA";	//

=>"AAA"를 담는 인스턴스는 바꿀 수 없음(상수화 되어있음)
=>바꿀 수 있는것이 더 유동적일 수 있음
=>BUT 프로그램 상에서 문자열을 너무 빈번하게 나타냄
=>같은 문자열일 경우 계속 똑같은 인스턴스를 생성하게됨
=>인스턴스 생성을 줄이고 싶음

1)String 인스턴스 안에 존재하는 데이터의 변경을 허용X
2)동일한 문자열 데이터로 인스턴스를 생성할 경우, 새로운 인스턴스 생성X 기존 인스턴스의 참조값으로 반환

String str1="ABC";	//"ABC"를 담는 인스턴스 생성& 참조값 반환
String str2="ABC";	//"ABC"를 담는 인스턴스 존재 => str1 과 같은 인스턴스를 가리킴

==>변경이 되면 문제가 발생

--------------------------------------------------------------------

//String 클래스의 인스턴스 생성
-Java는 큰따옴표로 묶어서 표현되는 문자열을 모두 인스턴스화 한다.
-문자열은 String 이라는 이름의 클래스로 표현된다.


System.out.println("Hello JAVA!");
//"Hello JAVA"를 저장하는 String 클래스 인스턴스 생성 & 참조값 반환
//println(String str); 이런식으로 되어있겠구나 알 수 있음


//문자열 길이 예제

public class ClassTest {
	public static void main(String[] args){
		String str="My name is Sunny";
		int strLen1=str.length();
		System.out.println("길이1 : "+strLen1);	//길이1 : 16
		
		int strLen2="한글의 길이는 어떻게?".length();
		//"한글의 길이는 어떻게?"를 저장하는 인스턴스 생성 & 참조값 반환
		//그 인스턴스.length(); 호출
		System.out.println("길이2 : "+strLen2 ); //길이2 : 12
	}
}

--------------------------------------------------------------------

//String 인스턴스는 상수 형태의 인스턴스이다.

-String 인스턴스에 저장된 문자열의 내용은 변경이 불가능하다.
-이는 동일한 문자열의 인스턴스를 하나만 생성해서 공유하기 위함이다.


public class ClassTest {
	public static void main(String[] args) {
		String str1 = "My String";
		String str2 = "My String";

		if (str1 == str2)	//str1과 str2의 참조값 비교
			System.out.println("동일 인스턴스 참조");
		else
			System.out.println("다른 인스턴스 참조");

	}

}

--------------------------------------------------------------------

//11-3 API Document의 참조를 통한 String 클래스의 인스턴스 메소드 관찰

(Intro)
"API 참조"가 더 중요한 의미
-MS MSDN
-Java API Document (or JavaDoc)

-책에서 메소드의 기능을 찾는 습관은 조금씩 버려야 한다.
-API 문서를 볼 줄 모르는 자바 개발자는 있을 수 없다.
-API 문서를 참조하지 않고 개발하는 자바 개발자도 있을 수 없다.

--------------------------------------------------------------------------
//String 생성자

//배열 전체를 String 객체로 생성
String(byte[] bytes) 

//지정한 문자셋으로 디코딩
String(byte[] bytes, Charset charset)

//배열의 offset 인덱스 위치부터 length만큼 String 객체로 생성
String(byte[] bytes, int offset, int length) 

//지정한 문자셋으로 디코딩
String(byte[] bytes, int offset, int length, Charset charset) 

e.g)byte를 매개변수로 하는 생성자

public class Main {
	public static void main(String[] args){
		byte[] bytes={72,101,108,108,111,32,74,97,118,97};
		
		String str1=new String(bytes);
		System.out.println(str1);
		
		String str2=new String(bytes,6,4);	//74부터 4개
		System.out.println(str2);				
	}
}

<< 실행 결과 >>
Hello Java
Java

e.g)바이트 배열을 문자열로 변환
public class Main {
	public static void main(String[] args)throws IOException{
		byte[] bytes=new byte[100];
		
		System.out.print("입력:");
		int readByteNo=System.in.read(bytes);
		
		String str=new String(bytes,0,readByteNo-2);	//\r\n은 제외
		System.out.println(str);
						
	}
}

<< 실행 결과 >>
입력:This is Java
This is Java


--------------------------------------------------------------------------

//String 클래스가 제공하는 유용한 메소드들

리턴타입		메소드명(매개변수)					설명
------------------------------------------------
char		charAt(int index)				특정 위치의 문자 리턴

boolean		equals(Object anObject)			두 문자열 비교

byte[]		getBytes()						byte[]로 리턴

byte[]		getBytes(Charset charset)		주어진 문자셋으로 인코딩한 byte[]로 리턴

int			indexOf(String str)				문자열 내에서 주어진 문자열의 위치를 리턴

int			length()						총 문자의 수를 리턴

String		replace(CharSequence target, 	target부분을 replacement로 대치한 새로운 문자열을 리턴
			CharSequence replacement)
			
String		substring(int beginIndex)		beginIndex 위치에서 끝까지 짤라낸 새로운 문자열 리턴

String		substring(int beginIndex,		beginIndex<= <endIndex 까지 짤라낸 새로운 문자열 리턴
						int endIndex)
						
String		toLowerCase()					알파벳 소문자로 변환한 새로운 문자열 리턴

String		toUpperCase()					알파벳 대문자로 변환한 새로운 문자열 리턴

String		trim()							앞뒤 공백을 제거한 새로운 문자열 리턴

String		valueOf(int i)					기본 타입값을 문자열로 리턴
			valueOf(double d)

--------------------------------------------------------------------

//문자 추출 charAt()
public class Main {
	public static void main(String[] args){
		String ssn="010624-1230123";
		char sex=ssn.charAt(7);
		switch(sex){
		case '1':
			System.out.println("남자 입니다.");
			break;
		case '2':
			System.out.println("여자 입니다.");
			break;		
		}
						
	}
}

//문자열 비교 equals()
//문자열 길이 length()
//바이트 배열로 변환 ( getBytes() )

import java.io.UnsupportedEncodingException;

public class Main {
	public static void main(String[] args){
		String str="안녕하세요";
		
		byte[] bytes1=str.getBytes();
		System.out.println("bytes1.length : "+bytes1.length);
		String str1=new String(bytes1);
		System.out.println("bytes1->String : "+str1);
		
		try{
			//EUC-KR 을 이용해 인,디 코딩
			byte[] bytes2=str.getBytes("EUC-KR");	//한글은 2바이트
			System.out.println("bytes2.length : "+bytes2.length);
			String str2=new String(bytes2,"EUC-KR");
			System.out.println("bytes2->String : "+str2);
			
			//UTF-8을 이용해 인,디 코딩
			byte[] bytes3=str.getBytes("UTF-8");	//한글은 3바이트
			System.out.println("bytes3.length : "+bytes3.length);
			String str3=new String(bytes3,"UTF-8");
			System.out.println("bytes2->String : "+str3);
		}catch(UnsupportedEncodingException e){	//잘못된 문자셋을 매개값으로 줄때 예외 발생
			e.printStackTrace();
		}			
	}
}

<< 실행 결과 >>
bytes1.length : 10
bytes1->String : 안녕하세요
bytes2.length : 10
bytes2->String : 안녕하세요
bytes3.length : 15
bytes2->String : 안녕하세요


//문자열 찾기 indexOf()
;찾는 문자열이 있으면  index, 없으면 -1 반환

public class Main {
	public static void main(String[] args){
		String subject="자바 프로그래밍";
		
		int location=subject.indexOf("프로그래밍");
		System.out.println(location);
		
		if(subject.indexOf("자바")!=-1){
			System.out.println("자바와 관련된 책이군요");
		} else{
			System.out.println("자바와 관련없는 책이군요");
		}						
	}
}

<< 실행 결과 >>
3
자바와 관련된 책이군요

//문자열 대치( replace() )

public class Main {
	public static void main(String[] args){
		String oldStr="자바는 객체지향언어 입니다. 자바는 풍부한 API를 지원합니다.";
		String newStr=oldStr.replace("자바","JAVA");
		
		System.out.println(oldStr);
		System.out.println(newStr);
		
		if(oldStr==newStr)
			System.out.println("참조값이 같음");
		else
			System.out.println("참조값이 다름");		
	}
}

<< 실행 결과 >>
자바는 객체지향언어 입니다. 자바는 풍부한 API를 지원합니다.
JAVA는 객체지향언어 입니다. JAVA는 풍부한 API를 지원합니다.
참조값이 다름



//문자 잘라내기( substring() )

public class Main {
	public static void main(String[] args){
		String firstStr="0123456789";
		String secondStr=firstStr.substring(2);	//2부터~
		String thirdStr=firstStr.substring(2,5);	//2부터 4까지
		
		System.out.println(firstStr);
		System.out.println(secondStr);
		System.out.println(thirdStr);
	}
}


<< 실행 결과 >>
0123456789
23456789
234


//알파벳 대소문자 변경( toLowerCase(), toUpperCase() ) 비교 ( equalsIgnoreCase() )

public class Main {
	public static void main(String[] args){
		String normalStr="Java Programming";
		String lowerStr=normalStr.toLowerCase();
		String upperStr=normalStr.toUpperCase();
		
		System.out.println(normalStr.equals(lowerStr));
		System.out.println(normalStr.equalsIgnoreCase(lowerStr));
		System.out.println(normalStr.equalsIgnoreCase(upperStr));
	}
}


<< 실행 결과 >>
false
true
true



//문자열 앞뒤 공백 잘라내기 ( trim() )


public class Main {
	public static void main(String[] args){
		String oldStr="   자바 프로그래밍   "; 
		String newStr=oldStr.trim();
		
		System.out.print(oldStr);
		System.out.println(1);
		System.out.println(newStr);
		
		if(oldStr==newStr)
			System.out.println("참조값 같음");
		else 
			System.out.println("참조값 다름");		
	}
}


<< 실행 결과 >>
   자바 프로그래밍   1
자바 프로그래밍
참조값 다름




//문자열 반환( valueOf() )
;기본 타입을 문자열로 반환

--------------------------------------------------------------------

//자바에서 문자열 복사

-자바에서는 문자열을 상수의 형태로 관리하고, 또 동일한 유형의 문자열을 둘 이상 유지하지 않으므로
않으므로 문자열의 복사라는 표현이 흔하지 않다.

-무엇보다도 자바에서는 문자열을 복사할 필요 없다.



public class ClassTest {
	public static void main(String[] args) {		
		String str1="Lemon";
		String str2=new String(str1);
		
		if(str1==str2)	//참조값 비교
			System.out.println("str2==str3");	
		else
			System.out.println("str2!=str3");	//실행
			
		if(str1.equals(str2))
			System.out.println("내용이 같음");		//실행
		else
			System.out.println("내용이 다름");
			
	}

}


--------------------------------------------------------------------

//문자열 분리

"08 : 45 "
"11 : 24 "
콜론:을 기준으로 문자열을 나눈다고 할 때,
토큰(token)==08,45,11,24
구분자(delimiter)==콜론(:)
;문자열의 특정 구분자(delimiter)로 분리하기 위해서는 split() 메소드나 java.util.StringTokenizer 클래스를 이용

=>split()는 정규 표현식으로 구분 // StringTokenizer는 문자로 구분
e.g) split() 메소드 사용
public class Main {
	public static void main(String[] args){		
		String str="aaa bbb@ccc,ddd-eee";
		String[] separator=str.split(" |-|,|@");	// | 사용해서 다수의 구분자 지정		
		for(String tok : separator)
			System.out.println(tok);
		
	}
}

<< 실행 결과 >>
aaa
bbb
ccc
ddd
eee


//StringTokenizer 클래스


StringTokenizer st=new StringTokenizer("문자열","구분자");
=>구분자 생략하면 공백(space)로 지정

int		countTokens()		꺼내지 않고 남아 있는 토큰 수
bolean	hasMoreNext()		남아 있는 토큰이 있는지 여부
String	nextToken()			토큰을 하나씩 꺼내옴(토큰이 남아 있지 않으면 java.util.NoSuchElementException 예외 발생)

e.g)
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args){		
		String text="AAA/BBB/CCC/DDD";
		
		//how1:전체 토큰 수를 얻어 for문 루핑
		StringTokenizer st=new StringTokenizer(text,"/");
		int size=st.countTokens();
		for(int i=0;i<size;i++)
			System.out.println(st.nextToken());
		System.out.println();
		
		
		//how2:남아있는 토큰 확인 & while문으로 루핑
		st=new StringTokenizer(text,"/");
		while(st.hasMoreTokens()){
			System.out.println(st.nextToken());
		}
		
	}
}


<< 실행 결과 >>
AAA
BBB
CCC
DDD

AAA
BBB
CCC
DDD


e.g)
import java.util.StringTokenizer;
public class Test {
	public static void main (String[] args) {
		String phoneNum="TEL 82-02-997-2059";
		String javaCode="num+=1";
		
		System.out.println("First Result....");
		StringTokenizer st1=new StringTokenizer(phoneNum);
		//구분자(Delimiter)는 공백 (스페이스바,\n,\r,\t)이 된다.
		while(st1.hasMoreTokens()) {
			System.out.println(st1.nextToken());
		}
		
		System.out.println("\nSecond Result....");
		StringTokenizer st2=new StringTokenizer(phoneNum," -");
		//구분자는 2개 이상 가능
		while(st2.hasMoreTokens()) {
			System.out.println(st2.nextToken());
		}
		
		
		System.out.println("\nThird Result....");
		StringTokenizer st3=new StringTokenizer(javaCode,"+=",true);
		//세번째 인자는 구분자를 토큰으로 간주하느냐 마느냐 결정. 
		//true가 전달되면 구분자도 토큰으로 간주가 되어 nextToken 메소드의 호출에 의해 반환
		//false가 전달되면 구분자는 토큰으로 간주되지 않음.
		while(st3.hasMoreTokens()) {
			System.out.println(st3.nextToken());
		}					
	}
}

--------------------------------------------------------------------


//+ 연산과 +=연산의 진실

public class ClassTest {
	public static void main(String[] args) {
		String str1="Lemon"+"ade";
		//String str1="Lemon".concat("ade");		
		
		String str2="Lemon"+'A';
		//String str2="Lemon".concat(String.valueOf('A'));		
		//String.valueOf()호출 => 'A'를 담는 인스턴스 생성 & 참조값 반환
		//"Lemon".concat(문자열 "A"의 인스턴스 참조 값);
		
		String str3="Lemon"+3;
		//String str3="Lemon".concat(String.valueOf(3));
		//"Lemon".concat(문자열 "3"의 인스턴스 참조 값);



		String str4=1+"Lemon"+2;
		
		//String.valueOf(1).concat("Lemon").concat(String.valueOf(2));
		//"Lemon"이외의 문자열 4개 만듬 ==>비효율적임
		//그래서 자바 컴파일러는 
		//아무리 많은 + 연산을 취하더라도 딱 두개의 인스터만 생성된다(StringBuilder클래스로)
		
		str4+='!';
		
		System.out.println(str1);
		System.out.println(str2);
		System.out.println(str3);
		System.out.println(str4);	
		
	}

}

--------------------------------------------------------------------

//11-4 StringBuilder & StringBuffer 클래스

(Intro)
StringBuilder
//String => " " => String 인스턴스
차이점 : 
String은 한번 생성되면 변경할 수 없음 
StringBuilder는 메모리 버퍼에 다양한 데이터를 집어 넣고 하나의 String 인스턴스를 만들어냄 


--------------------------------------------------------------------

//StringBuilder

-StringBuilder는 문자열의 저장 및 변경을 위한 메모리 공간을 지니는 클래스
-문자열 데이터의 추가를 위한 append와 삽입을 위한 insert 메소드 제공


public class ClassTest {
	public static void main(String[] args) {
		StringBuilder strBuf=new StringBuilder("AB");	//buf:'A''B'
		//A와B가 buffer에 저장되어 있다. => 나중에 이걸 문자열로 바꿀 수 있다.		
		strBuf.append(25);	//'2''5'추가 ==> buf : AB25		
		strBuf.append('Y').append(true);	//buf : AB25Ytrue
		//strBuf.append('Y') => 참조값 다시 반환
		System.out.println(strBuf);
		
		strBuf.insert(2,false);		//buf : ABfalse25Ytrue		
		strBuf.insert(strBuf.length(),'Z');	//buf : ABfalse25Ytruez		
		System.out.println(strBuf);
				
	}
}

--------------------------------------------------------------------
//참조를 반환하는 메소드

-this의 반환은 인스턴스 자신의 참조 값 반환을 의미한다.
-그리고 이렇게 반환되는 참조 값을 대상으로 연이은 함수호출이 가능하다.

class SimpleAdder{
	private int num;
	public SimpleAdder()	{
		num=0;
	}
	public SimpleAdder add(int num)	{
		this.num+=num;
		return this;
	}
	public void showResult()	{
		System.out.println("add result : "+num);
	}
}

public class ClassTest {
	public static void main(String[] args) {
		SimpleAdder adder=new SimpleAdder();
		adder.add(1).add(3).add(5).showResult();
		//'adder의 참조값'.add(3)
		
	}

}
--------------------------------------------------------------------

//StringBuilder의 버퍼와 문자열 조합

-추가되는 데이터 크기에 따라서 버퍼의 크기가 자동으로 확장된다.
(버퍼의 크기를 확장하는 작업은 많은 연산을 요구되는 작업 => 필요로 하는 버퍼의 크기를 미리 할당하는게 좋음)
-생성자를 통해서 초기 버퍼의 크기를 지정할 수 있다.

public StringBuilder()				//기본 16개의 문자저장 버퍼 생성
public StringBuilder(int capacity)	//capacity개의 문자저장 버퍼 생성
public StringBuilder(String str)	//str.length()+16 크기의 버퍼 생성

-문자열의 복잡한 조합의 과정에서는 StringBuilder의 인스턴스가 활용된다. 때문에 추가로
 생성되는 인스턴스의 수는 최대 두 개이다.

String str4=1+"Lemon"+2;

==>new StringBuilder().append(1).append("Lemon").append(2).toString();
==>StringBuilder 인스턴스 생성 & toString메소드의 호출에 의한 한개
==>최대 인스턴스 2개 생성


//StringBuilder 활용 예제

public class Main {
	public static void main(String[] args){
		StringBuilder sb=new StringBuilder();	//StringBuilder 객체 생성
		StringBuilder copy=sb;
		
		sb.append("Java ").append("Program Study");
		//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
		//J a v a   P r o g r a  m     S  t  u  d  y
		System.out.println(sb.toString());

		sb.insert(4, "2");	//4번째 인덱스에 2를 삽입
		//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
		//J a v a   P r o g r a  m     S  t  u  d  y
		//J a v a 2   P r o g r  a  m     S  t  u  d  y
		System.out.println(sb);
		
		sb.setCharAt(4,'6');	//4번째 인덱스의 문자를 6으로 변경
		//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
		//J a v a 2   P r o g  r  a  m     S  t  u  d  y
		//J a v a 6   P r o g  r  a  m     S  t  u  d  y
		System.out.println(sb.toString());
		
		
		sb.replace(6, 13, "Book");	//6~12까지 Book으로 변경
		//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
		//J a v a 6   P r o g  r  a  m     S  t  u  d  y
		//J a v a 6   B o o k     S  t  u  d  y
		System.out.println(sb);
		
		sb.delete(4, 5);	//4<=index<5 까지 삭제
		//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
		//J a v a 6   B o o k     S  t  u  d  y
		//J a v a   B o o k    S  t  u  d  y
		System.out.println(sb);
		
		int length=sb.length();
		System.out.println("총 문자수 : "+length);
		
		String result=sb.toString();
		System.out.println(result);
		
		if(sb==copy)
			System.out.println("참조값이 같음");
		else
			System.out.println("참조값이 다름");		
	}
}


<< 실행 결과 >>
Java Program Study
Java2 Program Study
Java6 Program Study
Java6 Book Study
Java Book Study
총 문자수 : 15
Java Book Study
참조값이 같음

--------------------------------------------------------------------

/StringBuffer클래스

*StringBuffer클래스와 StringBuilder 클래스의 공통점 세 가지
 -메소드 수(생성자 포함)
 -메소드의 기능
 -메소드의 이름과 매개변수형

*StringBuffer 클래스와 StringBuilder 클래스의 차이점
 -StringBuffer는 쓰레드에 안전, StringBuilder는 쓰레드에 불안전














































