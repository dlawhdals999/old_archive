-------------------ch24. 파일과 I/O 스트림--------------------------

(Intro)
I/O를 배우기 위한 보조로 파일!
I/O는 네트워크 등 다양한 영역에서 활용됨.
I/O와 관련된 클래스 많음. => I/O라는 개념 자체를 이해하기
--------------------------------------------------------------------------

//24-1 FILE I/O에 대한 소개

(Intro)
I/O		<--->File		A
		<--->Console	B
		<--->Device		C
		....			D..

=========>
I/O		-> input 인터페이스		A
		-> output 인터페이스	B
								C
								D..
	
==>대상에 따라 I/O이 차이 많음
==>Input , Output의 인터페이스(중간에 존재하는 클래스,인터페이스)를 정의
==>A,B,C..각각 대상에 따라 input,output인터페이스를 구현 & input,output들의 메소드들을 호출을 통해 I/O진행

==>Focus : Bytestream과 문자Stream을 구별해서 정확히 이해 && filter에 대한 이해

--------------------------------------------------------------------------

//I/O의 범위와 간단한 I/O 모델의 소개

일반적인 입출력의 대상
 -키보드와 모니터
 -하드디스크에 저장되어 있는 파일
 -usb와 같은 외부 메모리 장치
 -네트워크로 연결되어 있는 컴퓨터
 -사운드카드,오디오카드와 같은 멀티미디어 장치
 -프린터,팩시밀리와 같은 출력장치

=>입출력 대상이 달라지면 프로그램상에서의 입출력 방식도 달라지는 것이 보통이다. 그런데 자바에서는 입출력 대상에 상관없이
입출력의 진행 방식이 동일하도록 별도의 'I/O 모델'을 정의하고 있다. => JAVA I/O 표준
I/O 모델의 정의로 인해서 입출력 대상의 차이에 따른 입출력 방식의 차이는 크지 않다. 기본적인 입출력의 형태는 동일하다. 그리고 
이것이 JAVA의 I/O스트림이 갖는 장점

//I/O 모델과 스트림(Stream)의 이해

자바 스트림의 큰 분류
 -입력 스트림(Input Stream)		프로그램으로 데이터를 읽어 들이는 스트림
 -출력 스트림(Output Stream)	프로그램으로부터 데이터를 내보내는 스트림

 =>데이터의 입력을 위해서는 입력 스트림, 출력을 위해서는 출력 스트림을 형성해야 한다. 
  그리고 여기서 말하는 스트림이라는 것도 인스턴스의 생성을 통해서 형성된다.
  (InputStream in=new FileInputStream("input.txt");

( 스트림(Stream) : 바이트 나열 , 단 방향성=>데이터의 흐름이 단방향 )

--------------------------------------------------------------------------

//파일 기반의 입력 스트림 형성

		InputStream
			↑
FileInputStream		...		..

=> 대상에 맞춰 InputStream 클래스를 구현.

InputStream in=new FileInputStream("run.exe");	//FileInpustream 인스턴스 생성 

InputStream클래스의 대표적인 두 메소드
-public abstract int read() throws IOException	// 1byte == 0~255 && 실패시 -1반환 =>int형 반환
-public void close() throws IOException

=>
read()메소드는 추상 메소드 (입력 스트림의 대상에 따라 다르게 정의 FileInputStream, ..etc)

-파일 대상의 입력 스트림 생성
InputStream in=new FileInputStream("run.exe");
int bData=in.read();	//오버라이딩에 의해 FileInputStream클래스의 read()메소드 호출 & 아스키코드					
						//4바이트중 마지막 ㅁㅁㅁㅁ 마지막 1byte가 유효한 데이터

-그래픽 디바이스 대상의 입력 스트림 생성(가상의 코드)
InputStream in=new GDInputStream(0x2046);	//0x2046가 그래픽 장치의 할당 주소가 가정
int bData=in.read();						//오버라이딩에 의해 GDInputStream의 read메소드 호출

--------------------------------------------------------------------------

//파일 대상의 출력 스트림 형성
-입출력 스트림은 대부분 쌍(pair)을 이룬다.
Read					Write
InputStream		<->		OutputStream
FileInputStream <->		FileOutputStream

-OutputStream 클래스의 대표적인 메소드
 -public abstract void write(int b) throws IOException
 -public void close() throws IOException
 
=>write메소드도 read와 마찬가지로 대상에 따라 각각 오버라이딩해서 이용
=>매개변수가 int형이라서 총 4바이트 중 하위 1바이트만 출력 스트림 사용 
 
(ex) 파일 대상의 출력 스트림 생성 및 데이터 전송
OutputStream out=new FileOutputStream("home.bin");
out.write(1);	//4바이트 int형 정수 1의 하위 1바이트만 전달된다.
out.write(2);	//4바이트 int형 정수 2의 하위 1바이트만 전달된다.
out.close();	//출력 스트림 소멸

--------------------------------------------------------------------------

//스트림 기반의 파일 입출력 예제

FileInputStream 인스턴스 생성방법
1)
FileInputStream in=new FileInputStream("c:Temp/test/text.txt");

2)
File file=new File("c:Temp/test/text.txt");
FileInputStream in=new FileInputStream(file);


import java.io.*;
class ByteFileCopy {
	public static void main(String[] args) throws IOException {
		InputStream in = new FileInputStream("org.bin");		//입력 스트림 형성
		OutputStream out = new FileOutputStream("cpy.bin");		//출력 스트림 형성 & 파일 자동 생성 & 덮어쓰기

		int copyByte = 0;
		int bData;

		while (true) {
			bData = in.read();
			if (bData == -1)
				break;

			out.write(bData);
			copyByte++;
		}
		//입출력 스트림 소멸
		in.close();
		out.close();
		System.out.println("복사된 바이트 크기 " + copyByte);
	}
}

=>바이트 단위 복사(1바이트 씩 복사)가 진행 => 시간 많이 걸림.
=>throws IOException : main에서 발생하는 IOException 예외는 main 외부로 던짐. 입출력 관련코드에서는 많은 예외처리가 요구됨
=>적절치 못한 예외처리 방식임(단순히 다른 코드 집중을 위한 것)

--------------------------------------------------------------------------

//보다 빠른 속도의 파일복사 프로그램

-public int read(byte[] b) throws IOException
-public void write(byte[] b,int off,int len) throws IOException
=>바이트 단위 read & write 메소드를 대신해서 바이트 배열 단위의 다음 두 메소드를 호출하는 것이 핵심

import java.io.*;

class BufferFileCopy {
	public static void main(String[] args) throws IOException {
		InputStream in = new FileInputStream("org.bin");
		OutputStream out = new FileOutputStream("cpy.bin");

		int copyByte = 0;
		int readLen;
		byte buf[] = new byte[1024];

		while (true) {
			readLen = in.read(buf);
			if (readLen == -1)
				break;
			out.write(buf, 0, readLen);
			copyByte += readLen;
		}

		in.close();
		out.close();
		System.out.println("복사된 바이트 크기 " + copyByte);
	}
}

=>파일 복사는 똑같지만, 손수레로 물건을 나르는 것과 대형 트럭으로 물건을 나르는것과 같은 차이가 있음
(HardDisk에 access하는 시간 많이 걸려서)

--------------------------------------------------------------------------

//24-2 필터 스트림의 이해와 활용

I/O	ㅡㅡ>(Stream)ㅡㅡ> FILE
I/O	ㅡㅡ<(Stream)ㅡㅡ< FILE

=>Byte 단위로 읽어드림
=>원하는 대로(int,char,String등) 읽을 수 없음.

==>
I/O ㅡㅡFilter Streamㅡㅡ FILE

=>필터를 조합하는 것이 중요.

Filter 인스턴스 <---->일반 스트림 인스턴스
=>Filter 인스턴스가 일반 스트림 인스턴스에 접근해야함
=>Filter 인스턴스 생성시 일반 스트림 인스턴스를 생성자를 통해서 전달

일반 스트림은 byte 단위로 전송되므로 int형 정수가 저장되어 있을때, 이를 정수형태로 꺼내는 것은 불가능
=>이를 위해서 byte 단위로 4개의 바이트를 읽어 들인 다음에 이를 int형 데이터로 조합해야 한다.
=>이러한 조합을 중간에서 대한 해 주는 스트림을 가리켜 필터 스트림 이라고 한다.

Java <----필터 스트림 <-----입력 스트림 <----A

-필터 입력 스트림 : 입력 스트림에 연결하는 필터 스트림
-필터 출력 스트림 : 출력 스트림에 연결하는 필터 스트림
(필터 스트림도 입력용과 출력용이 구분 된다.)

--------------------------------------------------------------------------

//기본자료형 단위의 데이터 입출력

import java.io.*;

class DataFilterStream {
	public static void main(String[] args) throws IOException {
		/*파일로의 출력*/
		OutputStream out = new FileOutputStream("data.bin");	
		DataOutputStream filterOut = new DataOutputStream(out);	//출력 스트림과 필터 스트림과의 연결
		filterOut.writeInt(275);
		filterOut.writeDouble(45.79);
		filterOut.close();	//필터스트림 소멸하면 일반 스트림도 소멸!

		/*파일로부터 입력*/
		InputStream in = new FileInputStream("data.bin");
		DataInputStream filterIn = new DataInputStream(in);		//입력 스트림과 필터 스트림과의 연결
		int num1 = filterIn.readInt();
		double num2 = filterIn.readDouble();
		filterIn.close();

		System.out.println(num1);
		System.out.println(num2);
	}
}

=>필터 스트림인지 아닌지 구별하는 법.
* 필터 입력 스트림 클래스 : FilterInputStream 클래스를 상속한다.
* 필터 출력 스트림 클래스 : FilterOutputStream	클래스를 상속한다.

--------------------------------------------------------------------------

//버퍼링 기능을 제공하는 필터 스트림

*BufferedInputStream	버퍼 필터 입력 스트림		//BuffredInputStream은 입력버퍼,
*BufferedOutputStream	버퍼 필터 출력 스트림		//BufferedOutputStream은 출력버퍼 제공
=>생성자에 size 줄 수도있음(Default : 2M)

/*버퍼를 이용한 파일 복사 예제*/
import java.io.*;
class ByteBufferedFileCopy {
	public static void main(String[] args) throws IOException {
		InputStream in = new FileInputStream("org.bin");
		OutputStream out = new FileOutputStream("cpy.bin");

		BufferedInputStream bin = new BufferedInputStream(in);
		BufferedOutputStream bout = new BufferedOutputStream(out);

		int copyByte = 0;
		int bData;

		while (true) {
			bData = bin.read();
			if (bData == -1)
				break;

			bout.write(bData);
			copyByte++;
		}

		bin.close();
		bout.close();
		System.out.println("복사된 바이트 크기 " + copyByte);
	}
}

=>느린이유 : 프로그램 <--파일(물리 장치) 과정이 오래 걸림 
=>버퍼사용 : 프로그램 <-버퍼 (소프트웨어 영역)| <--파일

-BufferedInputStream
;read 메소드를 호출하지 않아도 일반 스트림으로부터 데이터를 읽어 들여서 버퍼를 무조건 채운다. 1바이트씩 채워나가는 것이 아니라
 한번에 많은 양의 데이터를 채움으로써 빠른 속도로 버퍼를 채워나간다.
 
-BufferedOutputStream
;자신이 가지고 있는 버퍼가 꽉 찼을때, 출력 스트림으로 데이터를 전송

//버퍼링 기능에 대한 대책, flush 메소드의 호출

문제상황 : 데이터가 버퍼 필터 스트림에 저장(아직 출력 스트림을 통해 파일로 전송되지 않은 상황)되어 있는 상태에서 갑작스러운 종료 & 데이터손실

=>BufferedOutputStream 클래스의 flush 메소드 호출을 통해서 버퍼링 된 데이터의 목적지 전송이 가능하다.
	public void flush() throws IOException //버퍼에있는것을 비움(대상으로 데이터 전송)
=>또한, close 메소드를 통해서 스트림을 종료하면 스트림의 버퍼는 flush! 된다.

/*버퍼 사용 예제*/

import java.io.*;
public class Sol {
	public static void main(String[] args) throws IOException{
		/*필터 적용해서 파일 저장하기*/
		String fileName="test.txt";
		OutputStream out=new FileOutputStream(fileName);
		BufferedOutputStream buffOut=new BufferedOutputStream(out);
		
		byte[] bArr=new byte[500];
		for(int i=0;i<500;i++){
			bArr[i]=1;
		}
		
		buffOut.write(bArr);
		//buffOut.flush();
		try{
			Thread.sleep(10000);
		}catch(InterruptedException e){
			e.printStackTrace();
		}
		
		buffOut.close();
		System.out.println("슬립 끝");		
	}
}

==>flush()호출하면 바로 test.txt에 데이터 저장 BUT 주석하면 close()할때 저장
--------------------------------------------------------------------------

//파일에 double형 데이터 저장 + 버퍼링
상황 : Java ===> File로 저장할때, double형 실수 저장 + 버퍼링 기능 추가

1.논리적으로 해결하기
	1)
	Java --> 버퍼 --> 데이터 --> OutputStream --> 파일

	OutputStream out=new FileOutputStream("data.bin");		
	DataOutputStream dataFilterOut=new DataOutputStream(out);
	BufferedOutputStream bufFilterOut=new BufferedOutputStream(dataFilterOut);
	=>Java double형 변수 => Buffer에 의해 바이트 단위로 쪼개짐 
	=> Data filter에서 조합해야하는데 문제(기본 자료형 데이터를 받아 들이기는 스트림이므로)

	2)
	Java --> 데이터 --> 버퍼 --> OutputStream --> 파일
	
	OutputStream out=new FileOutputStream("data.bin");
	BufferedOutputStream bufFilterOut=new BufferedOutputStream(out);
	DataOutputStream dataFilterOut=new DataOutputStream(bufFilterOut);
	=>Java double형 변수 => Data filter에 의해 double형 변수를 바이트 단위로 쪼갬 
	=>바이트 단위로 버퍼에 쌓아둠 => out 스트림으로 파일에 저장

2.문법적으로 스트림 연결 가능성 확인
	Constructor Detail
	=>생성자와 상속의 관계를 통해서 스트림의 연결 가능성을 확인해야 한다.
	-DataOutputStream
	생성자 : DataOutputStream(OutputStream out) 

	-BufferedOutputStream 
		java.io		
		java.lang.Object
			java.io.OutputStream
				java.io.FilterOutputStream
					java.io.BufferedOutputStream

/*Data,Buffer 필터 조합 예제*/
import java.io.*;

class DataBufferFilterStream {
	public static void main(String[] args) throws IOException {
		OutputStream out = new FileOutputStream("data.bin");
		BufferedOutputStream bufFilterOut = new BufferedOutputStream(out);
		DataOutputStream dataFilterOut = new DataOutputStream(bufFilterOut);

		dataFilterOut.writeInt(275);
		dataFilterOut.writeDouble(45.79);
		dataFilterOut.close();	//가장 마지막에 연결 된 스트림만 소멸시켜주면 다 소멸됨.

		InputStream in = new FileInputStream("data.bin");
		BufferedInputStream bufFilterIn = new BufferedInputStream(in);
		DataInputStream dataFilterIn = new DataInputStream(bufFilterIn);
		int num1 = dataFilterIn.readInt();
		double num2 = dataFilterIn.readDouble();
		dataFilterIn.close();

		System.out.println(num1);
		System.out.println(num2);
	}
}

/*버퍼의 성능 테스트*/

import java.io.*;

public class DataBufferedFilterPerformance {
	
	//약 800MB 정도 크기의 데이터를 파일에 저장 & 경과 시간을 나타내는 함수
	public static void performanceTest(DataOutputStream dataOut) throws IOException{
		long startTime=System.currentTimeMillis();	//시작 시간
		for(int i=0;i<10000;i++)	//약800MB정도의 실수를 계속 저장
			for(int j=0;j<1000;j++)
				dataOut.writeDouble(12.345);
		
		dataOut.flush();	//마지막 데이터까지 완전히 전송된 이후의 시간을 측정하기 위해서 flush 메소드 호출
		long endTime=System.currentTimeMillis();	//종료 시간
		System.out.println("경과 시간 : "+(endTime-startTime));			
	}
	
	public static void main(String[] args) throws IOException{
		//버퍼 연결 테스트
		OutputStream out=new FileOutputStream("input2.txt");
		BufferedOutputStream bufFilterOut=new BufferedOutputStream(out,1024*10);	//버퍼크기 10KB
		DataOutputStream dataFilterOut=new DataOutputStream(bufFilterOut);
		System.out.println("---버퍼 연결 ---");
		performanceTest(dataFilterOut);
		dataFilterOut.close();
		
		//버퍼없이 테스트
		System.out.println("---버퍼 연결X ---");
		OutputStream out2=new FileOutputStream("input3.txt");
		DataOutputStream dataFilterOut2=new DataOutputStream(out2);
		performanceTest(dataFilterOut2);
		dataFilterOut2.close();
				
	}
}

<< 실행 결과 >>
---버퍼 연결 ---
경과 시간 : 380
---버퍼 연결X ---
경과 시간 : 16129

==>약 40배 넘게 차이남 // 중간에 버퍼 필터를 삽입해도 버퍼링에 의한 성능향상은 유지!

/*연습 문제*/
import java.io.*;

class MyInfo{
	String info;

	public MyInfo(String info){
		this.info=info;
	}
	
	public String toString(){
		return info;
	}
}
public class PrintStreamTest {	
	public static void main(String[] args) throws IOException{
		OutputStream out=new FileOutputStream("println.txt");
		BufferedOutputStream bufFilterOut=new BufferedOutputStream(out);
		PrintStream pOut=new PrintStream(bufFilterOut);	//출력 스트림만 들어가서, output이 없음
		MyInfo mInfo=new MyInfo("저는 자바 프로그래머 입니다!");
		
		pOut.println("제 소개를 하겠습니다.");
		pOut.println(mInfo);
		pOut.printf("나이 %d , 몸무게 %d",28,70);
		
		pOut.close();
	}
}
					
--------------------------------------------------------------------------

//24-3 문자 스트림의 이해와 활용

(Intro)
바이트 스트림 <----> 문자 스트림
Java => 유니코드 =>자바 프로그램내에서 문자를 저장하고 해석할 때 유니코드를 사용
Windows에서 문자 : A인코딩 가정
Linux  에서 문자 : B인코딩 가정

상황1)
Java프로그램상에서 Windows에 'A' 저장 -> 0065 -> Windows 파일에 65로 저장 
& Java프로그램에서 문자 읽기 -> 0065 -> 'A'==>문제 X

상황2)
Java -> File -> Windows 메모장에서 읽을때 =>인코딩과 디코딩이 달라서 문제 발생
=>Java에서 문자 'A'를 Windows File에 저장할 때, Java의 유니코드 기준이 아니라 Windows의 A인코딩 방식으로 저장되야함.
=>Java에서 문자 'A'를 Linux File에 저장할 때, Java의 유니코드 기준이 아니라 Linux의 B인코딩 방식으로 저장되야함.
==>운영체제의 인코딩 방식에 맞춰서 사용하는 것이 문자 스트림

Q. 네트워크에서 A라는 컴퓨터는 Java(Windows) B컴퓨터는 Java(Linux)이고 A에서 B로 문자를 전달하고 B가 자바로 열때?
=>바이트 스트림 사용!

==>즉, OS에서 데이터를 사용할때는 문자스트림을 사용!

--------------------------------------------------------------------------

//바이트 스트림과 문자 스트림의 차이

-바이트 스트림의 데이터 송수신 특성
 바이트 스트림은 데이터를 있는 그대로 송수신 하는 스트림이다. 그리고 이 바이트 스트림을 이용하여 문자를 파일에 저장하는 것도 가능하다.
 물론 이렇게 저장된 데이터를 자바 프로그램을 이용해서 읽으면 문제되지 않는다. 하지만 다른 프로그램을 이용해서 읽으면 문제가 될 수 있다.

-바이트 스트림을 이용한 파일 대상의 문자 저장의 문제점
 운영체제 별로 고유의 문자표현방식이 존재한다. 그리고 운영체제에서 동작하는 프로그램은 해당 운영체제의 문자표현 방식을 따른다. 따라서 파일에 저장된
 데이터는 해당 운영체제의 문자표현 방식을 따라서 저장되어 있어야 한다. 해당 운영체제에서 동작하는 다른 프로그램에 의해서 참조가 되는 파일이라면..
 
-문자 스트림은 해당 운영체제에 따른 인코딩 방식을 지원

Java Prog<-윈도우 인코딩->File		|		Java Prog <-리눅스 인코딩 ->File
		윈도우 운영체제				|				리눅스 운영체제
윈도우 기반 문자 인코딩하여 파일 입출력	|		리눅스 기반 문자 인코딩하여 파일 입출력

==>문자 스트림은 해당 운영체제의 문자 인코딩 기준을 따라서 데이터 입출력 진행
대부분 문자 스트림은 바이트 스트림과 1대 1의 대응을 이룬다!

--------------------------------------------------------------------------

//FileReader & FileWriter
		바이트 스트림										문자 스트림
InputStream,OutputStream			<-- 대응 -->		Reader,Writer
FileInputStream,FileOutputStream	<-- 대응 -->		FileReader,FileWriter

-Reader의 대표적인 메소드
public int read() throws IOException
public abstract int read(char[] cbuf,int off,int len) throws IOException

-Writer의 대표적인 메소드
public void write(int c) throws IOException
public abstract void write(char[] buf,int off,int len) throws IOException

/*Writer 예제*/
import java.io.*;

class FileWriterStream {
	public static void main(String[] args) throws IOException {
		char ch1 = 'A';
		char ch2 = 'B';	//자바에서는 각각 2바이트로 표현됨

		Writer out = new FileWriter("hyper.txt");	//문자 출력 스트림 형성(존재하지 않으면 새로 생성)
		out.write(ch1);	//2바이트 전송
		out.write(ch2);	//2바이트 전송
		//실행 운영체제에 따라서 1바이트씩 인코딩 되어서 저장
		out.close();
	}
}

=>4바이트를 전송했지만 hyper.txt의 파일크기는 2바이트(윈도우의 영어 인코딩은 1바이트)

/*Reader 예제*/
import java.io.*;
class FileReaderStream{
	public static void main(String[] args) throws IOException	{
		char[] cbuf=new char[10];
		int readCnt;
		
		Reader in=new FileReader("hyper.txt");	//문자 입력 스트림 형성
		readCnt=in.read(cbuf, 0, cbuf.length);	//최대 10개(cbuf.length)의 문자를 읽어서 저장
												//readCnt에 실제 읽어 들인 문자 수 저장
		for(int i=0; i<readCnt; i++)
			System.out.println(cbuf[i]);		
		in.close();
	}
}

=>hyper.text에 저장되어있는 2바이트씩 2개 문자 4바이트로 저장(java에)

--------------------------------------------------------------------------

//BufferedReader & BufferedWriter

	바이트 스트림							문자 스트림
BufferedInputStream		<--대응-->	BufferedReader
BufferedOutputStream	<--대응-->	BufferedWriter

-문자열 입력
BufferedReader 클래스의 다음 메소드
public String readLine() throws IOException

-문자열의 출력
BufferedWriter 클래스의 다음 메소드
public void write(String str) throws IOException

=>일관성 없는 문자열의 입력방식과 출력방식! (문자열의 입력은 버퍼링의 유무에 따른 성능 차이가 커서)
=>문자열의 입력뿐만 아니라 출려도 버퍼링의 존재는 도움이 되므로 입력과 출력 모두에 버퍼링 필터를 적용하자.

-문자열 출력을 위한 스트림 구성
BufferedWriter out=new BufferedWriter(new FileWriter("String.txt"));

-문자열 입력을 위한 스트림의 구성
BufferedReader in=new BufferedReader(new FileReader("String.txt"));

--------------------------------------------------------------------------

//문자열 입출력의 예

/*문자열 출력의 예*/
import java.io.*;
class StringWriter {
	public static void main(String[] args) throws IOException {
		//문자열 저장을 위한 출력 스트림 형성
		BufferedWriter out = new BufferedWriter(new FileWriter("Strint.txt"));	

		out.write("박지성 - 메시 멈추게 하는데 집중하겠다.");	
		out.newLine();		//개행은 newLine 메소드의 호출을 통해서 이뤄진다. 시스템에 따라 개행을 표현하는 방법이 다르기 때문
		out.write("올 시즌은 나에게 있어 최고의 시즌이다.");
		out.newLine();
		out.write("팀이 승리하는 것을 돕기 위해 최선을 다하겠다.");
		out.newLine();
		out.write("환상적인 결승전이 될 것이다.");
		out.newLine();
		out.newLine();
		out.write("기사 제보 및 보도자료");
		out.newLine();
		out.write("press@goodnews.co.kr");
		out.close();
		System.out.println("기사 입력 완료.");
	}
}

/*문자열 입력의 예*/

import java.io.*;
class StringReader {
	public static void main(String[] args) throws IOException {
		//문자열을 읽기 위한 스트림 형성
		BufferedReader in = new BufferedReader(new FileReader("String.txt"));

		String str;
		while (true) {
			str = in.readLine();	//개행 전까지 데이터를 한번에 읽어서 문자열로 저장. 읽을게 없으면 null반환
			if (str == null)
				break;

			System.out.println(str);	//파일에 있는 개행정보는 읽을때만 기준 & str에 저장 시 무시됨.
		}
		in.close();
	}
}

--------------------------------------------------------------------------

//PrintWriter

-System.out은 PrintStream임을 기억하고, 이 이상으로 PrintStream을 활용하지 않는다.
( PrintStream ; 다양한 형태의 데이터를 문자열의 형태로 출력하거나(println), 문자열의 형태로 조합하여 출력한다.(printf)
  but PrintStream 은 바이트 스트림.)

-printf, println등 문자열 단위의 출력이 필요하다면 반드시 PrintWriter를 사용한다.

=>PrintStream과 PrintWriter는 유사하다. PrintWriter는 PrintStream을 대신할 수 있도록 정의된 클래스이다.
따라서 PrintWriter의 활용을 권고한다.
이는 입력 필터 스트림이 존재하지 않는 대표적인 스트링 클래스이다.

import java.io.*;
class PrintWriterStream {
	public static void main(String[] args) throws IOException {
		PrintWriter out = new PrintWriter(new FileWriter("printf.txt"));

		out.printf("제 나이는 %d살 입니다.", 24);
		out.println("");	//문자열에 \n을 삽입되었다고 해서 파일내에서 개행이 이뤄지지 않는다. 
							//그러나 println 호출시 시스템에 따른 개행정보가 적절히 삽입된다.

		out.println("저는 자바가 좋습니다.");
		out.print("특히 I/O 부분에서 많은 매력을 느낍니다.");
		out.close();
	}
}

/*파일 입출력 연습문제*/
import java.io.*;
public class BufferedPrintWriter {
	public static void main(String[] args) throws IOException {
		/*write */
		FileWriter out=new FileWriter("printf.txt");
		PrintWriter bufOut = new PrintWriter(new BufferedWriter(out));		
		bufOut.printf("제 나이는 %d살 입니다.", 24);
		bufOut.println("");		
		
		bufOut.println("저는 자바가 좋습니다.");
		bufOut.print("특히 I/O 부분에서 많은 매력을 느낍니다.");
		bufOut.close();
		
		/*read*/
		BufferedReader in=new BufferedReader(new FileReader("printf.txt"));
		String str;
		
		while(true){
			str=in.readLine();
			if(str==null)
				break;
			System.out.println(str);
		}				
		in.close();
	}
}


//printf 메소드

%tF		%tY-%tM-%td		2010-01-06
%tY		4자리 년			2010
%ty		2자리 년			10
%tm		2자리 월			01
%td		2자리 일			06
%tH		2자리 시(0~23)	08
%tl		시(0~12)			8
%tM		2자리 분			06
%tS		2자리 초			24


import java.text.SimpleDateFormat;
import java.util.Date;

public class Main {
	public static void main(String[] args){
		Date now=new Date();
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:MM:ss");
		System.out.println("[현재 날짜 및 시간]");
		System.out.println(sdf.format(now));
		System.out.println("--------------");		
		
		System.out.printf("tF : %tF \n",now);
		System.out.printf("tY : %tY \n",now);
		System.out.printf("ty : %ty \n",now);
		System.out.printf("tm : %tm \n",now);
		System.out.printf("td : %td \n",now);
		System.out.printf("tH : %tH \n",now);
		System.out.printf("tl : %tl \n",now);
		System.out.printf("tM : %tM \n",now);
		System.out.printf("tS : %tS \n",now);
		
	}
}

<< 실행 결과 >>
[현재 날짜 및 시간]
2016-11-13 23:11:20
--------------
tF : 2016-11-13 
tY : 2016 
ty : 16 
tm : 11 
td : 13 
tH : 23 
tl : 11 
tM : 08 
tS : 20 



--------------------------------------------------------------------------

//스트림을 통한 인스턴스의 저장

//ObjectInputStream & ObjectOutputStream
(사실상 바이트 스트림에 속하지만, 일반적으로 오브젝트 스트림으로 구분 지음.
 필터스트림과 매우 유사하지만, 필터스트림을 상속하지 않아서 기술적으로 필터스트림으로 분류하지않음)

-ObjectOutputStream 클래스의 메소드 : 인스턴스 저장
public final void writeObject(Object obj) throws IOException

-ObjectInputStream 클래스의 메소드 : 인스턴스 복원
public final Object readObject() trhows IOException,ClassNotFoundException

=>
직렬화의 대상이 되는 인스턴스의 클래스는 java.io.Serializable 인터페이스를 구현해야 한다. 이 인터페이스는
'직렬화 대상임을 표시'하는 인터페이스일 뿐, 실제 구현해야 할 메소드가 존재하는 인터페이스는 아니다.

직렬화(serialization) 	: 인스턴스가 파일에 저장되는 과정(저장을 위해 거치는 과정)
역직렬화(deserialization) 	: 직렬화의 반대의 과정 

cf)직렬화,역직렬화라는 표현은 파일뿐만 아니라 다른 I/O에도 적용되는 표현.

=>
직렬화는 리소스 소모가 많은 작업이므로 과도한 직렬화는 성능에 영향을 줄 수 있다.
그러나 연속적으로 입출력이 발생하는 상황이 아니라면, 그리고 시스템에 영향을 주지 않는 상황이라면
직렬화의 적절한 활용은 다양한 상황에서 프로그래머에게 수고를 덜어주기도 한다.

--------------------------------------------------------------------------

//파일 대상의 인스턴스 저장과 복원의 예

import java.io.*;

class Point implements Serializable {	//Serializable 구현 => '직렬화'가능
	int x, y;

	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

class Circle implements Serializable {
	Point p;
	double rad;

	public Circle(int x, int y, double r) {
		p = new Point(x, y);
		rad = r;
	}

	public void showCirlceInfo() {
		System.out.printf("[%d, %d] \n", p.x, p.y);
		System.out.println("rad: " + rad);
	}
}

class SerializableInstMember {
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		/* 인스턴스 저장 */
		ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("Object.ser"));

		out.writeObject(new Circle(1, 1, 2.4));
		out.writeObject(new Circle(2, 2, 4.8));
		out.writeObject(new String("String implements Serializable"));	//String클래스도 Serializable을 구현
		out.close();

		/* 인스턴스 복원 */
		ObjectInputStream in = new ObjectInputStream(new FileInputStream("Object.ser"));
		Circle cl1 = (Circle) in.readObject();	//반환형이 Object이므로 적절한 캐스팅
		Circle cl2 = (Circle) in.readObject();
		String message = (String) in.readObject();
		in.close();

		/* 복원된 정보 출력 */
		cl1.showCirlceInfo();
		cl2.showCirlceInfo();
		System.out.println(message);
	}
}

//위의 예제에서 버퍼 조합도 가능

--------------------------------------------------------------------------

//줄줄이 사탕으로 엮여 들어갑니다.

Serializable		Serializable		Serializable
BBB b	-------->	CCC c ----------->	int m3
int m1				int m2

AAA클래스				BBB클래스				CCC클래스

위의 경우도 AAA인스턴스가 직렬화 되면, AAA가 참조하는 BBB인스턴스도, BBB가 참조하는 CCC인스턴스도 
함께 직렬화 된다.
그래서 위의 에제에서 Point클래스에 implements Serializable 선언안하면 에러나옴.

--------------------------------------------------------------------------

//직렬화 대상에서 제외, transient , static 필드

import java.io.*;

class PersonalInfo implements Serializable {
	String name;
	transient String secretInfo;	//디폴트 값으로 복원

	int age;
	transient int secretNum;		//디폴트 값으로 복원

	public PersonalInfo(String name, String sInfo, int age, int sNum) {
		this.name = name;
		secretInfo = sInfo;
		this.age = age;
		secretNum = sNum;
	}

	public void showCirlceInfo() {
		System.out.println("name: " + name);
		System.out.println("secret info: " + secretInfo);
		System.out.println("age: " + age);
		System.out.println("secret num: " + secretNum);
		System.out.println("");
	}
}

class TransientMembers {
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		/* 인스턴스 저장 */
		ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("Personal.ser"));

		PersonalInfo info = new PersonalInfo("John", "baby", 3, 42);
		info.showCirlceInfo();
		out.writeObject(info);
		out.close();

		/* 인스턴스 복원 */
		ObjectInputStream in = new ObjectInputStream(new FileInputStream("Personal.ser"));

		PersonalInfo recovInfo = (PersonalInfo) in.readObject();
		in.close();

		/* 복원된 정보 출력 */
		recovInfo.showCirlceInfo();
	}
}

<< 실행결과 >>
name: John
secret info: baby
age: 3
secret num: 42

name: John
secret info: null
age: 3
secret num: 0

==>transient로 선언된 멤버는 직렬화의 대상에서 제외된다! 따라서 복원시 
자료형의 디폴트 값(null,0,0.0)으로 복원된다.

--------------------------------------------------------------------------

//serialVersionUID 필드
;Serializable 인터페이스 구현한 클래스를 컴파일 하면 자동적으로 serialVersionUID 정적 필드가 추가됨.

=>ClassC 클래스 인스턴스들의 대해 ObjectOutputStream을 통해 Object.dat 에 저장되어있다고 가정.
=>추가적으로 ClassC클래스의 변경 & 저장(컴파일)
=>ClassC 클래스의 serialVersionUID 필드값 변경
=>ObjectInputStream을 통해 데이터 읽으면 
Exception in thread "main" java.io.InvalidClassException: ClassC; 
local class incompatible: stream classdesc 
serialVersionUID = -2466635162794233289, 
local class serialVersionUID = -6079964543986275642

위의 오류 발생

=>class에 static final long serialVersionUID=정수값; 이 명시적으로 선언되어있으면 UID값을 유지할 수 있음
=>자바는 <JDK 설치 경로>\bin 폴더에 serialVersionUID 값을 자동으로 생성시켜주는 serialver.exe 명령어를 제공

e.g) in cmd
 > serialver XXX
XXX : static final long serialVersionUID=~~~;

위에 나온거 복붙 하기

//상속관계에 있는 클래스 직렬화
부모 : Serializable 구현 X // 자식 : Serializable 구현
=>자식 인스턴스 직렬화 시 부모 필드는 직렬화에서 제외
=>
1)부모 클래스가 Serializable 인터페이스를 구현한다.
2)자식 클래스에서 wrtieObject()와 readObject() 메소드를 선언해서 부모 객체의 필드를 직접 출력시킨다.
  (private가 아니면 자동으로 호출 x)


e.g)자식 클래스에서 writeObject() 와 readObject() 메소드를 선언

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

class Parent{
	public String filed1;
}

class Child extends Parent implements Serializable{
	public String filed2;
	
	private void writeObject(ObjectOutputStream out) throws IOException{
		out.writeUTF(filed1);	//부모 클래스에 정의된 필드 직렬화
		out.defaultWriteObject();//자식 클래스에 정의된 필드들을 모두 직렬화
	}
	
	private void readObject(ObjectInputStream in) 
								throws IOException,ClassNotFoundException{
		filed1=in.readUTF();	//부모 클래스 필드 역직렬화
		in.defaultReadObject(); //자식 클래스 역직렬화
	}
}

public class Main {
	public static void main(String[] args) throws Exception{
		String fileName="E:/test/Object.dat";
		ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(fileName));
		
		Child child=new Child();
		child.filed1="Zac will be ";
		child.filed2="a Good Programmer";
		
		oos.writeObject(child);
		oos.flush(); oos.close();
		
		
		ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));
		Child reInst=(Child)ois.readObject();
		System.out.println(reInst.filed1+reInst.filed2);
		
		ois.close();		
	}
}


<< 실행 결과 >>
Zac will be a Good Programmer



--------------------------------------------------------------------------

//24-5.Random Access 파일과 File 클래스

(Intro)
I/O 스트림
	[흐름] A--->B 순서의 뒤바뀜이 일어나지X
=>스트림을 공부해서 순차적으로 접근하는 방법을 사용했음.

But 원하는 위치에 원하는 데이터를 읽을 필요가 있음(예를들면 미디어는 끝에 파일의 정보가 있음)
=> Random Access

I/O와 별도의 챕터라고 생각해도 됨.
--------------------------------------------------------------------------

//RandomAccessFile 클래스

-RandomAccessFile 클래스의 특징
 입력과 출력이 동시에 이뤄질 수 있다.
 입출력 위치를 임의로 변경할 수 있다.
 파일을 대상으로만 존재하는 스트림이다.
(RandomAccessFile 클래스는 사실상 자바 IO의 일부가 아니다. 다만, 컨트롤의 대상이 파일이기 때문에
IO와 함께 다뤄질 뿐이고, 편의상 스트림으로 분류하기도 하지만, 엄밀히 말해서 스트림이 아니다. 
스트림은 임의의 위치에 데이터를 읽고 쓸 수 없다. 

-RandomAccessFile 클래스의 대표적인 메소드

public int read() throws IOException
public int read(byte[] b,int off,int len) throws IOException
public final int readInt() throws IOException
public final double readDouble() throws IOException

public void write(int b) throws IOException
public void write(byte[] b,int off,int len) throws IOException
public final void writeInt(int v) throws IOException
public final void writeDouble(double v) throws IOException

//파일의 위치정보를 얻거나 변경하는 메소드
public long getFilePointer() throws IOException	//File의 어디까지 읽었는지 반환하는 메소드
public void seek(long pos) throws IOException	//위치 정보를 바꾸는 메소드
 
--------------------------------------------------------------------------

//RandomAccessFile 인스턴스의 생성 및 활용의 예
생성자 : public RandomAccessFile(String name,String mode) throws FileNotFoundException
//"r" : 읽기 위한 용도(파일이 없으면 예외), "rw" : 읽고 쓰기 위한 용도(파일 없으면 생성)

import java.io.*;
class RandomFileReadWrite {
	public static void main(String[] args) throws IOException {
		RandomAccessFile raf = new RandomAccessFile("data.bin", "rw");	//rw==입출력 동시 가능

		System.out.println("Write...");
		System.out.printf("현재 입출력 위치: %d 바이트 \n", raf.getFilePointer());

		raf.writeInt(200);
		raf.writeInt(500);
		System.out.printf("현재 입출력 위치: %d 바이트 \n", raf.getFilePointer());

		raf.writeDouble(48.65);
		raf.writeDouble(52.24);
		System.out.printf("현재 입출력 위치: %d 바이트 \n\n", raf.getFilePointer());

		System.out.println("Read...");
		raf.seek(0); // 맨 앞으로 이동
		System.out.printf("현재 입출력 위치: %d 바이트 \n", raf.getFilePointer());

		System.out.println(raf.readInt());
		System.out.println(raf.readInt());
		System.out.printf("현재 입출력 위치: %d 바이트 \n", raf.getFilePointer());

		System.out.println(raf.readDouble());
		System.out.println(raf.readDouble());
		System.out.printf("현재 입출력 위치: %d 바이트 \n", raf.getFilePointer());
		raf.close();
	}
}

<< 실행 결과 >>
Write...
현재 입출력 위치 : 0바이트 
현재 입출력 위치 : 8바이트 
현재 입출력 위치 : 24바이트 
Read...
현재 입출력 위치 : 0바이트 
200
500
현재 입출력 위치 : 8바이트 
48.65
52.24
현재 입출력 위치 : 24바이트

/*연습문제24-4 : 마지막 8byte double형 데이터 읽기*/	
	raf.seek(raf.length()-8);
	System.out.println("마지막 데이터 : "+raf.readDouble());
	
--------------------------------------------------------------------------

//File 클래스 <<디렉토리를 포함

-File클래스가 지원하는 기능(스트림은 안되는 기능)
 -디렉터리의 생성, 소멸
 -파일의 소멸
 -디렉터리 내에 존재하는 파일이름 출력

=>File 클래스는 데이터의 입출력 이외에, 파일 또는 디렉터리와 관련된 일의 처리를 위해 디자인 된 클래스.

-디렉토리 생성의 예 
	File myDir = new File("C:\\YourJava\\JavaDir");	//디렉터리 위치 정보
	myDir.mkdir();	//JavaDir생성(만약 YourJava 디렉터리가 없으면 예외발생)
	myDir.mkdirs();	//JavaDir생성 & 상위 디렉터리 없으면 생성
	
-파일 이동의 예
	File myFile = new File("C:\\MyJava\\my.bin");
	File reFile = new File("C:\\YourJava\\my.bin");
	myFile.renameTo(reFile);	//파일의 이동
	//renameTo는 파일의 이름을 변경하는 메소드인데, 경로의 변경에 사용이 가능하다.

==>File인스턴스는 실제 파일을 컨트롤하는게 아니라, 저장 된 문자열의 형태로 정보를 담은 것.
   그 정보를 가지고 사용
==>자바의 WORA(Write Once Run Anywhere)를 위해 File.separator는 컴파일 환영에 따라
   운영체제에 따른 구분자로 각각 치환됨.
	

/*	e:\test  디렉토리에 Dir 디렉토리와 file1.txt,file2.txt,file3.txt 파일을 생성하고 test에 파일 목록 출력	*/
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Main {
	public static void main(String[] args) throws Exception {
		File dir=new File("E:/Temp/Dir");
		File file1=new File("E:/Temp/file1.txt");
		File file2=new File("E:/Temp/file2.txt");
		File file3=new File(new URI("file:///E:/Temp/file3.txt"));
		
		//E:/Temp/Dir 이 없으면 상위 디렉토리까지 생성
		if(dir.exists()==false)
			dir.mkdirs();
		
		//file1~3이 없으면 생성
		if(!file1.exists())
			file1.createNewFile();
		if(!file2.exists())
			file2.createNewFile();
		if(!file3.exists())
			file3.createNewFile();
		
		//File1에 데이터 넣기
		OutputStream out=new FileOutputStream(file1.getAbsolutePath());
		for(int i=0;i<100;i++)
			out.write(i);
		out.close();		
		
		//Temp 디렉토리 파일 목록 출력
		File temp=new File("E:/Temp");
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd   a   HH:mm");
		File[] contents=temp.listFiles();//Temp 디렉토리의 파일 목록
		System.out.println("날짜\t\t시간\t형태\t\t크기\t이름");
		System.out.println("------------------------------------------------------");		
		for(File file:contents){
			System.out.print(sdf.format(new Date(file.lastModified())));	//마지막 수정 날짜
			if(file.isDirectory())//디렉토리이면
				System.out.print("\t<DIR>\t\t\t"+file.getName());
			else
				System.out.print("\t\t\t"+file.length()+"\t"+file.getName());	//파일 크기 + 이름
			System.out.println();			
		}	
	}
}

<< 실행 결과 >>
날짜					시간		형태		크기		이름
------------------------------------------------------
2016-11-13   오후   21:48		<DIR>			Dir
2016-11-13   오후   21:52				100		file1.txt
2016-11-13   오후   21:48				0		file2.txt
2016-11-13   오후   21:48				0		file3.txt

	
/*파일 이동 예제 */	
import java.io.File;

class FileMove {
	public static void main(String[] args) {
		File myFile = new File("C:\\MyJava\\my.bin");	//이동 대상이 되는 파일 정보를 File인스턴스에 담음.
		//File myFile=new File("C:"+File.separator+"MyJava"+File.separator+"my.bin");
		if (myFile.exists() == false) {	//파일이 존재하지 않으면 false반환, 존재하면 true반환
			System.out.println("원본 파일이 준비되어 있지 않습니다.");
			return;
		}

		File reDir = new File("C:\\YourJava");	//이동할 위치 정보(디렉터리 정보만) 인스턴스에 담음
		//File reDir = new File("C:" + File.separator + "YourJava");
		reDir.mkdir();	//디렉터리 생성
		File reFile = new File(reDir, "my.bin");		
		myFile.renameTo(reFile);
		if (reFile.exists() == true)
			System.out.println("파일 이동에 성공하였습니다.");
		else
			System.out.println("파일 이동에 실패하였습니다.");
	}
}

==>MyJava\\my.bin -->YourJava\\my.bin 으로 copy 아니라 move!
==>위의 separator static 멤버 필드를 쓰면 윈도우(\), 리눅스(/) 상관없이 쓸 수 있음.
==>BUT 윈도우에서만 C,D가 존재 => 상대 경로가 필요!

--------------------------------------------------------------------------

//상대경로 기반의 예제 작성

=>실제 프로그램 개발에서는 절대경로가 아닌 상대경로를 이용하는 것이 일반적이다. 
 그래야 실행환경 및 실행위치의 변경에 따른 문제점을 최소화할 수 있기 때문이다.

File subDir1=new File("AAA");						현재 디렉터리의 하위 디렉터리 AAA
File subDir2=new File("AAA\\BBB");					현재 디렉터리의 하위 디렉터리 AAA의 하위 디렉터리인 BBB
File subDir3=new File("AAA"+File.separator+"BBB");	AAA\\BBB의 운영체제 독립적인

/*운영체제에 상관없이 실행이 가능한 예제*/
import java.io.File;

class RelativePath {
	public static void main(String[] args) {
		File curDir = new File("AAA");	//상대경로를 기준으로 File 인스턴스 생성
		System.out.println(curDir.getAbsolutePath());	//절대 경로 정보 출력

		File upperDir = new File("AAA" + File.separator + "BBB");	//상대경로를 기준으로 인스턴스 생성
		System.out.println(upperDir.getAbsolutePath());
	}
}

<< 실행 결과 >>
C:\Users\명수\workspace\Test\AAA
C:\Users\명수\workspace\Test\AAA\BBB



/*File,Dir 리스트 출력 예제*/
import java.io.*;

public class Test {
	public static void main(String[] args) throws IOException{	

		File myDir=new File("MyDir");
		File[] list=myDir.listFiles();	//디렉터리에 존재하는 Dir,File 정보 반환(File 배열 형태로 반환)
		//String[] list=myDir.list();	//스트링으로 반환 BUT File로 반환해야 할 수 있는게 많음
		
		for(int i=0;i<list.length;i++){
			System.out.print(list[i].getName());	//문자열 형태로 file,dir 이름을 반환
			if(list[i].isDirectory())	//dir인지 확인하는 메소드 isFile() 도 존재		
				System.out.println("\t\t DIR");
			else
				System.out.println("\t\t FILE");
		}
	}
}

<< 실행 결과 >>
HI		 		DIR
hyper.txt		 FILE
input.txt		 FILE
Object.ser		 FILE
Personal.ser		 FILE
printf.txt		 FILE
String.txt		 FILE
test.txt		 FILE

/*연습문제 24-5 현재 디렉터리와 상위 디렉터리의 정보 추출*/
현재 디렉터리 이름과 상위 디렉터리 이름 출력
& 두 디렉터리의 파일,DIR 이름 +파일 or 디렉터리인지 출력

import java.io.*;
public class CurrentUpperDir {
	public static void main(String[] args) throws IOException{			
		String workingDir=System.getProperty("user.dir");
		//System.out.println(workingDir);
		
		File curDir=new File(workingDir);
		System.out.println("절대 경로 : "+curDir.getAbsolutePath());
		System.out.println("현재 디렉터리 : "+curDir.getName());
		System.out.println("상위 디렉터리 : ");
		System.out.println("");
		
		/*현재 디렉터리 정보 출력*/
		System.out.println("현재 디렉터리 "+curDir.getName()+" 정보....");		
		showDirList(curDir.listFiles());
		
		/*상위 디렉터리 정보 출력*/
		File upperDir=new File(curDir.getParent());
		//File upperDir=curDir.getParentFile();
		System.out.println("상위 디렉터리 "+upperDir.getName()+" 정보....");
		showDirList(upperDir.listFiles());						
	}
	
	public static void showDirList(File[] list){
		for(int i=0;i<list.length;i++){
			if(list[i].isDirectory())
				System.out.println("DIR  : "+list[i].getName());
			else
				System.out.println("FILE : "+list[i].getName());
		}
		System.out.println("");
	}	
}

--------------------------------------------------------------------------

//File 클래스 기반의 IO 스트림 형성

파일인스턴스 생성 & 스트림 생성하면 다양한 기능을 활용할 수 있음.

public FileInputStream(File file) throws FileNotFoundException	//FileInputStream의 생성자
public FileOutputStream(File file) throws FileNotFoundException	//FileOutputStream의 생성자
public FileReader(File file) throws FileNotFoundException		//FileReader의 생성자
public FileWriter(File file) throws FileNotFoundException		//FileWriter의 생성자

File inFile=new File("data.bin");
if(inFile.exists()==false) {
	//데이터를 읽어 들일 대상 파일이 존재하지 않음에 대한 적절한 처리
}
InputStream in=new FileInputStream(inFile);

=>File인스턴스를 생성한 다음에, 이를 이용해서 스트림을 형성하면 보다 다양한 메소드의 호출이 가능하다.


