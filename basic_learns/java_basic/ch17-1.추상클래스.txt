--------ch17.abstract,interface,inner class------------------------------
--------------------------------------------------------------------------

//17-1 abstract 클래스

(intro)

-추상화(abstract)
: 덜 완성된 느낌	//	완전하지 않은	//	실체 간에 공통되는 특성을 추출 
e.g) 새,곤충,물고기 =>동물(추상) // LG,현대,삼성 =>회사(추상)
=>클래스 = 추상 클래스 + 실체 클래스

-추상 클래스의 용도
1)실체 클래스들의 공통된 필드와 메소드의 이름을 통일할 목적
e.g) 소유자의 이름을 저장하는 필드를 Telephone 클래스는 owner, SmartPhone 클래스는 user 라고 제각각 정의할 수 있음
=>추상클래스(Phone)를 실체클래스 (Telephone과 SmartPhone)가 상속해서 통일할 수 있다.

2)실체 클래스를 작성할 때 시간을 절약
		추상 클래스(설계 규격)
	↓──────────↓───────────↓
 Coder1		Coder2		Coder3

e.g) 
	타이어 구격(추상클래스)   <<자동차 타이어의 설계 규격을 반영
한국타이어		금호타이어		<<실제 타이어 클래스
 

3)안정성
=>클래스 중 인스터스화에 목적이 없다! 달리말해서 인스턴스화 된다면 실수
=>그런데 이러한 실수는 Compile & 실행과정에서도 오류나서 멈추지 않을 확률이 높음
=>"결과"를 통해서 디버깅해야됨
=>어려운 단계임// 컴파일 타임에 에러메세지 띄우며 명시해주는게 가장 쉬운 디버깅
=>안정성 측면에서 높은 점수를 줄 수가 없음
=>Want : 안정성을 위해 인스턴스를 생성하고 싶지 않다

-------------------------------------------------
class Friend{
	...
	public void showBasicInfo() { }
}


==> 추상화

abstract class Friend{
	....
	public abstract void showBasizInfo();
}


==>
인스턴스를 생성하는 것 이외에 모든 부분에서 일반 클래스와 동일.
(abstract 클래스 역시 참조변수의 선언가능 & 오버라이딩 원리가 그대로 적용)

cf)abstract 메소드가 없어도 인스턴스 생성을 원하지 않으면 abstract 클래스 선언가능
   BUT abstract 메소드가 한개라도 있으면, 그 클래스는 반드시 abstract로 선언.

------------------------------------------------
//abstract 클래스를 상속하는 하위 클래스에서 반드시 해야 할 일은?


abstract class AAA{
	void mathodOne() {..}
	abstract void methodTwo();
}


class BBB extends AAA{
	void methodThree() {...}
}

==>BBB클래스는 AAA클래스의 abstract 메소드를 상속함
==>그런데 오버라이딩 하지 않았으므로 abstract 상태 그대로 놓이게 된다.
==>즉, BBB클래스는 하나이상의 abstract 메소드를 포함한 셈이니 abstract선언해야 되며 인스턴스 생성도 불가능
==>인스턴스 생성하고 싶으면 적절히 오버라이딩
==>추상클래스 AAA를 상속하는 BBB의 방법
1)BBB클래스도 추상클래스로 정의
abstract class BBB extends AAA		

2)추상클래스AAA의 추상메소드를 오버라이딩
void methodTwo(){...}


































