-------------------ch19-8.Arrays클래스-----------------------
;배열의 조작(배열의 복사,항목 정렬, 항목 검색 등과 같은 기능)


//1.배열 복사 ( copyOf(원본배열,복사할 길이) , copyOfRange(원본배열,시작인덱스,끝인덱스) )

import java.util.Arrays;

public class Main {
	public static void main(String[] args){
		char[] arr1={'J','A','V','A'};
		
		//방법1
		char[] arr2=Arrays.copyOf(arr1,arr1.length);
		System.out.println(arr2);
		if(arr1==arr2)
			System.out.println("같은 배열 참조");
		else 
			System.out.println("다른 배열 참조");
		
		//방법2
		char[] arr3=Arrays.copyOfRange(arr1, 1, 3);
		System.out.println(arr3);
		if(arr1==arr3)
			System.out.println("같은 배열 참조");
		else 
			System.out.println("다른 배열 참조");
		
		//방법3
		char[] arr4=new char[arr1.length];
		System.arraycopy(arr1, 0, arr4, 0, arr1.length);	
						//원본배열,시작인덱스, 복사배열, 시작인덱스, 복사길이
		for(int i=0;i<arr4.length;i++)
			System.out.println("arr4["+i+"]="+arr4[i]);
		if(arr1==arr4)
			System.out.println("같은 배열 참조");
		else 
			System.out.println("다른 배열 참조");	
			
		//방법3(System.arraycopy 복사형태)
		char[] arr5=new char[arr1.length];
		Arrays.fill(arr5,'-');
		System.arraycopy(arr1, 2, arr5, 0, 2);	
						//원본배열,시작인덱스, 복사배열, 시작인덱스, 복사길이
		for(int i=0;i<arr5.length;i++)
			System.out.println("arr5["+i+"]="+arr5[i]);		
	}
}


<< 실행 결과 >>
JAVA
다른 배열 참조
AV
다른 배열 참조
arr4[0]=J
arr4[1]=A
arr4[2]=V
arr4[3]=A
다른 배열 참조
arr5[0]=V
arr5[1]=A
arr5[2]=-
arr5[3]=-


//2.배열 항목 비교
equals() 1차 항목의 값만 비교
deepEquals() 중첩된 배열의 항목까지 비교



import java.util.Arrays;

public class Main {
	public static void main(String[] args){
		int [][] original={{1,2},{3,4}};
		
		//얕은 복사 후 비교
		System.out.println("[얕은 복제 후 비교]");
		int[][] cloned1=Arrays.copyOf(original,original.length);
		System.out.println("배열 번지 비교 : "+original.equals(cloned1));
		System.out.println("1차 배열 항목값 비교 : "+Arrays.equals(original, cloned1));
		System.out.println("중첩 배열 항목값 비교 : "+Arrays.deepEquals(original, cloned1));
	

		
		//깊은 복사 후 비교
		System.out.println("[깊은 복제 후 비교]");
		int[][] cloned2=Arrays.copyOf(original,original.length);
		cloned2[0]=Arrays.copyOf(original[0],original[0].length);
		cloned2[1]=Arrays.copyOf(original[1],original[1].length);
		System.out.println("배열 번지 비교 : "+original.equals(cloned2));
		System.out.println("1차 배열 항목값 비교 : "+Arrays.equals(original, cloned2));
		System.out.println("중첩 배열 항목값 비교 : "+Arrays.deepEquals(original, cloned2));		
	}
}



<< 실행 결고 >>
[얕은 복제 후 비교]
배열 번지 비교 : false
1차 배열 항목값 비교 : true
중첩 배열 항목값 비교 : true
[깊은 복제 후 비교]
배열 번지 비교 : false
1차 배열 항목값 비교 : false
중첩 배열 항목값 비교 : true


//3.배열 항목 정렬
=>사용자 정의 클래스타입이면, Comparable 인터페이스를 구현하고 @Override public int compareTo(..)


e.g)
import java.util.Arrays;

class Member implements Comparable<Member>{
	String name;
	public Member(String name){
		this.name=name;
	}
	@Override
	public int compareTo(Member comp){	//앞서면 음수 , 같으면 0 , 뒤서면 양수 반환하게끔
		return name.compareTo(comp.name);
	}
	public void showInfo(){
		System.out.println("name : "+name);
	}	
}

public class Main {
	public static void main(String[] args){
		//int형 오름차순 정렬
		int[] scores={99,97,98};		
		Arrays.sort(scores);	//원본 변경
		for(int i=0;i<scores.length;i++){
			System.out.println("scores["+i+"]="+scores[i]);
		}
		System.out.println();
		
		//String 오름차순 정렬
		String[] name={"홍길동","박동수","김민수"};
		Arrays.sort(name);
		for(int i=0;i<scores.length;i++){
			System.out.println("name["+i+"]="+name[i]);
		}
		System.out.println();
		
		//사용자 정의 클래스 : Member 정렬
		Member m1=new Member("aa");
		Member m2=new Member("bb");
		Member m3=new Member("ab");
		Member[] arr={m1,m2,m3};
		
		System.out.println("정렬 전");
		for(int i=0;i<arr.length;i++){
			System.out.print((i+1)+"번째)");
			arr[i].showInfo();
		}
		
		Arrays.sort(arr);
		System.out.println("정렬 후 ");
		for(int i=0;i<arr.length;i++){
			System.out.print((i+1)+"번째)");
			arr[i].showInfo();
		}				
	}
}



<< 실행 순서 >>
scores[0]=97
scores[1]=98
scores[2]=99

name[0]=김민수
name[1]=박동수
name[2]=홍길동

정렬 전
1번째)name : aa
2번째)name : bb
3번째)name : ab
정렬 후 
1번째)name : aa
2번째)name : ab
3번째)name : bb




-------------------------------------------------------------------------------------

//4.배열 항목 검색
;특정 값의 인덱스를 찾는 것이 항목 검색
=>Arrays.sort() & Arrays.binarySearch() 메소드 이용



package chap11;

import java.util.Arrays;

class Member implements Comparable<Member>{
	String name;
	public Member(String name){
		this.name=name;
	}
	@Override
	public int compareTo(Member comp){	//앞서면 음수 , 같으면 0 , 뒤서면 양수 반환하게끔
		return name.compareTo(comp.name);
	}
	public void showInfo(){
		System.out.println("name : "+name);
	}	
}

public class Main {
	public static void main(String[] args){
		//int형 오름차순 정렬
		int[] scores={99,97,98};		
		Arrays.sort(scores);	//원본 변경
		int index=Arrays.binarySearch(scores, 99);
		if(index<0)
			System.out.println("데이터 존재하지 않음");
		else			
			System.out.println("찾은 인덱스 : "+index);
		
		//String 오름차순 정렬
		String[] name={"홍길동","박동수","김민수"};
		Arrays.sort(name);
		index=Arrays.binarySearch(name, "홍길동");
		if(index<0)
			System.out.println("데이터 존재하지 않음");
		else			
			System.out.println("찾은 인덱스 : "+index);
				
		//사용자 정의 클래스 : Member 정렬
		Member m1=new Member("aa");
		Member m2=new Member("bb");
		Member m3=new Member("ab");
		Member[] arr={m1,m2,m3};
		index=Arrays.binarySearch(arr, m1);
		if(index<0)
			System.out.println("데이터 존재하지 않음");
		else			
			System.out.println("찾은 인덱스 : "+index);				
	}
}


<< 실행 결과 >>
찾은 인덱스 : 2
찾은 인덱스 : 2
찾은 인덱스 : 0


















-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------





