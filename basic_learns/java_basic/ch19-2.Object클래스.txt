-------------------ch19-2.Object 클래스-----------------------
//19-2 Object 클래스
1)equals 2)clone <<알아야 할 메소드

//인스턴스 소멸 시 호출되는 finalize 메소드 (+Garbage Collection의 동작 설명위해, 실제로 잘 활용은 안됨)

protected void finalize() throws Throwable
; 인스턴스가 완전히 소멸되기 직전 호출되는 메소드, Object 클래스의 멤버이므로 모든 인스턴스에는 이 메소드가 존재한다.


class MyName{
 String objName;
 public MyName(String name) {
  objName=name;
 }
 
 protected void finalize() throws Throwable {
  super.finalize();
  System.out.println(objName+"이 소멸되었습니다.");
 }
}


public class ObjectFinalize {
 public static void main(String[] args){
  MyName obj1=new MyName("인스턴스1");
  MyName obj2=new MyName("인스턴스2");
  obj1=null;
  obj2=null;
  
  System.out.println("프로그램을 종료합니다.");
  // System.gc();
  // System.runFinalization();  
 }
}

=>프로그램을 종료하면서 G.C이 동작안하고 통째로 지워질 수 있음. 그래서 finalize()가 실행안될 수도 있다.
=>System.gc(); //G.C가 동작한다.
(Garbage Collection이 동작하면서 소멸 할 인스턴스를 체크는 함. BUT JVM의 상황에 따라 바로 소멸되지 않을 수도 있다.
 =>finalize() 의 호출을 보장할 수 없다.)
=>System.runFinalization();

==>G.C은 일정한 알고리즘 or 여유가 있을 때 등 프로그램이 효율적으로 작동할 수 있도록 설계되어있음
==>G.C이 실행이 되면 소멸 할 인스턴스를 체크는 하지만 바로 소멸할지 안할지는 설계된 G.C에 따라
==>간혹가다가 G.C의 동작을 아는 것이 유용할 수가 있음

public class Counter {
	private int no;
	
	public Counter(int no){
		this.no=no;
	}
	
	@Override
	protected void finalize() throws Throwable{
		System.out.println(no+"번 객체의 finalize()가 실행됨.");
	}
}

public class Main {
	public static void main(String[] args){
		Counter counter=null;
		for(int i=1;i<=20;i++){
			counter=new Counter(i);
			counter=null;			
			System.gc();
		}
	}
}

<< 실행 결과 >>
2번 객체의 finalize()가 실행됨.
13번 객체의 finalize()가 실행됨.
12번 객체의 finalize()가 실행됨.
15번 객체의 finalize()가 실행됨.
18번 객체의 finalize()가 실행됨.
19번 객체의 finalize()가 실행됨.
20번 객체의 finalize()가 실행됨.
14번 객체의 finalize()가 실행됨.
17번 객체의 finalize()가 실행됨.
16번 객체의 finalize()가 실행됨.
7번 객체의 finalize()가 실행됨.
11번 객체의 finalize()가 실행됨.
10번 객체의 finalize()가 실행됨.
9번 객체의 finalize()가 실행됨.
8번 객체의 finalize()가 실행됨.
1번 객체의 finalize()가 실행됨.
5번 객체의 finalize()가 실행됨.
6번 객체의 finalize()가 실행됨.

==>순서도 일정하지 않고, 전부 다 삭제되지 않음.

----------------------------------------------------

//Garbage Collection에 대한 추가 설명

-GC는 한 번도 발생하지 않을 수 있다.

-GC가 발생하면, 소멸의 대상이 되는 인스턴스는 결정되지만 이것이 실제 소멸로 바로 이어지지는 않는다.

-인스턴스의 실제 소멸로 이어지지 않은 상태에서 프로그램이 종료될 수도 있다. 종료가 되면 어차피 인스턴스(할당된 것들)는 소멸 되니까

-따라서 반드시 finalize 메소드가 반드시 호출되기 원한다면 아래에서 보이는 코드가 추가로 삽입되어야 한다.
System.gc();   		  		//Garbage Collection을 명령함!
System.runFinalization(); 	//GC에 의해서 소멸이 결정된 인스턴스를 즉시 소멸

----------------------------------------------------

//finalize 메소드의 오버라이딩의 예

 protected void finalize() throws Throwable {
  super.finalize();
  System.out.println(objName+"이 소멸되었습니다.");
 }

super.finalize();
=>finalize 메소드를 오버라이딩 하면, Object클래스의 finalize 메소드는 안에 비어있든, 채워져 있든 상관없이 
  안정성을 위해서는 super키워드를 통해 호출하는게 좋음(안에 중요한 코드가 있을 수 있으니까)
=>super.finalize();를 씀으로써 기존 메소드의 기능 + 내가 원하는 추가적인 기능을 제공할 수 있다.
=>super.finalize();를 보면 
  1)중요한 것이 있어서 썼구나 or 2)거기에 대한 정보가 부족해도 쓸 수 있음

-Object 클래스에 정의되어 있는 finalize 메소드에 중요한 코드가 삽입되어 있는지 확인한바 없다!
 =>확인하라는게 아니라 공학적인 측면(쉽게 가져다 쓰고 쉽게 문제를 일으키지 않고 활용)에서도
   객체지향은 모든 것을 보는게 아님.내가 보기 원하는 특정 부분만 보고 확장할 수 있어야됨
 
-만약에 중요한 코드가 삽입되어 있다면? 단순한 오버라이딩으로 인해서 중요한 코드의 실행을 방해할 수 있다.

-따라서 대상 메소드에 대한 정보가 부족한 경우에는 오버라이딩 된 메소드도 호출이 되도록 오버라이딩 하자.
 이것이 오버라이딩의 기본 원칙이다.

----------------------------------------------------

//인스턴스 비교

1)두 인스턴스의 내용 비교	2)두 인스턴스의 참조 값 비교(ref1==ref2)

=>== 연산자는 참조 값 비교를 한다. 따라서 인스턴스간 내용비교를 위해서는 내용비교 기능의 메소드가 필요하다.

class IntNumber{
	int num;	//isEquals 메소드에서 직접 멤버 필드를 비교하기 위해 default
	
	public IntNumber(int num)	{
		this.num=num;
	}
	
	public boolean isEquals(IntNumber numObj){	//인스턴스 내용비교를 하도록 메소드 정의
		if(this.num==numObj.num)
			return true;
		else
			return false;
	}
}

public class ObjectEquality {
	public static void main(String[] args){
		IntNumber num1=new IntNumber(10);
		IntNumber num2=new IntNumber(12);
		IntNumber num3=new IntNumber(10);
		
		//비교 진행 ↓
		if(num1.isEquals(num2))
			System.out.println("num1과 num2는 동일한 정수");
		else
			System.out.println("num1과 num2는 다른 정수");
		
		if(num1.isEquals(num3))
			System.out.println("num1과 num3는 동일한 정수");
		else
			System.out.println("num1과 num3는 다른 정수");
		
	}
}

----------------------------------------------------

//equals 메소드

Object의 equals()메소드
public boolean equals(Object obj)

JAVA에서는 인스턴스간의 내용 비교를 목적으로 Object 클래스에 equals 메소드를 정의해 놓았다.
따라서 새로 정의되는 클래스의 내용 비교가 가능하도록 이 메소드를 오버라이딩 하는 것이 좋다.

Object클래스의 equals 메소드를 인스턴스의 내용비교 메소드로 지정해 놓았기 때문에, 처음 접하는
클래스의 인스턴스라 하더라도 equals 메소드의 호출을 통해서 인스턴스간 내용 비교를 할 수 있다.

class InitNumber{
	int num;
		
	public InitNumber(int num) {
		this.num=num;
	}

	public boolean equals (Object numObj) {		//Object클래스의 equals메소드 오버라이딩
		if(numObj instanceof InitNumber){		//강제 타입 변환에 대한 적절한 예외처리
			if(this.num==((InitNumber) numObj).num)
				return true;
			else
				return false;
		}
		return false;
	}	
}


public class StringEquals {
	public static void main(String[] args) {
		String str1 = new String("Hi my string");
		String str2 = new String("Hi my string");
		//다른 인스턴스를 생성해서 str1과 str2가 각각 참조하고 있음.
		//new String빼면 같은 참조 대상을 가리킴

		if (str1 == str2) {	//참조변수 비교(참조 대상이 동일한지)
			System.out.println("참조 대상이 동일하다.");
		} else {
			System.out.println("참조 대상이 동일하지 않다.");
		}

		if (str1.equals(str2)) {
			System.out.println("인스턴스 내용이 동일하다.");
		} else {
			System.out.println("인스턴스 내용이 동이랗지 않다.");
		}
		//String 클래스의 equals 메소드는 내용비교를 하도록 오버라이딩 되어있다. 따라서 이 문장에서는 인스턴스의 내용비교가 진행된다.
	}
}

=>String str1="Hi my string"; 		    vs	// String str1=new String("Hi my string"); 과 차이
 ("Hi my string"이라는 문자열 같이 참조)	   (새로운 String 인스턴스 생성 & 문자열 저장) 

=>equals 메소드를 통해 인스턴스의 내용 비교

=>인스턴스의 내용비교가 필요한 상황에서 별도로 내용비교를 하지말고 equals 메소드를 오버라이딩 하기.
  (인스턴스의 내용비교가 필요한 상황에서 equals 메소드가 적절히 오버라이딩 되어 있을 것을 기대)
  
  

----------------------------------------------------

//객체 해시코드(HashCode())

Object의 해쉬코드
public int hashCode()

;객체 해시코드란 객체를 식별할 하나의 정수값
=>객체의 동등 비교를 구하는 과정

1)hashCode() 리턴값 ----->같음 ----->equals() 리턴값 ----->true --->동등 객체
				 │					    │false
				 │						↓
				 └----->다름-----> 	다른 객체						
													



----------------------------------------------------

//인스턴스의 복사(복제):clone 메소드

-Object 클래스에는 인스턴스의 복사를 목적으로 clone이라는 이름의 메소드가 정의되어 있다.
 ( protected Object clone() throws CloneNotSupportedException {..} )

-단, 이 메소드는 Cloneable 인터페이스를 구현하는 클래스의 인스턴스에서만 호출될 수 있다.
 =>인터페이스의 사용 목적 : 다른 클래스와의 구별을 위한 특별한 표시의 목적으로 사용되었다. maker!

-Cloneable 인터페이스의 구현은 다음의 의미를 지닌다.
 "이 클래스의 인스턴스는 복사를 해도 됩니다."

-사실 인스턴스의 복사는 매우 민감한 작업이다. 따라서 클래스를 정의할 때 복사의 허용여부를 결정하도록
 Cloneable 인터페이스를 통해서 요구하고 있다.
 =>프로그래머가 클래스를 설계할 때, 복사를 허용하느냐 마느냐 마커의 역할
   (implements를 안쓰면 CloneNotSupportedException가 발생)

class Point implements Cloneable{	//내가 정의한 클래스는 복사해도 별 무리 없다 할때 interface를 구현.
					//위의 인터페이스는 maker 기능(내부적으로 들어있는 거 없음)
	private int xPos;
	private int yPos;
	
	public Point(int x, int y){
		xPos=x;
		yPos=y;
	}
	public void showPosition(){
		System.out.printf("[%d, %d]", xPos, yPos);
		System.out.println("");
	}
	public Object clone() throws CloneNotSupportedException{
		//clone메소드는 protected로 선언되어 있다. 따라서 외부 호출이 가능하도록 public 으로 오버라이딩
		return super.clone();	
	}
}

public class InstanceCloning {
	public static void main(String[] args) {
		Point pos1 = new Point(1, 2);
		Point cpy;
		try {
			cpy = (Point)pos1.clone();
			pos1.showPosition();
			cpy.showPosition();

		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
	}
}

----------------------------------------------------

//얕은(Shallow)복사의 예

class Point implements Cloneable{
	private int xPos;
	private int yPos;
	
	public Point(int x, int y)	{
		xPos=x;
		yPos=y;
	}
	public void showPosition()	{
		System.out.printf("[%d, %d]", xPos, yPos);
	}
	public void changePos(int x, int y)	{
		xPos=x;
		yPos=y;
	}
	public Object clone() throws CloneNotSupportedException{
		return super.clone();
	}
}

class Rectangle implements Cloneable{
	Point upperLeft, lowerRight;
	
	public Rectangle(int x1, int y1, int x2, int y2)	{
		upperLeft=new Point(x1, y1);
		lowerRight=new Point(x2, y2);
	}
	
	public void showPosition(){
		System.out.println("직사각형 위치정보...");
		System.out.print("좌 상단: ");
		upperLeft.showPosition();
		System.out.println("");	
		System.out.print("우 하단: ");
		lowerRight.showPosition();	
		System.out.println("\n");
	}
	
	public void changePos(int x1, int y1, int x2, int y2){
		upperLeft.changePos(x1, y1);
		lowerRight.changePos(x2, y2);
	}
	
	public Object clone() throws CloneNotSupportedException{
		return super.clone();
	}
}

class ShallowCopy{	
	public static void main(String[] args){
		Rectangle org=new Rectangle(1, 1, 9, 9);
		Rectangle cpy;
		
		try{
			cpy=(Rectangle)org.clone();
			org.changePos(2, 2, 7, 7);
			org.showPosition();
			cpy.showPosition();
		}
		catch(CloneNotSupportedException e){
			e.printStackTrace();
		}
	}
}

==>
복사해서 새로 생성한(cpy가 참조하는) Rectangle 인스턴스는 같은 Point 인스턴스를 가지게 됨.
=>Object 클래스의 clone 메소드는 인스턴스를 통째로 복사는 하지만, 인스턴스가 참조하고 있는 
  또 다른 인스턴스까지 복사하지 않는다. 단순히 참조 값만 복사할 뿐이다.

----------------------------------------------------

//깊은(Deep) 복사의 예

class Rectangle implements Cloneable{
	Point upperLeft, lowerRight;
	
	public Rectangle(int x1, int y1, int x2, int y2)	{
		upperLeft=new Point(x1, y1);
		lowerRight=new Point(x2, y2);
	}
	public void showPosition(){
		System.out.println("직사각형 위치정보...");
		System.out.print("좌 상단: ");
		upperLeft.showPosition();
		System.out.println("");	
		System.out.print("우 하단: ");
		lowerRight.showPosition();	
		System.out.println("\n");
	}
	
	public void changePos(int x1, int y1, int x2, int y2){
		upperLeft.changePos(x1, y1);
		lowerRight.changePos(x2, y2);
	}
	
	public Object clone() throws CloneNotSupportedException{
		Rectangle copy=(Rectangle)super.clone();	//기존의 얕은 복사
		copy.upperLeft=(Point)upperLeft.clone();
		copy.lowerRight=(Point)lowerRight.clone();		
		return copy;
	}
}

=>깊은 복사를 위한 특별한 문법이 없음. 깊은 복사가 이루어 지도록 직접 코드를 구성하면 됨.

----------------------------------------------------

//String 인스턴스와 배열 인스턴스 대상의 복사

(Intro)

class Person
{
	private String name;
	private int age;
	
	public Person(String name,int age) {
		this.name=name;
		this.age=age;
	}
}
	
를 깊은 복사를 위해 다시 정의하면?

class Person implements Cloneable	//복사 가능하도록 마커(인터페이스)구현
{
	private String name;
	private int age;
	
	public Person(String name,int age) {
		this.name=name;
		this.age=age;
	}
	
	public Object clone() throws CloneNotSupportedException {
		Person copy=(Person)super.clone();
		copy.name=new String(this.name);	//깊은 복사를 위한 String인스턴스 			
		return copy;		
	}	
}

==>하지만 실제로 자바 프로그래머는 Person 클래스의 clone메소드를 깊은 복사가 이뤄지도록 오버라이딩 해달라하면
 	public Object clone() throws CloneNotSupportedException {
		Person copy=(Person)super.clone();
		return copy;		
	}
==>위와 같이 메소드 오버라이딩이 이루어짐!
=>이유 : "String 인스턴스는 깊은 복사의 대상에 둘 필요가 없습니다."

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

class Person implements Cloneable
{
	private String name;
	private int age;
	
	public Person(String name,int age) {
		this.name=name;
		this.age=age;
	}
	
	public void changeName(String name) {
		this.name=name;
	}
	
	public void showPersonInfo() {
		System.out.println("이름 : "+name);
		System.out.println("나이 : "+age);
		System.out.println("");
	}
	
	public Object clone() throws CloneNotSupportedException {
		Person copy=(Person)super.clone();		
		return copy;		
	}	
}

public class StringClone {
	public static void main(String[] args) {
		try {
			Person p1=new Person("이승원",22);
			
			Person p2=(Person)p1.clone();	
			//Person인스턴스에 name은 같은 String 인스턴스 참조 , age는 각각 새로 할당 & 22값 저장
			//얕은 복사(String 인스턴스 같이 참조하므로)가 이루어짐. BUT String 인스턴스는 참조만 할 뿐 변경X 
			//==>문제가 되지 않는다.
			p2.changeName("정혜영");
			
			Person p3=(Person)p2.clone();
			p3.changeName("정승주");
			
			p1.showPersonInfo();
			p2.showPersonInfo();
			p3.showPersonInfo();
		} catch(CloneNotSupportedException e) {
			e.printStackTrace();
		}		
	}
}


-String 인스턴스에 저장되어 있는 문자열 정보는 변경되지 않는다. 따라서 굳이 String 인스턴스를 깊은 복사의 목록에
 포함시킬 필요는 없다.
=>String은 변경이 불가능 하므로 참조만 가능하다.
즉, String str1="ABC"; String str2="ABC" 같은 인스턴스 참조. 변경이 불가능하므로 문제가 안됨과 같음

-cf)배열 대상의 clone 메소드의 호출 결과는 배열의 복사이다! 즉, 배열과 배열에 저장된 인스턴스의 참조 값은 복사가 되지만,
 배열의 참조 값이 참조하는 인스턴스까지 복사가 진행되지는 않는다.


----------------------------------------------------

//객체 문자 정보( toString() )
;Object 클래스의 toString() 메소드는 객체의 문자 정보(객체를 문자열로 표현한 값)를 리턴한다.
=>기본적으로 Object 클래스의 toString() 메소드는 "클래스명@16진수해시코드"로 구성된 문자정보를 리턴한다.
=>별 의미가 없으므로 적절히 오버라이딩해서 문자열로 저장하기. String은 저장하는 문자열, Date는 날짜를 반환하도록 오버라이딩 되어있음.

class A{
	int num;
	A(int num){
		this.num=num;
	}	
	@Override
	public int hashCode(){
		return num;
	}
}

public class ToStringTest {
	public static void main(String[] args){		
		A inst=new A(16);
		Object obj1=new Object();
		Date obj2=new Date();
		
		System.out.println(obj1);
		System.out.println(obj2);
		System.out.println(inst);		
	}	
}

<< 실행 결과 >>

java.lang.Object@15db9742
Thu Oct 27 22:48:07 KST 2016
A@10






























