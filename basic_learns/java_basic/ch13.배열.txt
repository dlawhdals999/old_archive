-------------------ch.13 배열-----------------------

(Intro)
자바의 배열은 내부적으로 복잡함!
(그건 사용자의 편의를 위해서)

==>
1)선언 방법 2)접근 방법
--------------------------------------------------------------------

//13-1 배열이라는 존재가 필요한 이유

배열을 이용하면 아무리 많은 수의 변수라 할지라도 하나의 문장으로 선언 하는 것이
가능하다.

--------------------------------------------------------------------

//13-2 1차원 배열의 이해와 활용

//배열 인스턴스의 생성방법

int[] ref;	//배열의 참조변수 선언
ref=new int[5]	//인트형 변수 5개 



//배열의 접근 방법


public class ArrayAndMethods {
	public static int[] addAllArray(int[] ar,int addVal)
	{
		for(int i=0;i<ar.length;i++){
			ar[i]+=addVal;
		}
		return ar;
		
	}
	
	public static void main(String[] args)
	{
		int[] arr={1,2,3,4,5};
		int[] ref;
		ref=addAllArray(arr,7);	//int[]ar=arr ==>arr의 참조값을 매개변수로 전달 & ar과 같은 배열 참조 
		//int[]ref=ar; ==>ar의 참조값을 ref로 반환 & ar은 소멸
		
		if(arr==ref)
			System.out.println("동일 배열 참조");
		else			
			System.out.println("다른 배열 참조");
		
		for(int i=0;i<ref.length;i++)
			System.out.print(arr[i]+" ");
		
		
	}

}

--------------------------------------------------------------------

//13-3 다차원 배열의 이해와 활용

public class TwoDimenArrayInstance {
	public static void main(String[] args)
	{
		int[][] arr=new int[3][4];
		
		for(int i=0;i<arr.length;i++){
			for(int j=0;j<arr[i].length;j++){
				arr[i][j]=i+j;
			}
		}
		
		for(int i=0;i<arr.length;i++){
			for(int j=0;j<arr[i].length;j++){
				System.out.print(arr[i][j]+" ");
			}
			System.out.println("");
		}		
		
	}

}

==>arr은 arr[0]을 가리키고 arr[0]은 int형 데이터 4개 담는 배열 가리킴


//Ragged Array(가로 길이가 일정치 않은 배열

public class PartiallyFilledArray {
	public static void main(String[] args)
	{
		int[][] arr={
				{1,2},
				{3,4,5},
				{6,7,8,9}
		};
		
		System.out.println("배열의 세로 길이 : "+arr.length);
		//3출력
		
		for(int i=0;i<arr.length;i++){
			System.out.printf("%d행의 길이 : %d\n",i+1,arr[i].length);
		}
		//2 3 4 출력	
		
	}
}


//행과 열의 분리선언

public class PartiallyFilledArray {
	public static void main(String[] args)
	{
		int[][] arr=new int[3][];
		//arr은 int형 변수를 참조하는 참조변수 3개 할당
		
		arr[0]=new int[2];	//초기값 줄땐 new int[]{1,2};
		arr[1]=new int[3];
		arr[2]=new int[4];
	}
}




--------------------------------------------------------------------

//13-4 for-each
=>배열의 일부가 아닌, 배열의 전체를 참조할 필요가 있는 경우에 유용하게 사용할 수 있다.

		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
		//==
		for(int e : arr)
		{
			System.out.print(e+" ");
		}
		//해석1)
		//1.arr을 대상으로 반복해라
		//2.배열 arr의 모든 요소 각각을 e라 할때
		//e를 대상으로 {}를 각각 반복해라. 즉 위에서는 출력해라	
		//해석2)
		//arr의 0~n-1 요소들을 하나씩 변수e에 복사 & {} 작업
==> for-each 문을 통한 값의 변경은 실제 배열에 반영되지 않으니, 값의 참조를 목적으로만 사용해야 한다.
e.g)

public class ForTest {
	public static void main(String[] args)
	{
		int[] arr=new int[]{1,2,3,4,5};
		
		System.out.println("-- for each문을 통한 증가 & 출력 --");
		for(int e : arr)
		{
			e+=10;
			System.out.print(e+" ");
		}
		//==>11,12,13,14,15 출력
		System.out.println("\n");
		
		System.out.println("-- arr 출력 --");
		for(int i=0;i<arr.length;i++){
			System.out.print(arr[i]+" ");
		}
		//==>1,2,3,4,5 출력
		
	}
}

--------------------------------------------------------------------

//인스턴스 배열에 대한 for-each 문
인스턴스 배열에 저장된 참조 값의 변경은 불가능하지만, 참조값을 통한
인스턴스의 접근은 (접근 과정에서의 데이터 변경은) 가능하다!

class Number
{
	public int num;
	public Number(int num)
	{
		this.num=num;
	}
	public int getNum()
	{
		return num;
	}
}

public class ForTest {
	public static void main(String[] args)
	{
		Number[] arr=new Number[]{
				new Number(2),
				new Number(4),
				new Number(8)
		};
		
		for(Number e : arr){	//e와 arr[i]들이 같은 참조값을 가진다.
			e.num++;
		}
		
		for(Number e : arr){
			System.out.print(e.getNum()+" ");
		}
		System.out.println("\n");
		
		for(Number e : arr)	//e와 arr[i]들이 각각 같은 참조값을 가진다
		{
			e=new Number(5);	//e가 새로운 인스턴스를 참조하게 된다.
			e.num+=2;
			System.out.print(e.getNum()+" ");
		}
		
		System.out.println("\n");
		for(Number e : arr){
			System.out.print(e.getNum()+" ");
		}		
	}
}



--------------------------------------------------------------------

//13-5 main 메소드로의 데이터 전달

C:\JavaStudy>java MainParam AAA BBB CCC
//공백을 기준으로 제공되는 문자열들을 각각 String인스턴스를 만듬 & 그것을 참조하는 배열을 만듬 

String[] strArr={"AAA","BBB","CCC};

public static void main(String[] args)	//strArr이 args와 같은 참조값
{
	args[0] //=="AAA"
	args[1] //=="BBB"
	args[2] //=="CCC"
}






















