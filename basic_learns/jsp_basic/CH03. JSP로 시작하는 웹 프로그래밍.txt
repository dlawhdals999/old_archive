-----------CH03. JSP로 시작하는 웹 프로그래밍 -----------------

//context path
http://localhost:8080/jsp-study/01_hello.jsp

=>
jsp-study : context path
01_hellow : JSP 요청

=>
이클립스 사용시 자동으로 프로젝트 이름이 컨텍스트 패스

=>server.xml
....
<Context docBase="web-study-03" path="/jsp-study" reloadable="true"
		source="org.eclipse.jst.jee.server:web-study-03" /></Host>
....

---------------------------------------------------------------------------------------------

//jsp 흐름

1)브라우저에서 JSP페이지 ("myCount.jsp")를 웹 서버에게 요청
2)웹 서버는 JSP에 대한 요청을 서블릿 컨테이너에게 넘김. 그러면 서블릿 컨테이너는 해당 JSP를 찾아서 서블릿 파일(myCount_jsp.java)를 생성
3)서블릿 파일은 컴파일되어 서블릿 클래스 파일(myCount_jsp.class)를 생성
4)컴파일된 서블릿 클래스 파일을 웹 서버로 보냄
5)사용자는 서블릿의 출력 결과인 HTML 형태로 응답 결과를 보게됨

~.jsp -> ~_jsp.java로 변환 & 컴파일 후 ~_jsp.class
e.g) C:\Users\명수\workspace2\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\jsp-study\org\apache\jsp
=>
.java 소스코드 보면,
 - doGet(), doPost() 대신 service() *모든 요청에 대한 처리를 하는 메소드
 - 내장객체사용(e.g out) 내장객체 : 객체가 이미 생성된 상태로 제공이 되어 쓰는 경우

---------------------------------------------------------------------------------------------
//01 JSP에서 HTML 문서를 생성하는 기본 코드 구조

<%@ page contentType="text/html; charset=utf-8" %>	<!-- 설정 부분 : JSP 페이지에 대한 설정 정보-->
<!-- 생성부분 : HTML 코드 및 JSP 스크립트-->
<html>
<head>
	<title>HTML 문서의 제목</title>
</head>
<body>
<%
	String bookTitle="JSP 프로그래밍";
	String author="최범균";
%>
<b><%= bookTitle %></b>(<%=author%>)입니다.
</body>
</html>


-설정부분
 JSP 페이지가 생성하는 문서의 타입(종류)
 JSP 페이지에서 사용할 커스텀 태그
 JSP 페이지에서 사용할 자바 클래스 지정

ex)<%@ page contentType="text/html; charset=utf-8" %>
JSP페이지가 생성할 문서가 HTML // 문서의 character set이 UTF-8

---------------------------------------------------------------------------------------------

//02 JSP 페이지의 구성 요소

HTML문서를 생성하기 위해서는 다양한 것들이 필요한데, 이를 위해 JSP는 다음과 같은 것을 제공.
-디렉티브(Directive)
-스크립트 : 스크립트릿(Scriptlet), 표현식(Expression), 선언부(Declaration)
-표현 언어(Expression Language)
-기본 객체(Implicit Object)
-정적인 데이터
-표준 액션 태그(Action Tag)
-커스텀 태그(Custom Tag)와 표준 태그 라이브러리(JSTL)

↑위의 7가지 구성 요소들을 익히는 과정이 JSP를 공부하는 과정!

스크립트릿(scriptlet)		자바 코드를 기술함 <% %>
선언(declaration)			변수와 메소드를 선언함 <%! %>
표현식(expression)			계산식이나 함수를 호출한 결과를 문자열 형태로 출력함	<%= %>
주석(comment)				JSP페이지에 설명을 넣음 <%-- --%> , <!-- -->
지시자(Derective)			JSP 페이지 속성을 지정함 <%@ %>

//2.1 디렉티브(Directive)
;JSP 페이지에 대한 설정 정보를 지정할 때 사용.
<%@ 디렉티브이름 속성1="값1" 속성2="값2" ... %>

eg)<%@ page contentType="text/html; charset=utf-8" %>
디렉티브 이름은 page // contentType이라는 속성 사용 & 속성의 값은 "text/html; charset=utf-8"

JSP가 제공하는 디렉티브
page	:	JSP페이지에 대한 정보를 지정한다. JSP가 생성하는 문서의 타입, 출력 버퍼의 크기, 에러 페이지 등
			JSP 페이지에서 필요로 하는 정보를 설정한다.
taglib	:	JSP 페이지에서 사용할 태그 라이브러리를 지정한다.
include	:	JSP페이지의 특정 영역에 다른 문서를 포함시킨다.


//2.2 스크립트 요소
;JSP에서 문서의 내용을 동적으로 생성하기 위해 사용되는 것이 스크립트 요소이다.
(표현식(Expression) : 값을 출력	// 스크립트릿(Scriptlet) : 자바 코드를 실행 // 선언부(Declaration) : 자바 메소드를 만듬

//2.3 기본 객체 (implicit object)
;JSP는 웹 어플리케이션 프로그래밍을 하는데 필요한 기능을 제공해주는 '기본 객체'를 제공
request(요청 파라미터 읽어오기), response(응답 결과 전송), session(세션 처리), application(웹 어플리케이션 정보 읽어오기),page 
등의 다수의 기본객체가 존재. => 기본 객체를 모든 JSP 페이지에서 사용하는 것은 아니고  request,session, response  기본 객체를 주로 사용

//2.4 표현 언어(Expression language)
;스크립트 요소를 사용하면 jsp코드가 복잡해짐
e.g)
<스크립트 요소>
<%
 int a=Integer.parseInt(request.getParameter("a"));
 int b=Integer.parseInt(request.getParameter("b"));
%>
a*b=<%= a*b %>

<표현 언어>
a * b =${param.a * param.b}

==>특별한 이유가 없는 한 표현 언어를 주로 사용함.


//2.5 표준 액션 태그와 태그 라이브러리
;액션 태그는 JSP 페이지에 특별한 기능을 제공

1)액션태그
<jsp:액션태그이름> 의 형태를 띠며 액션 태그 종류에 따라서 서로 다른 속성과 값을 가짐

2)커스텀 태그
;개발자가 직접 개발해주어야 하는 태그.
JSTL(JavaServer pages Standard Tag Library) ,표준 태그 라이브러리

---------------------------------------------------------------------------------------------

//03 page 디렉티브
;JSP 페이지에 대한 정보를 입력하기 위해 사용

e.g)
<%@ page contentType="text/html"; charset="utf-8" %>
<%@ page import="java.util.Data" %>

page 디렉티브의 주요 속성 

속성				설명																기본값
language			스크립트 요소에서 사용할 언어 설정									java		language="java"								

extends				상속받을 클래스를 설정												없음		extends="클래스명"	<<상속시 기본 jspBase 클래스 상속 안하게됨.

contentType			JSP가 생성할 문서의 MIME 타입과 캐릭터 인코딩을 지정				text/html

import				JSP 페이지에서 사용할 자바 클래스를 지정							없음		import="패키지/클래스명"	

session				JSP 페이지가 세션을 사용할지의 여부를 지정							true	

buffer				JSP 페이지의 출력 버퍼 크기를 지정									최소 8kb
					"none" 출력버퍼 사용X / "?kb"

autoFlush			출력 버퍼가 다 찼을 경우 자동으로 버퍼에 있는 데이터를				true
					출력 스트림에 보내고 비울지 여부를 나타냄 false면 에러 발생

info				JSP 페이지에 대한 설명 입력											없음

errorPage			JSP 페이지를 실행하는 도중에 에러가 발생할 때 보여줄 페이지 지정	없음

isErrorPage			현재 페이지가 에러가 발생될 때 보여주는 페이지인지의 여부를 지정	false

pageEncoding		JSP 페이지 소스 코드의 캐릭터 인코딩을 지정

isELIgnored			true : 표현 언어 해석하지 않고 문자열로 처리 						false
					// false : 표현 언어 지원   

defferedSyntax		#{문자가 문자열 값으로 사용됫는 것을 허용할지의 여부 지정			false
AllowedAsLiteral

trimDirective		출력 결과에서 템플릿 텍스트의 공백 문자를 제거할지의 여부 지정		false	
Whitespaces

isThreadSafe		스레드에 안전하게 동기화 되어있는지 지정




//3.1 contentType 속성과 캐릭터 셋
contentType 속성은 JSP페이지가 생성할 문서의 MIME타입을 지정.(test/html <default // html/xml // application/json ..등등)

TYPE
또는
TYPE; charset=캐릭터 셋

cf)MIME(Multipurpose Internet Mail Extensions)

chatset의 디폴트는 ISO-8859-1 <<영어 , 서유럽의 문자
=>한글 위해서는 EUC-KR or UTF-8 과같은 한글을 포함하는 캐릭터셋을 사용. 대소문자 상관 X


//3.2 import 속성

/예제1. useImportCalendar.jsp/

<%@ page import="java.util.Calendar" %>
<%@ page import="java.util.Data" %>
==> , 로 구분
<%@ page import="java.util.Calendar, java.util.Date" %>
(*사용가능)


<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="java.util.Calender" %>			<!--import속성을 사용하여 java.util.Calendar 클래스를 임포트한다고 지정-->
<html>
<head><title>Calendar 클래스 사용</title></head>	
<body>
<%
	Calendar cal=Calendar.getInstance();		<!--현재 날짜와 시간 정보를 갖고 있는 Calendar 클래스의 인스턴스를 생성-->
	<!-- java.util.Calendar cal=java.util.Calendar.getInstance(); -->
%>
오늘은
	<%= cal.get(Calendar.YEAR) %>년
	<%= cal.get(Calendar.MONTH)+1 %>월
	<%= cal.get(Calendar.DATE) %>일
입니다.
</body>
</html>


//3.3 trimDirectiveWhitespaces 속성을 이용한 공백처리

<%@ page contentType="text/html; charset=utf-8" %>
<%@ page trimDirectiveWhitespaces="true"%>
<html>
<head><title>현재 시간</title></head>
<body>
현재 시각 : <%=new java.util.Date()%>
</body>
</html>

//3.4 JSP 페이지의 인코딩과 pageEncoding 속성
~~



---------------------------------------------------------------------------------------------

//04 스크립트 요소
1)스크립트릿(Scriptlet)
2)표현식(Expression)
3)선언부(Declaration)
4)주석문

------------------
//4.1 스크립트릿
;자바 코드를 실행할 때 사용하는 코드 블럭
<%
	자바코드1;
	자바코드2;
	자바코드3;
%>

//sum.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>1-10까지의 합</title>
</head>
<body>
<!-- 코드블럭1 -->
<%
	int sum=0;
	for(int i=0;i<11;i++){
		sum+=i;
	}
%>
<!-- 코드블럭2 -->
1부터 10까지 합은 <%= sum %>입니다.<br>
<%
	int sum2=0;
	for(int i=11;i<21;i++){
		sum2+=i;
	}
%>
11부터 20까지의 합은 <%=sum2 %>입니다.
</body>
</html>

=>스크립트릿은 서블릿 컨테이너가 out.print()로 바꿔줌


------------------

//4.2 표현식

;변수의 값이나 계산식 or 함수를 호출한 결과를 문자열 형태로 웹 문서에 출력할 때 사용하는 태그
 =>어떤 값을 출력 결과에 포함시키고자 할 때 사용.(변수, 숫자,문자열 등의 값을 사용가능)
 
<%= > 구문
e.g)
<%= a%>  --->서블릿 컨테이너가 변환 시킨 결과 --> out.print(a);


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>1-10까지의 합</title>
</head>
<body>
1부터 10까지의 합은 
<%=1+2+3+4+5+6+7+8+9+10+"입니다!!!" %>
</body>
</html>

<< 결과 >>
1부터 10까지의 합은 55입니다!!! 


------------------

//4.3 선언부(Declaration)
;JSP페이지의 스크립트릿이나 표현식에서 사용할 수 있는 메소드를 작성할때 선언부를 이용

/*	예제 : useDecl.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<%!
	public int add(int a, int b) {
		return a + b;
	}

	public int subtract(int a, int b) {
		return a - b;	
	}
%>

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>1-10까지의 합</title>
</head>
<body>
<%
	int value1=3;
	int value2=9;
	int addResult=add(value1,value2);
	int subtractResult=subtract(value1,value2);
%>

<%=value1+"+"+value2+"="+addResult %><br>
<%=value1+"-"+value2+"="+subtractResult %><br>
	
</body>
</html>

<< 실행 결과 >>
3+9=12
3-9=-6





/*	dec.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%!
	String str = "Zac`s program!";
	int a = 5,b = -5;
	static int c = 10;
	public int abs(int n){
		if(n<0)
			n=-n;
		return n;
	}
%>    
<!DOCTYPE>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>JSP</title>
</head>
<body>

<%
	out.print(str+"<br>");
	out.print(a+"의 절대 값 : "+abs(a)+"<br>");
	out.print(b+"의 절대 값 : "+abs(b)+"<br>");
%>

</body>
</html>

=>
C:\Users\명수\workspace2\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\jsp-study\org\apache\jsp
에서 dec_jsp.java 소스코드 보면
public final class dec_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {
	String str = "Zac`s program!";
	int a = 5,b = -5;
	static int c = 10;
	public int abs(int n){
		if(n<0)
			n=-n;
		return n;
	}
	..............
	 public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {
	  ....
	  <% %>안에 쓴 내용이 out.print(~~~)로 변환 되어 있음
	 
------------------
//4.4 주석문
HTML 주석문 <!-- -->
JSP 주석문 <%-- -->

1)HTML 주석문 사용
=> 서블릿 컨테이너는 그대로 포함함 => 웹브라우저에게 요청 처리하고 웹브라우저에서 출력 안됨
2)JSP 주석문 사용
=> 서블릿 컨테이너에서 포함 안됨

e.g)
comments.jsp 에서
<!-- HTML주석문 -->
<%--JSP주석문 --%>

=> comments_jsp.java 의 _jspService() 메소드 내에서
	...
	out.write("<!-- HTML주석문 -->\r\n");
    out.write("\r\n");
	....






---------------------------------------------------------------------------------------------

//request 기본 객체
;request 기본 객체는 JSP 페이지에서 가장 많이 사용되는 기본객체
=>웹 브라우저 요청과 관련이 있음.(웹 브라우저에 웹 사이트의 주소를 입력하면, 웹 브라우저는 해당 웹 서버에 연결한 후 
요청 정보를 전송. 이 요청 정보를 제공하는 것이 바로 request 기본 객체 이다.

-클라이언트(웹 브라우저)와 관련된 정보 읽기 기능
-서버와 관련된 정보 읽기 기능
-클라이언트가 전송한 요청 파라미터 읽기 기능
-클라이언트가 전송한 요청 헤더 읽기 기능
-클라이언트가 전송한 쿠키 읽기 기능
-속성 처리 기능

---------------------------------------------------------------------------------------------

//5.1 클라이언트 정보 및 서버 정보 읽기

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>클라이언트 및 서버 정보</title>
</head>
<body>

클라이언트IP =<%=request.getRemoteAddr() %> <br>
요청정보길이 =<%=request.getContentLength() %> <br>
요청정보 인코딩 =<%=request.getCharacterEncoding() %> <br>
요청정보 컨텐츠타입 =<%=request.getContentType() %> <br>
요청정보 프로토콜 =<%=request.getProtocol() %> <br>
요청정보 전송방식 =<%=request.getMethod() %> <br>
요청 URL =<%=request.getRequestURL() %> <br>
컨텍스트 경로 =<%=request.getContextPath() %> <br>
서버이름 =<%=request.getServerName() %> <br>
서버포트 =<%=request.getServerPort() %> <br>

</body>
</html>

<< 실행 결과 >>
클라이언트IP =0:0:0:0:0:0:0:1 
요청정보길이 =-1 
요청정보 인코딩 =null 
요청정보 컨텐츠타입 =null 
요청정보 프로토콜 =HTTP/1.1 
요청정보 전송방식 =GET 
요청 URL =/chap03/requestInfo.jsp 
컨텍스트 경로 =/chap03 
서버이름 =localhost 
서버포트 =8080 

=>http://localhost:8080/chap03/requestInfo.jsp 
request.getServerName()+":"+request.getServerPort()
+request.getRequestURL();

---------------------------------------------------------------------------------------------

//5.2 요청 파라미터 처리

//5.2.1 HTML 폼과 요청 파라미터
P74보기

//5.2.2

/*form.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>폼 생성</title>
</head>
<body>
<form action="/chap03/viewParameter.jsp" method="post">	<!-- 입력데이터 전달 경로 & POST 방식으로 데이터 전송 -->
이름 : <input type="text" name="name" size="10"><br>		<!-- 이름이 name인 요청 파라미터 입력 폼을 생성한다. -->
주소 : <input type="text" name="address" size="30"><br>	<!-- 이름이 address인 요청 파라미터 입력 폼을 생성한다. -->
좋아하는 동물 : 											<!-- 이름이 pet인 요청 파라미터의 체크박스를 생성한다. -->
	<input type="checkbox" name="pet" value="dog"> 강아지
	<input type="checkbox" name="pet" value="cat"> 고양이
	<input type="checkbox" name="pet" value="pig"> 돼지
<br>
<input type="submit" value="전송">
</form>
</body>
</html>


/*viewParameter.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>폼 생성</title>
</head>
<body>
<form action="/chap03/viewParameter.jsp" method="post">		<!-- 입력데이터 전달 경로 & POST 방식으로 데이터 전송 -->
이름 : <input type="text" name="name" size="10"><br>		<!-- 이름이 name인 요청 파라미터 입력 폼을 생성한다. -->
주소 : <input type="text" name="address" size="30"><br>		<!-- 이름이 address인 요청 파라미터 입력 폼을 생성한다. -->
좋아하는 동물 : 											<!-- 이름이 pet인 요청 파라미터의 체크박스를 생성한다. -->
	<input type="checkbox" name="pet" value="dog"> 강아지
	<input type="checkbox" name="pet" value="cat"> 고양이
	<input type="checkbox" name="pet" value="pig"> 돼지
<br>
<input type="submit" value="전송">
</form>
</body>
</html>


==>checkbox와 radiobox는 선택하지 않으면 매개변수 전달 X
BUT <input type="text"..>로하면 빈 문자열("")이 파라미터 값으로 전달된다.

---------------------------------------------------------------------------------------------

//5.2.3 GET 방식 전송과 POST 방식 전송

GET과 POST방식의 차이는 전송방식에 있음
GET은 요청 URL에 파라미터를 붙여서 전송. =>길이의 제한이 있을 수 있음.
POST는 데이터 영역을 이용해서 전송

//5.2.4 요청 파라미터 인코딩
//5.2.5 톰캣에서 GET 방식 파라미터를 위한 인코딩 처리하기
책.

//5.3 요청 헤더 정보의 처리

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.Enumeration" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>헤더 목록 출력</title>
</head>
<body>
<%
	Enumeration headerEnum=request.getHeaderNames();
	while(headerEnum.hasMoreElements()){
		String headerName=(String)headerEnum.nextElement();
		String headerValue=request.getHeader(headerName);
%>
<%=headerName %> = <%=headerValue %><br>	
<%
	}		
%>

</body>
</html>

<< 출력 결과 >>
accept = image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, application/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*
accept-language = ko-KR
cache-control = no-cache
ua-cpu = AMD64
accept-encoding = gzip, deflate
user-agent = Mozilla/5.0 (Windows NT 6.2; Win64; x64; Trident/7.0; rv:11.0) like Gecko
host = localhost:8080
connection = Keep-Alive
cookie = JSESSIONID=9FBACC0594711224057D932441774806

---------------------------------------------------------------------------------------------

//06 response 기본 객체
request 	: 웹 브라우저가 전송한 요청 정보
response 	: 웹 브라우저에게 보내는 응답 정보를 담는다.

//6.1 웹 브라우저에 헤더 정보 전송하기
책P90

//6.2 웹브라우저 캐시 제어를 위한 응답 헤더 입력























