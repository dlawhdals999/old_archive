-----------CH21.회원제 게시판 구현 1(회원 관련 기능)-----------------
;이장에서 다룰 내용
-캐릭터 인코딩 필터
-회원 가입 기능 구현
-로그인/로그아웃 처리
-필터를 이용한 로그인 검사 기능
-암호 변경 기능

---------------------------------------------------------------------------------------------

//01 회원 관련 주요 기능

=>회원 관련 기능
-회원 가입
-회원 정보 수정하기

=>회원 정보를 수정하기 위해서는
-로그인하기
-로그아웃하기
-로그인한 사람만 특정 기능 실행하기

---------------------------------------------------------------------------------------------

//02 예제를 위한 데이터베이스 생성

1)board DB 생성
create database board default character set utf8;

2)계정생성
CREATE USER 'jspexam'@'localhost' IDENTIFIED BY 'jsppw';
CREATE USER 'jspexam'@'%' IDENTIFIED BY 'jsppw';

3)board DB에 jspexam 사용자 권한 부여
GRANT ALL PRIVILEGES ON board.* TO 'jspexam'@'localhost';
GRANT ALL PRIVILEGES ON board.* TO 'jspexam'@'%';

---------------------------------------------------------------------------------------------

//03 예제 이클립스 프로젝트 생성

Dynamic Web Project : board 생성

WebContent/WEB-INF/lib 폴더에
commons-dbcp2-2.1.1.jar
commons-logging-1.2.jar
commons-pool2-2.4.2.jar
jstl-1.2.jar
mysql-connector-java-5.1.39-bin.jar

추가

---------------------------------------------------------------------------------------------

//04 커넥션 관련 코드

//커넥션 풀을 초기화
/*	board/src/jdbc/DBCPInitListener.java	*/

package jdbc;

import java.io.IOException;
import java.io.StringReader;
import java.sql.DriverManager;
import java.util.Properties;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.apache.commons.dbcp2.ConnectionFactory;
import org.apache.commons.dbcp2.DriverManagerConnectionFactory;
import org.apache.commons.dbcp2.PoolableConnection;
import org.apache.commons.dbcp2.PoolableConnectionFactory;
import org.apache.commons.dbcp2.PoolingDriver;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;

public class DBCPInitListener implements ServletContextListener {

	@Override
	public void contextInitialized(ServletContextEvent sce) {
		String poolConfig = 
				sce.getServletContext().getInitParameter("poolConfig");
		Properties prop = new Properties();
		try {
			prop.load(new StringReader(poolConfig));
		} catch (IOException e) {
			throw new RuntimeException("config load fail", e);
		}
		loadJDBCDriver(prop);
		initConnectionPool(prop);
	}

	private void loadJDBCDriver(Properties prop) {
		String driverClass = prop.getProperty("jdbcdriver");
		try {
			Class.forName(driverClass);
		} catch (ClassNotFoundException ex) {
			throw new RuntimeException("fail to load JDBC Driver", ex);
		}
	}

	private void initConnectionPool(Properties prop) {
		try {
			String jdbcUrl = prop.getProperty("jdbcUrl");
			String username = prop.getProperty("dbUser");
			String pw = prop.getProperty("dbPass");

			ConnectionFactory connFactory = 
					new DriverManagerConnectionFactory(jdbcUrl, username, pw);

			PoolableConnectionFactory poolableConnFactory = 
					new PoolableConnectionFactory(connFactory, null);
			String validationQuery = prop.getProperty("validationQuery");
			if (validationQuery != null && !validationQuery.isEmpty()) {
				poolableConnFactory.setValidationQuery(validationQuery);
			}
			GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();
			poolConfig.setTimeBetweenEvictionRunsMillis(1000L * 60L * 5L);
			poolConfig.setTestWhileIdle(true);
			int minIdle = getIntProperty(prop, "minIdle", 5);
			poolConfig.setMinIdle(minIdle);
			int maxTotal = getIntProperty(prop, "maxTotal", 50);
			poolConfig.setMaxTotal(maxTotal);

			GenericObjectPool<PoolableConnection> connectionPool = 
					new GenericObjectPool<>(poolableConnFactory, poolConfig);
			poolableConnFactory.setPool(connectionPool);
			
			Class.forName("org.apache.commons.dbcp2.PoolingDriver");
			PoolingDriver driver = (PoolingDriver)
				DriverManager.getDriver("jdbc:apache:commons:dbcp:");
			String poolName = prop.getProperty("poolName");
			driver.registerPool(poolName, connectionPool);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	private int getIntProperty(Properties prop, String propName, int defaultValue) {
		String value = prop.getProperty(propName);
		if (value == null) return defaultValue;
		return Integer.parseInt(value);
	}

	@Override
	public void contextDestroyed(ServletContextEvent sce) {
	}

}




//web.xml 파일
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">
  <listener>
  	<listener-class>jdbc.DBCPInitListener</listener-class>
  </listener>
  
	<listener>
		<listener-class>jdbc.DBCPInitListener</listener-class>
	</listener>

	<context-param>
		<param-name>poolConfig</param-name>
		<param-value>
			jdbcdriver=com.mysql.jdbc.Driver
			jdbcUrl=jdbc:mysql://localhost:3306/guestbook?characterEncoding=utf8
			dbUser=jspexam
			dbPass=jsppw
			poolName=guestbook
		</param-value>
	</context-param>
  
</web-app>




//ConnectionProvider
/*	board/src/jdbc/connection/ConnectionProvider.java	*/

package jdbc.connection;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class ConnectionProvider {
	public static Connection getConnection() throws SQLException{
		return DriverManager.getConnection("jdbc:apache:commons:dbcp:board"); 
		//web.xml에 지정한 poolName 값인 board를 풀 이름으로 사용
	}	
}





//DB연결 올바르게 연결했는지 확인하는 JSP 코드
/*	board/WebContent/dbconnTest.jsp		*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="jdbc.connection.ConnectionProvider" %>
<%@ page import="java.sql.*" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>연결 테스트</title>
</head>
<body>

<%
	try (Connection conn = ConnectionProvider.getConnection()) {
		out.println("커넥션 연결 성공함");
	} catch(SQLException ex) {
		out.println("커넥션 연결 실패함 : " + ex.getMessage());
		application.log("커넥션 연결 실패", ex);
	}
%>

</body>
</html>

---------------------------------------------------------------------------------------------

//05 캐릭터 인코딩 필터 설정

/*	board/src/util/CharacterEncodingFilter.java	*/


package util;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class CharacterEncodingFilter implements Filter{
	private String encoding;
	
	@Override
	public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException,ServletException{
		req.setCharacterEncoding(encoding);
		chain.doFilter(req, res);
	}
	
	@Override
	public void init(FilterConfig config) throws ServletException{
		encoding=config.getInitParameter("encoding");
		if(encoding==null)
			encoding="UTF-8";		
	}
	
	@Override
	public void destroy(){
		
	}
}


/*	web.xml		*/

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>util.CharacterEncoding</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>	
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

---------------------------------------------------------------------------------------------

//06 MVC 컨트롤러 코드

/*	board/src/mvc/command/CommandHandler.java	*/
package mvc.command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public interface CommandHandler {
	public String process(HttpServletRequest request,HttpServletResponse response) throws Exception;

}

/*	board/src/mvc/command/NullHandler.java	*/
package mvc.command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class NullHandler implements CommandHandler{
	@Override
	public String process(HttpServletRequest request,HttpServletResponse response) throws Exception{
		response.sendError(HttpServletResponse.SC_NOT_FOUND);
		return null;
	}
}



/*	board/src/mvc/command/CommandHandler.java	*/
package mvc.controller;

import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import mvc.command.CommandHandler;
import mvc.command.NullHandler;

public class ControllerUsingURI extends HttpServlet{
	 // <커맨드, 핸들러인스턴스> 매핑 정보 저장
    private Map<String, CommandHandler> commandHandlerMap = 
    		new HashMap<>();

    public void init() throws ServletException {
        String configFile = getInitParameter("configFile");
        Properties prop = new Properties();
        String configFilePath = getServletContext().getRealPath(configFile);
        
        try (FileReader fis = new FileReader(configFilePath)) {
            prop.load(fis);
        } catch (IOException e) {
            throw new ServletException(e);
        }
        
        Iterator keyIter = prop.keySet().iterator();
        
        while (keyIter.hasNext()) {
            String command = (String) keyIter.next();
            String handlerClassName = prop.getProperty(command);
            try {
                Class<?> handlerClass = Class.forName(handlerClassName);
                CommandHandler handlerInstance = 
                        (CommandHandler) handlerClass.newInstance();
                commandHandlerMap.put(command, handlerInstance);
            } catch (ClassNotFoundException | InstantiationException 
            		| IllegalAccessException e) {
                throw new ServletException(e);
            }
        }
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        process(request, response);
    }

    protected void doPost(HttpServletRequest request,
    HttpServletResponse response) throws ServletException, IOException {
        process(request, response);
    }

    private void process(HttpServletRequest request,
    HttpServletResponse response) throws ServletException, IOException {
        String command = request.getRequestURI();       
        if(command.indexOf(request.getContextPath())==0){
        	command=command.substring(request.getContextPath().length());
        }
        CommandHandler handler = commandHandlerMap.get(command);
        if (handler == null) {
            handler = new NullHandler();
        }
        String viewPage = null;
        try {
            viewPage = handler.process(request, response);
        } catch (Throwable e) {
            throw new ServletException(e);
        }
        if (viewPage != null) {
	        RequestDispatcher dispatcher = request.getRequestDispatcher(viewPage);
	        dispatcher.forward(request, response);
        }
    }
}


/*	web.xml 에 ControllerUsingURI 추가	*/

	<servlet>
		<servlet-name>ControllerUsingURI</servlet-name>
		<servlet-class>mvc.controller.ControllerUsingURI</servlet-class>
		<init-param>
			<param-name>configFile</param-name>
			<param-value>
				/WEB-INF/commandHandlerURI.properties
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>ControllerUsingURI</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	

/*	board/WebContent/WEB-INF/commandHandlerURI.properties	*/
#comment


---------------------------------------------------------------------------------------------

//07 회원 가입 기능 구현

chap21-1 회원 가입 기능구현.jpg 보기

-----------

/7.1 회원 정보 보관을 위한 DB 테이블과 관련 Member 클래스

//board DB에 member table 생성
create table board.member(
	memberid varchar(50) primary key,
    name varchar(50) not null,
    password varchar(10) not null,
    regdate datetime not null
)engine=InnoDB default character set=utf8;

//member 테이블의 데이터를 담을 때 사용할 Member 클래스
/*	board/src/member/model/Member.java	*/



package member.model;

import java.util.Date;

public class Member {
	private String id;
	private String name;
	private String password;
	private Date regDate;
	
	public Member(String id,String name,String password,Date regDate){
		this.id=id;
		this.name=name;
		this.password=password;
		this.regDate=regDate;
	}

	public String getId() {
		return id;
	}

	public String getName() {
		return name;
	}

	public String getPassword() {
		return password;
	}

	public Date getRegDate() {
		return regDate;
	}
	
	public boolean matchPassword(String pwd){
		return password.equals(pwd);
	}

}



-----------

/7.2 MembderDao 구현


//회원 가입 기능 구현(추가적으로 정보 수정 기능도 제공)
/*	board/src/member/dao/MemberDao.java	*/
package member.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;

import jdbc.JdbcUtil;
import member.model.Member;

public class MemberDao {
	public Member selectById(Connection conn,String id) throws SQLException{
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		try{
			pstmt=conn.prepareStatement("select * from member where memberid=?");
			pstmt.setString(1, id);
			rs=pstmt.executeQuery();
			Member member=null;
			if(rs.next()){
				member=new Member(
						rs.getString("memberid"),
						rs.getString("name"),
						rs.getString("password"),
						toDate(rs.getTimestamp("regdate"))
						);
			}
			return member;
		}finally{
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
		}
	}
	
	private Date toDate(Timestamp date){
		return date==null?null:new Date(date.getTime());
	}
	
	public void insert(Connection conn,Member mem) throws SQLException{
		try(PreparedStatement pstmt=conn.prepareStatement("insert into member values(?,?,?,?)")){
			pstmt.setString(1, mem.getId());
			pstmt.setString(2, mem.getName());
			pstmt.setString(3, mem.getPassword());
			pstmt.setTimestamp(4,new Timestamp(mem.getRegDate().getTime()));
			pstmt.executeUpdate();			
		}
	}	
}

-----------

/7.3 JoinService와 JoinRequest 구현


//JoinService가 회원 가입 기능을 구현할 ? 필요한 요청 데이터를 담는 클래스
/*	board/src/member/service/JoinRequest.java	*/


package member.service;

import java.util.Map;

public class JoinRequest {
	private String id;
	private String name;
	private String password;
	private String confirmPassword;
	
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getConfirmPassword() {
		return confirmPassword;
	}
	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}
	
	public boolean isPasswordEqualToConfirm(){
		return password!=null&&password.equals(confirmPassword);
	}
	
	public void validate(Map<String,Boolean> errors){
		checkEmpty(errors,id,"id");
		checkEmpty(errors,name,"name");
		checkEmpty(errors,password,"password");
		checkEmpty(errors,confirmPassword,"confirmPassword");
		
		if(!errors.containsKey("confirmPassword")){
			if(!isPasswordEqualToConfirm())
				errors.put("notMatch",Boolean.TRUE);
		}
	}
	
	private void checkEmpty(Map<String,Boolean> errors,String value,String fieldName){
		if(value==null || value.isEmpty())
			errors.put(fieldName, Boolean.TRUE);
	}
}


//회원 가입 처리시 동일한 아이디가 존재할 경우 익셉션 클래스
/*	board/src/member/service/DuplicateIdException.java	*/
package member.service;

public class DuplicateIdException extends RuntimeException{

}


//회원 가입 기능을 제공하는 JoinService 클래스
/*	board/src/member/service/JoinService.java	*/

package member.service;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;

import jdbc.JdbcUtil;
import jdbc.connection.ConnectionProvider;
import member.dao.MemberDao;
import member.model.Member;

public class JoinService {
	
	private MemberDao memberDao=new MemberDao();
	
	public void join(JoinRequest joinReq){
		Connection conn=null;
		try{
			conn=ConnectionProvider.getConnection();
			conn.setAutoCommit(false);
			
			Member member=memberDao.selectById(conn, joinReq.getId());
			if(member!=null){	//해당 ID 가 존재하면 
				JdbcUtil.rollback(conn);
				throw new DuplicateIdException();
			}
			
			//joinReq 인스턴스를 이용해 멤버 인스턴스 생성 & memberDao를 이용해 테이블에 데이터 삽입
			memberDao.insert(conn, new Member(
					joinReq.getId(),
					joinReq.getName(),
					joinReq.getPassword(),
					new Date()
					));
			
			conn.commit(); //트랜잭션 커밋			
		}catch(SQLException e){
			JdbcUtil.rollback(conn);
			throw new RuntimeException(e);			
		}finally{
			JdbcUtil.close(conn);
		}
	}
}

-----------

/7.4 JoinHandler와 JSP 구현
JoinHandler
-GET 방식으로 요청이 오면 폼을 보여주는 뷰인 joinForm.jsp를 리턴
-POST 방식으로 요청이 오면 회원 가입을 처리하고 결과를 보여주는 뷰를 리턴한다.
 (입력 데이터가 잘못된 경우 다시 joinForm.jsp를 뷰로 리턴한다//회원 가입에 성공한 경우 joinSuccess.jsp를 뷰로 리턴한다.)
 

/* 	board/src/member/command/JoinHandler.java	*/
package command;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import member.service.DuplicateIdException;
import member.service.JoinRequest;
import member.service.JoinService;
import mvc.command.CommandHandler;

public class JoinHandler implements CommandHandler{
	private static final String FORM_VIEW="/WEB-INF/view/joinForm.jsp";
	private JoinService joinService=new JoinService();
	
	@Override
	public String process(HttpServletRequest req,HttpServletResponse res){
		if(req.getMethod().equalsIgnoreCase("GET")){ //GET 요청 -> joinForm.jsp를 리턴
			return processForm(req,res);			
		}else if(req.getMethod().equalsIgnoreCase("POST")){ //POST 요청 -> 회원가입 처리 & 결과를 보여주는 뷰를 리턴
			return processSubmit(req,res);			
		}else{	//GET , POST가 아니면 405 응답 코드 전송
			res.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
			return null;
		}		
	}
	
	private String processForm(HttpServletRequest req,HttpServletResponse res){
		return FORM_VIEW;
	}
	
	private String processSubmit(HttpServletRequest req,HttpServletResponse res){
		JoinRequest joinReq=new JoinRequest();
		joinReq.setId(req.getParameter("id"));
		joinReq.setName(req.getParameter("name"));
		joinReq.setPassword(req.getParameter("password"));
		joinReq.setConfirmPassword(req.getParameter("confirmPassword"));
		
		Map<String,Boolean> errors=new HashMap<>();
		req.setAttribute("errors",errors);
		
		joinReq.validate(errors);
		
		if(!errors.isEmpty())	//회원가입 요청 데이터에 문제가 에러가 있는 경우
			return FORM_VIEW;
		
		try{
			joinService.join(joinReq);
			return "/WEB-INF/view/joinSuccess.jsp";
		}catch(DuplicateIdException e){ //동일 아이디가 존재 할 경우
			errors.put("duplicateId",Boolean.TRUE);
			return FORM_VIEW;
		}		
	}
}




//회원가입 폼을 보여줄 때 사용하는 jsp 코드
/*	board/WebContent/WEB-INF/view/joinForm.jsp	*/



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>가입</title>
</head>
<body>

<form action="join.do" method="post">
<p>
	아이디 : <br/><input type="text" name="id" value="${param.id}">
	<c:if test="${errors.id}">ID를 입력하세요.</c:if>
	<c:if test="${errors.duplicateId}">이미 사용중인 아이이디 입니다.</c:if>
</p>
<p>
	이름:<br/><input type="text" name="name" value="${param.name}">
	<c:if test="${errors.name}">이름을 입력하세요.</c:if>
</p>
<p>
	암호:<br/><input type="password" name="password">
	<c:if test="${errors.password}">암호를 입력하세요.</c:if>
</p>
<p>
	확인:<br/><input type="password" name="confirmPassword">
	<c:if test="${errors.confirmPassword}">암호를 입력하세요.</c:if>
	<c:if test="${errors.notMatch}">암호와 확인이 일치하지 않습니다.</c:if>
</p>
<input type="submit" value="가입">
</form>
</body>
</html>





//회원 가입 성공시 사용하는 뷰 코드
/*	board/WebContent/Web-INF/joinSuccess.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>가입 완료</title>
</head>
<body>

${param.name}님, 회원 가입에 성공했습니다.
<br/>

</body>
</html>

-----------

/7.5 JoinHandler를 위한 매핑 설정
=>CommandHandler를 위한 매핑 설정 추가.

/*	board/WebContent/WEB-INF/commandHandlerURI.properties	*/
/join.do=member.command.JoinHandler

-----------

/7.6 회원 가입 기능 테스트

http://localhost:8080/join.do
실행 후 여러가지 테스트해보기

---------------------------------------------------------------------------------------------

//08 로그인 기능 구현

21-2 로그인 기능 구현.jpg 그림 보기

-----------

/8.1 LoginService와 User 구현

1)LoginService 
: 사용자가 입력한 아이디와 암호가 올바른지 검사함. 
=>id,pw가 일치하면 로그인 한 사용자 정보를 담은 User객체를 리턴.
=>아니면 LoginFailException을 발생


//User 클래스 구현
/*	board/src/auth/service/User.java	*/
package auth.service;

public class User {
	private String id;
	private String name;
	
	public User(String id,String name){
		this.id=id;
		this.name=name;
	}
	
	public String getId(){
		return id;
	}
	
	public String getName(){
		return name;
	}
}


//예외 클래스
/*	board/src/service/LoginFailException.java	*/
package auth.service;

public class LoginFailException extends RuntimeException{
}


//LoginService : MemberDao를 이용해서 회원 데이터가 존재하는지 확인
/*	board/src/auth/service/LoginService.java	*/



package auth.service;

import java.sql.Connection;
import java.sql.SQLException;

import jdbc.connection.ConnectionProvider;
import member.dao.MemberDao;
import member.model.Member;

public class LoginService {
	private MemberDao memberDao=new MemberDao();
	
	public User login(String id,String password){
		try(Connection conn=ConnectionProvider.getConnection()){
			Member member=memberDao.selectById(conn, id);
			if(member==null || !member.matchPassword(password)) //회원 id가 존재하지 않는 경우 || 비밀번호가 틀린 경우
				throw new LoginFailException();
			return new User(member.getId(),member.getName());			
		}catch(SQLException e){
			throw new RuntimeException(e);
		}
	}
	//회원 가입을 위한 JoinService 클래스의 join()메소드는 JoinRequest 클래스를 이용
	//BUT LoginService 클래스의 login()메소드는 필요 데이터==아이디,암호 => 별도의 클래스 만들지X
}

-----------

/8.2LoginHandler 구현


/*	board/src/auth/command/LoginHandler.java	*/
package auth.command;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import auth.service.LoginFailException;
import auth.service.LoginService;
import auth.service.User;
import mvc.command.CommandHandler;

public class LoginHandler implements CommandHandler{
	
	private static final String FORM_VIEW="/WEB-INF/view/loginForm.jsp";
	private LoginService loginService=new LoginService();
	
	@Override
	public String process(HttpServletRequest req, HttpServletResponse res)	throws Exception{
		if(req.getMethod().equalsIgnoreCase("GET"))
			return processForm(req,res);
		else if(req.getMethod().equalsIgnoreCase("POST"))
			return processSubmit(req,res);
		else{
			res.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
			return null;
		}			
	}
	
	private String processForm(HttpServletRequest req,HttpServletResponse res){
		return FORM_VIEW;
	}
	private String processSubmit(HttpServletRequest req,HttpServletResponse res) throws Exception{
		//폼에서 전송한 id와 password 파라미터의 값 구하기
		String id=trim(req.getParameter("id"));
		String password=trim(req.getParameter("password"));
		
		//에러 정보를 담을 맵 객체를 생성하고 errors 속성에 저장
		Map<String,Boolean> errors=new HashMap<>();
		req.setAttribute("errors",errors);
		
		//id나 password가 없을 경우 에러 추가
		if(id==null || id.isEmpty())
			errors.put("id",Boolean.TRUE);
		
		if(password==null || password.isEmpty())
			errors.put("password",Boolean.TRUE);
		
		//에러가 존재하면 폼 뷰를 리턴
		if(!errors.isEmpty())
			return FORM_VIEW;
		
				
		//
		try{
			User user=loginService.login(id, password); // 로긴에 성공시 User 객체를 리턴
			req.getSession().setAttribute("authUser",user); //User 객체를 세션의 authUser 속성에 저장
			res.sendRedirect(req.getContextPath()+"/index.jsp"); // /index.jsp로 리다이렉트 			
			return null;			
		}catch(LoginFailException e){ // 로긴 실패시 LoginFailException 발생
			errors.put("idOrPwNotMatch",Boolean.TRUE); //에러 추가
			return FORM_VIEW; //폼을 위한 뷰 리턴
		}		
	}
	
	private String trim(String str){
		return str==null?null:str.trim();
	}
}


//매핑 설정 추가
/*	board/WebContent/WEB-INF/view/loginForm.jsp	*/
/login.do=auth.command.LoginHandler

-----------

/8.3 loginForm.jsp와 index.jsp 구현

//로그인 폼을 보여줄 loginForm.jsp
/*	board/WebContent/WEB-INF/view/loginForm.jsp	*/



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그인</title>
</head>
<body>

<form action="login.do" method="post">
<c:if test="${errors.idOrPwNotMath }" >
아이디와 암호가 일치하지 않습니다.
</c:if>
<p>
	아이디:<br/><input type="text" name="id" value="${param.id }" >
	<c:if test="${errors.id }" >ID를 입력하세요.</c:if>
</p>

<p>
	암호 : <br/><input type="password" name="password" value="${param.password }" >
	<c:if test="${errors.password }" >암호를 입력하세요.</c:if>
</p>
<input type="submit" value="로그인" >
</form>
</body>
</html>




//로그인에 성공할 때 사용할 index.jsp
/*	board/WebContent/index.jsp	*/



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>회원 게시판 예제</title>
</head>
<body>

<c:if test="${! empty authUser }" >
	${authUser.name }님, 안녕하세요.
	<a href="logout.do">[로그아웃하기]</a>
	<a href="changePw.do">[암호 변경하기]</a>	
</c:if>

<c:if test="${empty authUser }" >
	<a href="join.do">[회원가입하기]</a>
	<a href="login.do">[로그인하기]</a>
</c:if>

<br/>

</body>
</html>




=> LoginHandler는 로그인에 성공하면 세션의 authUser 속성에 User 객체를 저장.
=> 로그인 했는지 여부는 authUser 속성이 존재하는지 여부를 이용해서 확인 가능


-----------

/8.4 로그인 기능 테스트

http://localhost:8080/board/login.do
에서 아이디 , 비밀번호 테스트 해보기

---------------------------------------------------------------------------------------------

//09로그아웃 기능 구현

/*	board/src/auth/command/LogoutHandler.java	*/


package auth.command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import mvc.command.CommandHandler;

public class LogoutHandler implements CommandHandler{
	
	@Override
	public String process(HttpServletRequest req,HttpServletResponse res) throws Exception{
		HttpSession session=req.getSession(false);
		if(session!=null)
			session.invalidate();
		res.sendRedirect(req.getContextPath()+"/index.jsp");
		return null;		
	}
}



//매핑 설정 추가

/* board/Webcontent/WEB-INF/commandHandlerURI.properties
/logout.do=auth.command.LogoutHandler

---------------------------------------------------------------------------------------------

//10 로그인 여부 검사 기능

=>
-로그인 여부를 검사한다.
-로그인하지 않았으면 로그인 화면으로 이동시킨다.
-로그인했다면 요청한 기능을 실행한다.

=>
각 기능을 구현한 코드마다 로그인 여부를 검사하는 코드를 추가하는 것보다
공통 코드로 처리하는 방법을 찾는 것이 좋음.

=>
서블릿/JSP 프로그래밍은 공통 로직을 수행하기에 적합한 기법 == 필터 사용


/*	board/src/filter/LoginCheckFilter.java	*/


package filter;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class LoginCheckFilter implements Filter{
	@Override
	public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException,ServletException{
		HttpServletRequest request=(HttpServletRequest)req;
		HttpSession session=request.getSession();
		
		//세션이 존재하지 않거나 authUser 속성이 없으면 login.do 로 리다이렉트
		if(session==null || session.getAttribute("authUser")==null){
			HttpServletResponse response=(HttpServletResponse)res;
			response.sendRedirect(request.getContextPath()+"/login.do");
		}else{ //세션에 "authUser" 속성이 존재하면 로그인한 것으로 판단하고 기능을 실행
			chain.doFilter(req, res);
		}		
	}
	
	@Override
	public void init(FilterConfig config) throws ServletException{
		
	}
	
	@Override
	public void destroy(){
		
	}
}


//필터 매핑 추가
/*	board/WebContent/WEB-INF/web.xml	*/
	<filter>
		<filter-name>LoginCheckFilter</filter-name>
		<filter-class>filter.LoginCheckFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>LoginCheckFilter</filter-name>
		<url-pattern>/changePwd.do</url-pattern>
	</filter-mapping> 


=>
http://localhost:8080/board/changePwd.do 입력시 login.do 로 리다이렉트

-----------

/10.2 로그인 여부 검사 커스텀 태그 구현

기존 index.jsp에서  <c:if>로 로그인 여부를 검사하는 것도 나쁘지 않지만
코드 의미가 잘 드러날 수 있도록 로그인 여부를 검사하는 커스텀 태그를 구현하는 것이 좋음

/*	 board/WebContent/WEB-INF/tags/isLogin.tag	*/
<%@ tag body-content="scriptless" pageEncoding="utf-8" %>
<%@ tag trimDirectiveWhitespaces="true" %>

<%
	HttpSession httpSession=request.getSession(false);
	if(httpSession!=null && httpSession.getAttribute("authUser")!=null){
%>
<jsp:doBody />
<%
	}
%>


/*	 board/WebContent/WEB-INF/tags/noLogin.tag	*/
<%@ tag body-content="scriptless" pageEncoding="utf-8" %>
<%@ tag trimDirectiveWhitespaces="true" %>

<%
	HttpSession httpSession=request.getSession(false);
	if(httpSession==null || httpSession.getAttribute("authUser")==null){
%>
<jsp:doBody />
<%
	}
%>





/*	board/WebContent/index.jsp (커스텀 태그 사용)	*/



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="u" tagdir="/WEB-INF/tags"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type." content="text/html; charset=UTF-8">
<title>회원 게시판 예제</title>
</head>
<body>

<u:isLogin>
	${authUser.name }님, 안녕하세요.
	<a href="logout.do">[로그아웃하기]</a>
	<a href="changePw.do">[암호 변경하기]</a>	
</u:isLogin>

<u:noLogin>
	<a href="join.do">[회원가입하기]</a>
	<a href="login.do">[로그인하기]</a>
</u:noLogin>

<br/>

</body>
</html>

---------------------------------------------------------------------------------------------

//암호 변경 기능 구현

21-3 암호 변경 기능 구현 그림 보기


-----------

/11.1 Member와 MemberDao에 암호 변경 관련 기능 구현


//1)Member 클래스에 메소드 추가
/*	board/src/member/model/Member.java	*/

..코드 생략
	public void changePassword(String newPwd) {
		this.password = newPwd;
	}
메소드 추가


//2)MemberDao에 update 쿼리 실행하는 메소드 추가
/*	 board/src/member/dao/MemberDao.java	*/

	..코드 생략
	public void update(Connection conn,Member member) throws SQLException{
		try(PreparedStatement pstmt=
				conn.prepareStatement("update member set name=?,password=? where memberid=?")){
			pstmt.setString(1, member.getName());
			pstmt.setString(2, member.getPassword());
			pstmt.setString(3, member.getId());
			pstmt.executeUpdate();			
		}
	}
	...코드 생략
	

-----------

/11.2 ChangePasswordService 구현

암호 변경 기능은 다음의 2가지 이유로 기능을 실행하는 데 실패할 수 있음
-암호를 변경할 회원 데이터가 존재하지 않는 경우
-현재 암호가 일치하지 않는 경우(암호를 변경할 때 보통 현재 암호와 변경할 암호를 함께 입력하는데, 
 이때 현재 암호가 일치하지 않으면 암호 변경에 실패한다.)
 
=>위의 2가지 경우에 발생시킬 익셉션

/*	board/src/member/service/MemberNotFoundException.java	*/ 

package member.service;

public class MemberNotFoundException extends RuntimeException{

}


/*	board/src/member/service/InvalidPasswordException.java	*/


package member.service;

public class InvalidPasswordException extends RuntimeException{

}



/*	board/src/member/service/ChangePasswordService.java	*/


package member.service;

import java.sql.Connection;
import java.sql.SQLException;

import jdbc.JdbcUtil;
import jdbc.connection.ConnectionProvider;
import member.dao.MemberDao;
import member.model.Member;

public class ChangePasswordService {
	
	private MemberDao memberDao=new MemberDao();
	
	public void changePassword(String userId,String curPwd,String newPwd){
		Connection conn=null;
		try{
			conn=ConnectionProvider.getConnection();
			conn.setAutoCommit(false);
			
			Member member=memberDao.selectById(conn, userId);
			if(member==null) //해당 id가 없는 경우
				throw new MemberNotFoundException();
			if(!member.matchPassword(curPwd)) //현재 비밀번호가 틀린 경우
				throw new InvalidPasswordException();
			
			member.changePassword(newPwd);
			memberDao.update(conn, member);
			conn.commit();			
		}catch(SQLException e){
			JdbcUtil.rollback(conn);
			throw new RuntimeException(e);
		}finally{
			JdbcUtil.close(conn);
		}		
	}
}

-----------

/11.3 ChangePasswordHandler 구현

/*	board/src/member/command/ChangePasswordHandler.java	*/


package member.command;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import auth.service.User;
import member.service.ChangePasswordService;
import member.service.InvalidPasswordException;
import member.service.MemberNotFoundException;
import mvc.command.CommandHandler;

public class ChangePasswordHandler implements CommandHandler{
	private static final String FORM_VIEW="/WEB-INF/view/changePwdForm.jsp";
	private static final String PWD_CHANGE_SUCCESS="/WEB-INF/view/changePwdSuccess.jsp";
	private ChangePasswordService changePwdSvc=new ChangePasswordService();
	
	
	@Override
	public String process(HttpServletRequest req, HttpServletResponse res) throws Exception{
		if(req.getMethod().equalsIgnoreCase("GET")){ //GET 요청시
			return processForm(req,res);
		}else if(req.getMethod().equalsIgnoreCase("POST")){ //POST 요청시
			return processSubmit(req,res);
		}else{
			res.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
			return null;
		}
	}
	
	private String processForm(HttpServletRequest req,HttpServletResponse res){
		return FORM_VIEW;
	}
	
	private String processSubmit(HttpServletRequest req,HttpServletResponse res) throws Exception{
		User user=(User)req.getSession().getAttribute("authUser"); //LoginHandler에서 로그인 성공시 세션에 authUser 속성에 사용자 정보를 저장
		
		Map<String,Boolean> errors=new HashMap<>();
		req.setAttribute("errors",errors);
		
		String curPwd=req.getParameter("curPwd");
		String newPwd=req.getParameter("newPwd");
		
		//파라미터가 없는 경우 errors 맵 객체에 에러 코드 추가
		if(curPwd==null || curPwd.isEmpty())
			errors.put("curPwd",Boolean.TRUE);
		
		if(newPwd==null || newPwd.isEmpty())
			errors.put("newPwd",Boolean.TRUE);
		
		//에러가 존재하면 폼을 위한 뷰 경로를 리턴
		if(!errors.isEmpty())
			return FORM_VIEW;
		
		
		try{
			changePwdSvc.changePassword(user.getId(),curPwd, newPwd);
			return PWD_CHANGE_SUCCESS; //암호 변경 성공시 changePwdSuccess.jsp로 이동
		}catch(InvalidPasswordException e){ //현재 암호(curPwd)가 올바르지 않아 익센셥이 발생하면 
			errors.put("badCurPwd",Boolean.TRUE);
			return FORM_VIEW;
		}catch(MemberNotFoundException e){ //암호를 변경할 회원 아이디가 존재하지 않아 익셉션이 발생
			res.sendError(HttpServletResponse.SC_BAD_REQUEST);
			return FORM_VIEW;			
		}		
	}
}


//매핑 설정 추가
/*	board/WebContent/WEB-INF/commandHandlerURI.properties	*/
/changePwd.do=member.command.ChangePasswordHandler

-----------

/11.4 changePwdForm.jsp 와 changePwdSuccess.jsp 구현


/*	board/WebContent/WEB-INF/view/changePwdForm.jsp	*/



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>    
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>암호 변경</title>
</head>
<body>

<form action="changePwd.do" method="post">
<p>
	현재 암호 : <br/> <input type="password" name="curPwd">
	<c:if test="${errors.curPwd }">현재 암호를 입력하세요.</c:if>
	<c:if test="${errors.badCurPwd }">현재 암호가 일치하지 않습니다.</c:if>
</p>
<p>
	새 암호:<br/><input type="password" name="newPwd">
	<c:if test="${errors.newPwd }">새 암호를 입력하세요.</c:if>
</p>
<input type="submit" value="암호 변경" >
</form>
</body>
</html>




/*	board/WebContent/WEB-INF/view/changePwdSuccess.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>암호 변경</title>
</head>
<body>

암호를 변경했습니다.


</body>
</html>


-----------

/11.5 암호 변경 기능 테스트

로그인 후 암호변경 -> 여러가지 예외처리 잘되나 해보기



---------------------------------------------------------------------------------------------

//12 정리

*MVC 구조 : 핸들러와 뷰
*서비스 - DAO 구조

=>
MVC 구조는 일반적인 MVC 프레임워크에서 사용하는 구조와 동일
(차이점 : MVC 프레임워크가 보다 다양한 기능을 제공)

=>
핸들러(커맨드)-서비스-DAO 구조는 처음 웹 개발을 시작할 때 익히기 쉬운 구조.
(실제 현업에서 개발하는 많은 웹 어플리케이션이 이 구조를 사용하고 있으므로 이 구조에 충분히 익숙해 지기)









































