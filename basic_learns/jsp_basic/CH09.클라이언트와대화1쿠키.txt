-----------CH09. 클라이언트와 대화1 : 쿠키-----------------
;이장에서 다루는 내용
-쿠키란?
-쿠키 생성과 사용
-쿠키를 이용한 로그인 처리

웹서버는 쿠키를 이용해서 웹 브라우저에 정보를 전송할 수 있음.
---------------------------------------------------------------------------------------------

//쿠키 summary

- 쿠키 생성하기
Cookie cookie = new Cookie("이름","값");

- 쿠키 유효 시간 설정
cookie.setMaxAge(초단위);
->cookie.setMaxAge(24*60*60); //하루
->cookie.setMaxAge(0);

- 쿠키값 전송
response.addCookie(cookie);

- 쿠키값 가져오기
Cookie[] cookies = request.getCookies();


---------------------------------------------------------------------------------------------

//01 쿠키 사용하기

쿠키 동작 방식

			쿠키 저장소
1.쿠키 생성				요청-------> 웹 서버
						<--쿠키----- 응답
─────────────────────────────────
2.쿠키 저장    쿠키
─────────────────────────────────
3.쿠키 전송    쿠키         요청--쿠키--->

-쿠키 생성 단계 : 쿠키를 사용하려면 먼저 쿠키를 생성. JSP 프로그래밍에서는 쿠키는 웹 서버 측에서 생성
			  생성한 쿠키를 응답 데이터의 헤더에 저장해서 웹 브라우저에 전송
			  
-쿠키 저장 단계 : 웹브라우저는 응답 데이터에 포함된 쿠키를 쿠키 저장소에 보관한다. 쿠키의 종류에 따라 메모리나 파일에 저장한다.

-쿠키 전송 단계 : 웹 브라우저는 저장한 쿠키를 요청이 있을 때마다 웹 서버에 전송한다. 웹 서버는 웹 브라우저가 전송한 쿠키를 사용해서 
			  필요한 작업을 수행한다.
			  
=>웹 브라우저에 쿠키가 저장되면, 웹 브라우저는 쿠키가 삭제되기 전까지 웹 서버에 쿠키를 전송(웹 어플리케이션을 지속으로 유지해야하는 정보는
  쿠키를 사용해서 저장하면 된다.)

-----------

//1.1 쿠키의 구성

-이름 	: 각각의 쿠키를 구별하는 데 사용되는 이름
-값 		: 쿠키의 이름과 관련된 값
-유효시간 	: 쿠키의 유지 시간
-도메인	: 쿠키를 전송할 도메인
-경로		: 쿠키를 전송할 요청 경로

-----------

//1.2 쿠키 생성하기
<%
	Cookie cookie=new Cookie("cookieName","cookieValue");	//쿠키이름,쿠키값을 생성자로 전달.
	response.addCookie(cookie);		//response 기본 객체의 addCookie(); 메소드 호출
%>



/*   쿠키 생성의 예제   :makeCookie.jsp   */

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.net.URLEncoder" %>
<%
	Cookie cookie=new Cookie("name",URLEncoder.encode("최범균","utf-8"));
	response.addCookie(cookie);
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>쿠키생성</title>
</head>
<body>

<%=cookie.getName() %> 쿠키 값 ="<%= cookie.getValue() %>"

</body>
</html>

<< 실행 결과 >>
name 쿠키 값 ="%EC%B5%9C%EB%B2%94%EA%B7%A0" 


=>Cookie  클래스가 제공하는 메소드
String 	getName()					//쿠키 이름을 반환
String	getValue()					//쿠키 값을 반환
void	setValue(String value)		//쿠키 값을 지정
void	setDomain(String pattern)	//이 쿠키가 전송될 서버의 도메인을 지정한다.
String	getDomain()					//쿠키의 도메인을 반환
void	setPath(String uri)			//쿠키를 전송할 경로를 지정
String	getPath()					//쿠키의 전송 경로를 구한다.
void	setMaxAge(int expiry)		//쿠키의 유효시간을 초 단위로 지정한다. 음수를 입력할 경우 웹 브라우저가 닫힐때 쿠키삭제
int		getMaxAge()					//쿠키의 유효시간을 반환


-----------

//1.3 쿠키 값 읽어오기

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.net.URLDecoder" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>쿠키목록</title>
</head>
<body>
쿠키 목록<br>
<%
	Cookie[] cookies=request.getCookies();
	if(cookies!=null&&cookies.length>0){
		for(int i=0;i<cookies.length;i++){
%>
		<%= cookies[i].getName() %>=
		<%= URLDecoder.decode(cookies[i].getValue(),"utf-8") %> <br><!-- 인코딩해서 저장했으므로, 디코딩해서 값을 읽어야함. -->
<%		}
	}
	else
		out.println("쿠키가 존재하지 않습니다.");
%>

</body>
</html>



<< 실행 결과 >>
쿠키 목록
name= 최범균 
JSESSIONID= C4BEB1CA0DCDD2006BD4DBA0FAE04293 


=>
makeCookie.jsp를 실행하면 쿠키가 생성되는데, 그 이후에 웹 브라우저를 닫지 않고 viewCookies.jsp를 실행하면
위와 같이 makeCookie.jsp에서 생성한 name 쿠키를 읽어오는 것을 확인할 수 있다.

-----------

//1.4 쿠키 값 변경 및 쿠키 삭제하기
;쿠키 값을 변경하려면 같은 이름의 쿠키를 새로 생성해서 응답 데이터로 보내면 된다.

e.g) 이름이 "name"인 쿠키 값을 변경하기
Cookie cookie=new Cookie("name",URLEncoder.encode("새로운값","euc-kr"));
response.addCookie(cookie);
=>BUT 쿠키가 존재하지 않으면, 새로 생성하게 됨
==>
Cookie[] cookies=request.getCookies();
if(cookies!=null&&cookies.length>0){
	for(int i=0;i<cookies.length;i++){
		if(cookies[i].getName().equals("name")){
			Cookie cookie=new Cookie("name",URLEncoder.encode("새로운값","euc-kr"));
			response.addCookie(cookie);
		}
	}
}



/*  쿠키값을 변경하는 예제 : modifyCookie.jsp   */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.net.URLEncoder" %>
<%
Cookie[] cookies=request.getCookies();
if(cookies!=null&&cookies.length>0){
	for(int i=0;i<cookies.length;i++){
		if(cookies[i].getName().equals("name")){
			Cookie cookie=new Cookie("name",URLEncoder.encode("JSP프로그래밍","utf-8"));
			response.addCookie(cookie);
		}
	}
}
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>값 변경</title>
</head>
<body>

name 쿠키의 값을 변경합니다.

</body>
</html>



<< 실행 결과 : viewCookies.jsp >>
쿠키 목록
name= JSP프로그래밍 
JSESSIONID= C4BEB1CA0DCDD2006BD4DBA0FAE04293 

↑ 실행 순서 :
makeCookie.jsp >> viewCookies.jsp(name=최범균나옴) >>modifyCookie.jsp >> viewCookies.jsp(name=jsp프로그래밍 나옴)





/*  쿠키 삭제 예제 : deleteCookie.jsp   */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.net.URLEncoder" %>
<%
	Cookie[] cookies=request.getCookies();
	if(cookies!=null&&cookies.length>0){
		for(int i=0;i<cookies.length;i++){
			if(cookies[i].getName().equals("name")){
				Cookie cookie=new Cookie("name","");
				cookie.setMaxAge(0);
				response.addCookie(cookie);
			}
		}
	}
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>쿠키 삭제</title>
</head>
<body>

name 쿠키를 삭제합니다.

</body>
</html>


-----------

//1.5 쿠키의 도메인
;기본적으로 쿠키는 그 쿠키를 생성한 서버에만 전송된다.
e.g)
"http://javacan.somehos.com"에 연결해서 생성된 쿠키는 다른 사이트로 연결할 때에는 전송되지 않고
"http://javacan.somehos.com"에 연결할 때에만 전송된다.
BUT www.somehost.com 서버에서 생성한 쿠키를 mail.somehost.com, javacan.somehost.com 서버 전송할 경우가 생김
이럴 때 setDomain() 메소드를 사용!

1) .somehost.com
:점으로 시작하는 경우 관련 도메인에 모든 쿠키를 전송. 
=> .somehost.com으로 설정하면, mail.somehost.com, cafe.somehost.com, blog.somehost.com 등 모두 쿠키를 전송.

2) www.somehost.com
:특정 도메인에 대해서만 쿠키를 전송한다.

주의)setDomain()의 값으로 현재 서버의 도메인 및 상위 도메인만 전달할 수 있다.
e.g)JSP 페이지가 실행되는 서버의 주소가 mail.somehost.com이라고 가정
=>setDomain() 메소드를 통해 "mail.somehost.com"이나 ".somehost.com"이다. www와 같은 다른 주소값으로 주는 경우 쿠키는 생성X


/*   서로 다른 도메인 설정을 갖는 세 개의 쿠키를 생성하는 예제  */

//chap09\makeCookieWithDomain.jsp


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.net.URLEncoder" %>
<%
	Cookie cookie1=new Cookie("id","madvirus");
	cookie1.setDomain(".somehost.com");	
	response.addCookie(cookie1);	//도메인이 .somehost.com 인 id 쿠키를 추가.
	
	Cookie cookie2=new Cookie("only","onlycookie");
	response.addCookie(cookie2);	//도메인을 설정하지 않은 only 쿠키를 추가.
	
	Cookie cookie3=new Cookie("invalid","invaliedcookie");
	cookie3.setDomain("javacan.tistory.com");
	response.addCookie(cookie3);	//도메인이 javacan.tistory.com 인 invalid 쿠키를 추가.
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>쿠키 생성</title>
</head>
<body>

다음과 같이 쿠키를 생성했습니다 <br>
<%=cookie1.getName() %>=<%=cookie1.getValue() %>
[<%=cookie1.getDomain() %>]
<br>
<%=cookie2.getName() %>=<%=cookie2.getValue() %>
[<%=cookie2.getDomain() %>]
<br>
<%=cookie3.getName() %>=<%=cookie3.getValue() %>
[<%=cookie3.getDomain() %>]

</body>
</html>



<< 실행 결과 >>
1)javacan.somehost.com:8080/chap09/viewCookie.jsp
쿠키 목록
id = madvirus
only = onlycookie
JSESSIONID= 8D9E96E547F1AA24956F3155E3BE7BC

2)www.somehost.com:8080/chap09/viewCookie.jsp
쿠키 목록
id = madvirus
JSESSIONID= 8D9E96E547F1AA24956F3155E3BE7BC



위의 예제를 확인하기 위해 
c:\Windows\System32\drivers\etc\host 파일에 추가
127.0.0.1 javacan.somehost.com
127.0.0.1 www.somehost.com
127.0.0.1 otherdomain.com


====>
즉,
저장된 쿠키
[id 쿠키]="madvirus"(.somehost.com)
[only 쿠키]="onlyecookie" (null)
[invalid 쿠키]="invaliedcookie" (javacan.tistory.com)
------>
javacan.somehost.com 서버에서 실행  ---->	id,only 쿠키 저장 
www.somehost.com 서버에서 실행		---->	id 쿠키 저장
jvacan.tistory.com 서버에서 실행	---->	invalid 쿠키 저장
			


-----------

//1.6 쿠키의 경로
;도메인 : 쿠키를 공유할 도메인 범위 지정		//  경로 : 쿠키를 공유할 기준 경로를 지정
=>cookieInst.setPath(""); 메소드로 경로 설정 가능.

http://localhost:8080/chap09/path/viewCookies.jsp
=> URL에서 경로는 /chap09/path/viewCookies.jsp 이다.
=> 
Cookie cookie=new Cookie("name","value");
cookie.setPath("/chap09");
=>쿠키 경로를 /chap09 로 지정. => /chap09 또는 그 하위 경로에만 전송함.

/*     :setCookieWithPath.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.net.URLEncoder" %>
<%@ page import="java.net.URLDecoder" %>
<%
	Cookie cookie1=new Cookie("path1",URLEncoder.encode("경로:/chap09/path1","utf-8"));
	cookie1.setPath("/chap09/path1");
	response.addCookie(cookie1);
	
	Cookie cookie2=new Cookie("path2",URLEncoder.encode("경로:/","utf-8"));	
	response.addCookie(cookie2);
	
	Cookie cookie3=new Cookie("path3",URLEncoder.encode("경로:/","utf-8"));
	cookie3.setPath("/");
	response.addCookie(cookie3);
	
	Cookie cookie4=new Cookie("path4",URLEncoder.encode("경로:/chap09/path2","utf-8"));
	cookie4.setPath("/chap09/path2");
	response.addCookie(cookie4);	
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>쿠키 경로 지정</title>
</head>
<body>

다음과 같이 쿠키를 생성했습니다.<br>
<%=cookie1.getName() %>=<%=cookie1.getValue() %>
[<%=cookie1.getPath() %>]
<br>

<%=cookie2.getName() %>=<%= cookie2.getValue() %>
[<%=cookie2.getPath() %>]
<br>

<%=cookie3.getName() %>=<%= cookie3.getValue() %>
[<%=cookie3.getPath() %>]
<br>

<%=cookie4.getName() %>=<%= cookie4.getValue() %>
[<%=cookie4.getPath() %>]


</body>
</html>



<< 실행 결과 >>
다음과 같이 쿠키를 생성했습니다.
path1=경로:/chap09/path1 [/chap09/path1] 
path2=경로:/ [null] 
path3=경로:/ [/] 
path4=경로:/chap09/path2 [/chap09/path2] 


==>viewCookies로 다양하게 확인하기

<< 실행 결과 : chap09\path1\viewCookies.jsp
쿠키 목록
path2= 경로: 
path1= 경로:/chap09/path1
path3= 경로:/ 
JSESSIONID= 49C7A7AABA3938C8E3A6E3B51069D3D0 

<< 실행 결과 : chap09\path2\viewCookies.jsp
쿠키 목록
path4= 경로:/chap09/path2  
path3= 경로:/ 
JSESSIONID= 49C7A7AABA3938C8E3A6E3B51069D3D0 

==>일반적으로 쿠키는 웹 어플리케이션에 포함된 다수의 JSP 와 서블릿에서 사용하기 때문에, 쿠키 경로를 "/"으로 지정한다.

-----------

//1.7 쿠키의 유효시간
;쿠키는 유효시간을 갖는다.(유효 시간을 지정하지 않으면, 웹 브라우저를 종료하면 삭제됨)
=>setMaxAge() 메소드로 지정


/*   유효시간이 1시간인 쿠키 생성 예제 : makeCookieWithMaxAge.jsp*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
	Cookie cookie=new Cookie("oneh","1time");
	cookie.setMaxAge(60*1);	//60초(1분) * 60=1시간
	response.addCookie(cookie);
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>쿠키유효시간설정</title>
</head>
<body>

유효시간이 1시간인 oneh 쿠키 생성

</body>
</html>



==>1시간이내에는 쿠키가 유지됨.

==>아이디 기억하기 기능의 구현 방법
:아이디 기억하기 기능을 구현할 때 쿠키를 사용한다. 사용자가 로그인에 성공하면 아이디를 값으로 젖장하고 있는 쿠키의 
유효시간을 1달 정도로 여유롭게 잡아서 생성한다. 그러면 웹 브라우저를 닫더라도 유효시간이 충분히 남아 있기 때문에 다음에
웹 브라우저를 실행할때 아이디를 저장하고 있는 쿠키를 사용할 수 있다. 따라서 웹 프로그램은 아이디 쿠키가 존재하면
쿠키 값을 로그인 폼에 출력해서 아이디 기억하기 기능을 구현할 수 있다. 비슷한 방식으로 로그인 정보를 쿠키에 보관하면,
자동로그인을 구현할 수 있음.


-----------

//1.8 쿠키와 헤더
;response.addCookie()로 쿠키 추가 -> Set-Cookie 헤더를 통해 전달(한개의 Set-Cookie는 한개의 쿠키 값을 가짐)

-Set-Cookie 헤더의 구성
쿠키이름=쿠키값; Domain=도메인값; Path=경로값; Expires=GMT형식의만료일시

(쿠키는 응답 헤더를 사용해서 웹 브라우저에 전달하기 때문에, 쿠키 역시 출력 버퍼가 플러시 된 이휑는 새롭게 추가할 수 없다.
 =>쿠키는 출력 버퍼를 플러시 하기 전에 추가해야함!

---------------------------------------------------------------------------------------------

//02 쿠키 처리를 위한 유틸리티 클래스

특정 쿠기를 얻기 위해서는 아래와 같은 형태의 코드가 필요.
	Cookie[] cookies=request.getCookies();
	Cookie nameCookie=null;
	Cookie idCookie=null;
	if(cookies!=null&&cookies.length>0){
		for(int i=0;i<cookies.length;i++){
			if(cookies[i].getName().equals("name"))
				nameCookie=cookies[i];
			else if(cookies[i].getName().equals("name"))
				idCookie=cookies[i];
		}
	}
	String name=URLDecoder.decode(nameCookie.getValue(),"utf-8");
	String id=URLDecoder.decode(idCookie.getValue(),"utf-8");
==>코드가 길어짐.& 가져와야할 쿠키가 많으면, if-else 분기가 많아짐

/*   더욱 편리하게 쿠키를 사용하는 보조 유틸리트 클래스의 활용 : util/Cookies.java*/

package util;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.Cookie;
import java.util.Map;
import java.util.HashMap;
import java.net.URLEncoder;
import java.net.URLDecoder;
import java.io.IOException;

public class Cookies {
	private Map<String,Cookie> cookieMap=new HashMap<String,Cookie>();
	
	//생성자 : request 객체로 쿠키값들 읽어와서 HashMap에 저장
	public Cookies(HttpServletRequest request){
		Cookie[] cookies=request.getCookies();
		if(cookies!=null){
			for(int i=0;i<cookies.length;i++){
				cookieMap.put(cookies[i].getName(),cookies[i]);
			}
		}		
	}
	
	//name의 cookie 반환
	public Cookie getCookie(String name){
		return cookieMap.get(name);
	}
	
	//도메인 설정하지 않은 only 쿠키를 추가
	public String getValues(String name) throws IOException{
		Cookie cookie=cookieMap.get(name);
		if(cookie==null)
			return null;
		
		return URLDecoder.decode(cookie.getValue(),"euc-kr");		
	}
	
	//name의 쿠키가 있으면 true, 없으면 null 반환
	public boolean exists(String name){
		return cookieMap.get(name)!=null;
	}
	
	//이름이 name, 값이 value인 쿠키 생성 & 반환
	public static Cookie createCookie(String name,String value) throws IOException{
		return new Cookie(name,URLEncoder.encode(value,"utf-8"));
	}
	
	//이름 name, 값 value, 경로 path, 유효시간 maxAge인 Cookie 객체를 생성해서 리턴 
	public static Cookie createCookie(String name,String value,String path,int maxAge) throws IOException{
		Cookie cookie=new Cookie(name,URLEncoder.encode(value,"utf-8"));
		cookie.setPath(path);
		cookie.setMaxAge(maxAge);		
		return cookie;
	}
	
	//이름 name, 값 value, 도메인 domain, 경로 path, 유효시간 maxAge인 Cookie 객체를 생성해서 리턴 
	public static Cookie createCookie(String name,String value,String domain,String path,int maxAge) throws IOException{
		Cookie cookie=new Cookie(name,URLEncoder.encode(value,"utf-8"));
		cookie.setPath(path);
		cookie.setMaxAge(maxAge);	
		cookie.setDomain(domain);
		return cookie;
	}

}



-----------

//2.1 Cookies 클래스를 이용한 쿠키 생성


/*   Cookies.createCookie() 메소드를 사용해서 쿠키를 생성하는 코드 : makeCookieUsingCookies.jsp   */



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="util.Cookies" %>
<%
	response.addCookie(Cookies.createCookie("name","zac")); //매개변수로 이전에 정의한 Cookies 클래스를 활용
	response.addCookie(Cookies.createCookie("id","Zaccoding","/chap09",-1));
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

Cookies를 사용하여 쿠키 생성


</body>
</html>



-----------

// 2.2 Cookies 클래스를 이용한 쿠키 읽기
1.request 기본 객체로부터 쿠키 정보를 읽어온다.
2.쿠키가 존재하는지 확인 exists() 메소드
 2-1 Cookie클래스로 사용할 경우 getCookies(), getValue() 활용
 

/* makeCookieUsingCookies.jsp에서 저장한 쿠키 읽어오기 : readCookieUsingCookies.jsp  */ 

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="util.Cookies" %>
<%
	Cookies cookies=new Cookies(request);	//util.Cookies 인스턴스 하나 생성.
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Cookie 사용</title>
</head>
<body>

name 쿠키 = <%=cookies.getValue("name") %> <br>
<% if(cookies.exists("id")){ %>
id 쿠키 = <%=cookies.getValue("id") %><br>
<%	} 
%>
</body>
</html>


<< 실행 결과 >> 
name 쿠키 = zac 
id 쿠키 = Zaccoding



---------------------------------------------------------------------------------------------

//03 쿠키를 사용한 로그인 상태 유지
;로그인 상태를 확인할 때 가장 많이 사용하는 방법이 쿠키를 이용하는 것.
=>쿠키를 통해 로그인 유지하는 방법
1)로그인에 성공하면 특정 이름을 갖는 쿠키를 생성한다.
2)해당 쿠기가 존재하면 로그인한 상태라고 판단한다.
3)로그아웃하면 해당 쿠키를 삭제한다.

-----------

//3.1 로그인 처리


1.로그인 폼 설정
/*   chap09\member\loginForm.jsp   */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그인폼</title>
</head>
<body>

<form action="<%=request.getContextPath()%>/memebr/login.jsp" method="post">
아이디 <input type="text" name="id" size="10">
암호 <input type="password" name="password" size="10">
<input type="submit" value="로그인">
</form>

</body>
</html>


<< 실행 결과  >>
아이디 [   ]   암호 [   ]  [로그인]

=>아이디 암호 입력하고 로그인 클릭하면 login.jsp로 입력한 데이터 전송




/*   chap09\member\login.jsp   */



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="util.Cookies" %>
<%
	String id=request.getParameter("id");
	String password=request.getParameter("password");
	
	if(id.equals(password)){
		//ID와 암호가 같으면 로그인에 성공한 것으로 판단.
		response.addCookie(Cookies.createCookie("AUTH",id,"/",-1));
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그인 성공</title>
</head>
<body>
로그인에 성공했습니다.
</body>
</html>

<%
	}else{//로그인 실패시
%>
<script>
alert("로그인에 실패하였습니다.");
history.go(-1);
</script>
<%
	}
%>


==> 흐름
loginForm에서 아이디 , 암호 입력한 데이터를 login.jsp로 데이터 전송 
login.jsp에서 request기본 객체를 이용해서 전달 받은 아이디, 암호의 텍스트 값을 가져옴
로그인이 성공하면 이름이 AUTH란 쿠키 생성 // 아니면 실패 창 띄움


-----------

//3.2 로그인 여부 판단
;로그인에 성공하면 웹브라우저는 요청을 보낼 때마다 쿠키를 전송한다.
=>
Cookies cookies=new Cookies(request);
String id=cookies.getValue("AUTH");
if(id!=null){
	//로그인 한 경우 처리
	....
}else {
	//로그인 하지 않은 경우 처리
	..
}


/* login.jsp에서 생성한 AUTH 쿠키를 사용해서 로그인 여부를 판단 : chap09\memeber\loginCheck.jsp  */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="util.Cookies" %>
<%
	Cookies cookies=new Cookies(request);
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그인 여부 검사</title>
</head>
<body>

<%
	if(cookies.exists("AUTH")){
%>	아이디 "<%=cookies.getValue("AUTH")%>" 로 로그인 한 상태
	
<%
	}else {
		out.println("로그인하지 않은 상태");
	}
%>


</body>
</html>


<< 실행 결과 : loginForm.jsp 실행 Zac Zac으로 로그인 & loginCheck.jsp로 이동
아이디 "Zac" 로 로그인 한 상태 



=>AUTH 쿠키는 로그인한 아이디를 값으로 가졌는데, 이는 예를 위한 것.(보안상 문제 있음)
=>웹 브라우저는 자체적으로 개발 도구를 제공하고 있음.
=>위의 개발 도구를 사용하면, 쿠키 값을 쉽게 변경할 수 있고 쿠키 값을 변경해서 서버에 전송할 수 있음.
=>즉 다른 아이디로 서버에 접근할 수 있게 되는 것이다. 
=>아이디를 저장할 때에는 평문으로 저장하지 않고 다양한 암호화 방식을 혼합해서 저장한다.

-----------

//3.3 로그아웃 처리

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="util.Cookies" %>
<%
	response.addCookie(Cookies.createCookie("AUTH","","/",0));
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그아웃</title>
</head>
<body>

로그아웃하였습니다.
<form action="<%=request.getContextPath()%>/member/loginForm.jsp" method="post">
<input type="submit" value="홈으로">
</form>


</body>
</html>


---------------------------------------------------------------------------------------------

로그인 홈 > 로그인 확인 > 로그인 쿠키 가지고 check 페이지 이동 > 로그아웃 > 로그인 홈으로 이동하는 예제

1.loginForm.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그인폼</title>
</head>
<body>

<form action="<%=request.getContextPath()%>/member/login.jsp" method="post">
아이디 <input type="text" name="id" size="10">
암호 <input type="password" name="password" size="10">
<input type="submit" value="로그인">
</form>

</body>
</html>


2.login.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="util.Cookies" %>
<%
	String id=request.getParameter("id");
	String password=request.getParameter("password");
	
	if(id.equals(password)){
		//ID와 암호가 같으면 로그인에 성공한 것으로 판단.
		response.addCookie(Cookies.createCookie("AUTH",id,"/",-1));
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그인 성공</title>
</head>
<body>
로그인에 성공했습니다.
<form action="<%=request.getContextPath()%>/member/loginCheck.jsp" method="post">
<input type="submit" value="Check페이지 이동">
</form>
</body>
</html>

<%
	}else{//로그인 실패시
%>
<script>
alert("로그인에 실패하였습니다.");
history.go(-1);
</script>
<%
	}
%>


3.loginCheck.jsp


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="util.Cookies" %>
<%
	Cookies cookies=new Cookies(request);
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그인 여부 검사</title>
</head>
<body>

<%
	if(cookies.exists("AUTH")){
%>	아이디 "<%=cookies.getValue("AUTH")%>" 로 로그인 한 상태<br>
	<form action="<%=request.getContextPath()%>/member/logout.jsp" method="post">
	<input type="submit" value="로그아웃">
</form>
	
	
<%
	}else {
		out.println("로그인하지 않은 상태");
	}
%>


</body>
</html>




4.logout.jsp


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="util.Cookies" %>
<%
	response.addCookie(Cookies.createCookie("AUTH","","/",0));
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>로그아웃</title>
</head>
<body>

로그아웃하였습니다.
<form action="<%=request.getContextPath()%>/member/loginForm.jsp" method="post">
<input type="submit" value="홈으로">
</form>


</body>
</html>




















































