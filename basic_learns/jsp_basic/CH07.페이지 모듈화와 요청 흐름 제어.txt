-----------CH07.페이지 모듈화와 요청 흐름 제어-----------------
-<jsp:include> 액션 태그와 모듈화
-include 디렉티브
-<jsp:forward> 액션 태그를 이용한 흐름 이동
-기본 객체를 이용한 값 전달

---------------------------------------------------------------------------------------------
액션태그는 XML 형식을 따름
=> <jsp:forward>가 있으면 반드시 </jsp:forward> 가 있어야함
=> <jsp: //접두어 prefix가 붙음
=> 액션 태그를 사용하는 것이 코드의 가독성 높이고 더 깔끔함


---------------------------------------------------------------------------------------------
//01 <jsp:include> 액션 태그를 이용한 공통 영역 작성

p156 <jsp:include> 액션 태그 동작 방식 그림 보기
-main.jsp
[출력내용A]
<jsp:include page="sub.jsp" flush="false" />
[출력내용C]

-sub.jsp
[출력내용B]

1)main.jsp가 웹 브라우저의 요청을 받는다.
2)[출력 내용A]를 출력 버퍼에 저장한다.
3)<jsp:include>가 실행되면 요청 흐름을 sub.jsp로 이동한다.
4)[출력내용B]를 출력 버퍼에 저장한다.
5)sub.jsp의 실행이 끝나면 요청 흐름이 다시 main.jsp의 <jsp:include>로 돌아온다.
6)<jsp:include> 이후 부분인 [출력내용C]를 출력 버퍼에 저장한다.
7)출력 버퍼의 내용을 응답 데이터로 전송한다.

-----------

//1.1<jsp:include> 액션 태그 사용법
;<jsp:include page="포함할페이지" flush="true" />

=>
page 	: 포함할 JSP 페이지의 경로를 지정한다.
flush 	: 지정한 JSP 페이지를 실행하기 전에 출력 버퍼를 플러시할지 여부를 지정한다.
		(true이면 출력 버퍼를 플러시 하고, false이면 플러시 하지 않는다. 기본값 : false)

=>
flush를 true로하면, sub.jsp로 이동하기 전에 플러시하므로 헤더파일 정보가 전달된다. 
그래서 sub.jsp에서 response.setHeader()를 실행해도 헤더가 추가 되지 않는다.		
		
		
/*<jsp:include> 액션 태그를 사용한 예제 : main.jsp*/	
	
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- 블럭1 -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>main</title>
</head>
<body>
main.jsp에서 생성한 내용
<!-- 블럭1 끝 -->
<!-- 블럭2 시작 -->
<jsp:include page="sub.jsp" flush="false" />
<!-- 블럭2 끝 -->
<!-- 블럭3 시작 -->

include 이후의 내용.

</body>
</html>
<!-- 블럭3 끝 -->
		
		
/*sub.jsp*/		

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<p>
sub.jsp에서 생성한 내용.
</p>


==>main.jsp를 실행한 결과로 생성된 HTML 코드
<html>
<head>
<title>main</title>
</head>
<body>
main.jsp에서 생성한 내용

<p>
sub.jsp에서 생성한 내용
</p>


include 이후의 내용.

</body>
</html>


-----------

//1.2 <jsp:include> 액션 태그를 이용한 중복 영역 처리
;p.159 그림7.3 + 코드영역 보기

-같은 코드를 모든 JSP 페이지가 포함하고 있을 때 문제점
JSP1		|	JSP2		|	JSP3
상단코드		|	상단코드		|	상단코드
..			|	..			|	...
하단코드		|	하단코드		|	하단코드

ㅡㅡㅡㅡㅡ↓↓↓ 모든 JSP 페이지를 변경해줘야함. ↓↓↓

JSP1		|	JSP2		|	JSP3
변경상단코드	|	변경상단코드	|	변경상단코드
..			|	..			|	...
하단코드		|	하단코드		|	하단코드

==>
<jsp:include page="top.jsp" ... />	//top.jsp 상단 코드
...
<jsp:include page="left.jsp" ... />	//left.jsp 좌측 메뉴 코드
...
...
이 페이지가 보여줄 내용을 생성
..
..
<jsp:include page="bottom.jsp" ... />	//bottom.jsp 하단 코드


/* 상단 부분 : top.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
상단 메뉴:
<a href="/chap07/home.jsp">홈</a>
<a href="/chap07/info.jsp">정보</a>

/*하단 부분 : buttom.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
하단 메뉴:
소개 | 도움말 | 약관 | 사이트맵

/*좌측 부분 : left.jsp*/
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
좌측 메뉴:




/*페이지 공통 부분을 읽는 예제 : layout.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>layout1</title>
</head>
<body>

<table width="400" border="1" cellpadding="0" cellspacing="0">
<tr>
	<td colspan="2">
		<jsp:include page="/module/top.jsp" flush="false" />
	</td>
</tr>
<tr>	
	<td width="300" valign="top">
		<!-- 내용 부분 : 시작 -->
		레이아웃1
		<br><br><br>		
		<!-- 내용 부분 : 끝-->
	</td>
</tr>
<tr>
	<td colspan="2">
		<jsp:include page="/module/buttom.jsp" flush="false" />
	</td>
</tr>
</table>

</body>
</html>




/*tom,buttom은 같이 쓰고 left까지 추가한 예제 : layout2.jsp*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>layout2</title>
</head>
<body>

<table width="400" border="1" cellpadding="0" cellspacing="0">
<tr>
	<td colspan="2">
		<jsp:include page="/module/top.jsp" flush="false" />
	</td>
</tr>
<tr>	
	<td width="100" valign="top">
		<jsp:include page="/module/left.jsp" flush="false" />
	</td>
	<td width="300" valign="top">
		이부분은 layout2.jsp가 생성한다<br>
		레이아웃2
		<br><br><br>
	</td>
</tr>
<tr>
	<td colspan="2">
		<jsp:include page="/module/buttom.jsp" flush="false" />
	</td>
</tr>
</table>

</body>
</html>


=>HTML 태그
table : 1차원 이상의 데이터를 표의 형태로 나타냅니다.
	tr요소 : row (횡렬의 셀)로 정의
	th요소 : column (종렬의 셀)으로 제목셀을 정의
	td요소 : cell (표안의 항목)로 데이터셀을 정의
	caption요소 : 표의 제목을 정의
	thead요소 : 헤더행을 그룹화하여 정의
	tfoot요소 : 푸터행을 그룹화하여 정의
	tbody요소 : 본체행을 그룹화하여 정의
	col요소 : 열의 속성값과 스타일을 위한 그룹화
	colgroup요소 : 열의 구조적 그룹화. col요소를 포함할 수 있다.

-td :데이터 셀을 정의합니다.
	colspan : 해당 셀이 미치는 범위의 열 수를 지정합니다.
	rowspan : 해당 셀이 미치는 범위의 행 수를 지정합니다.
	headers : 해당 셀에 대응하는 헤더셀의 id 컨텐트 속성의 값을 지정합니다.


-----------

//1.3 <jsp:param>으로 포함할 페이지에 파라미터 추가하기

<jsp:include >
	<jsp:param name="" value=""/>
	..
</jsp:incldue>


/*파라미터를 다른 jsp로 넘기는 예제 : info.jsp*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>INFO</title>
</head>
<body>
<table width="100%" border="1" cellpadding="0" cellspacing="0">
<tr>
	<td>제품번호</td> <td>XXXX</td>
</tr>
<tr>
	<td>가격</td> <td>10,000원</td>
</tr>
</table>

<!-- infoSub.jsp에 이름이"type"이고 값이 "A"인 파라미터를 추가로 전달 -->
<jsp:include page="infoSub.jsp" flush="false">
	<jsp:param name="type" value="A" />
</jsp:include>

</body>
</html>



/*infoSub.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<%
	String type=request.getParameter("type");	//info.jsp에서 전달한 type 파라미터의 값을 읽어온다.
	if(type==null){
		return;
	}
%>
<br>
<table width="100%" border="1" cellpadding="0" cellspacing="0">
<tr>
	<td>타입</td>
	<td><b><%=type%></b></td>
</tr>
<tr>
	<td>특징</td>
<td>
<% if(type.equals("A")) {%>	//파라미터의 value랑 "A"랑 같으면
강한 내구성
<%	}else if(type.equals("B")){ %>	//파라미터의 value랑 "B"랑 같으면
뛰어난 내구성
<%	} %>
</td>
</tr>
</table>


=>
<jsp:include page="infoSub.jsp" flush="false">
	<jsp:param name="type" value="A" />
</jsp:include>
위의 type는 지역변수로 <jsp:include>의 영역에서만 유효함.


/*parameter 유효 범위 예제 : body_main.jsp*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<%
	request.setCharacterEncoding("utf-8");
%>

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>INFO</title>
</head>
<body>

include 전 name 파라미터 값 : <%=request.getParameter("name") %>

<hr>

<jsp:include page="body_sub.jsp" flush="false">
	<jsp:param name="name" value="최범균" />
	<jsp:param name="name" value="바보" />
</jsp:include>

</hr>

include 후 name 파라미터 값 : <%= request.getParameter("name") %>

</body>
</html>



/* body_sub.jsp */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
body_sub에서 name 파라미터 값 : <%=request.getParameter("name") %>
<br/>
name 파라미터 값 목록 : 
<ul>
<%
	String[] names=request.getParameterValues("name");
	for(String name : names){
%>
		<li><%=name%> </li>
<%
	}	
%>
</ul>



<< 실행 결과 1:http://localhost:8080/chap07/body_main.jsp >>
include 전 name 파라미터 값 : null
body_sub에서 name 파라미터 값 : 최범균 
name 파라미터 값 목록 : 
	.최범균 
	.바보 	
include 후 name 파라미터 값 : null


<< 실행 결과 2:http://localhost:8080/chap07/body_main.jsp?name=cbk >>
include 전 name 파라미터 값 : cbk 
body_sub에서 name 파라미터 값 : 최범균 
name 파라미터 값 목록 : 
	.최범균 
	.바보 
	.cbk 
include 후 name 파라미터 값 : cbk 

==>body_main_jsp.java 에서

 org.apache.jasper.runtime.JspRuntimeLibrary.include
(request, response, "body_sub.jsp" + "?" + org.apache.jasper.runtime.
JspRuntimeLibrary.URLEncode("name", request.getCharacterEncoding())+ "=" 
+ org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("zac", request.getCharacterEncoding()) 
+ "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("name", request.getCharacterEncoding())
+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("coding", request.getCharacterEncoding()), out, false);



-----------

//1.4<jsp:param> 액션 태그와 캐릭터 인코딩

<%
	request.setCharacterEncoding("utf-8");
%>
=>요청 파라미터의 캐릭터 셋을 지정
=><jsp param> 액션 태그는 포함할 페이지에 전달할 요청 파라미터의 값을 인코딩할때, request.setCharacterEncoding()
  메소드로 설정한 캐릭터 셋을 사용한다.

---------------------------------------------------------------------------------------------

//02 include 디렉티브를 이용한 중복된 코드 삽입
<jsp:include> 는 다른 JSP로 실행 흐름을 이동시켜 실행 결과를 현재 위치에 포함
include 디렉티브는 다른 파일의 내용을 현재위치에 삽입한 후에 JSP 파일을 자바 파일로 변경하고 컴파일하는 방식

-----------

//2.1 include 디렉티브의 처리 방식과 사용법
<%@ include file="포함할파일 %>

-file 속성을 이용한 컴파일 과정

main.jsp								sub.jspf
코드1								|		코드sub1
<%@ page file="sub.jspf" %>			|
코드2								|

1)
=>main.jsp의 page 디렉티브 위치에 포함할 페이지의 코드를 삽입시킨 결과를 자바코드로 작성
자바코드
코드1
코드sub1
코드2
2)
=>자바코드를 서블릿 클래스로 컴파일
서블릿클래스
...

/*include 간단한 예제 : includer.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>include 디렉티브</title>
</head>
<body>
<%
	int number=10;
%>

<%@ include file="/includee.jspf" %>

공통변수 DATAFOLDER="<%=dataFolder %>"

</body>
</html>



/* includee.jspf */	<<jsp파일로 작성가능, jspf=jsp fragment(소스 코드 조각)

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%> <!-- 포함되는 파일이라도, 콘텐츠 타입을 올바르게 해야함 -->
includer.jsp에서 지정한 번호 : <%= number%>
<p>
<%
	String dataFolder="c:\\data";
%>

<< 실행 결과 >>

includer.jsp에서 지정한 번호 : 10 
공통변수 DATAFOLDER="c:\data" 


=>
WAS는 include 디렉티브에서 지정한 파일의 코드를 포함한 JSP 코드를 자바코드로 변환해서 컴파일


-----------

//2.2 include 디렉티브의 활용

-모든 JSP 페이지에서 사용하는 변수 지정
-저작권 표시와 같이 모든 페이지에서 중복되는 간단한 문장

웹 어플리케이션의 다수 JSP페이지가 application 기본 객체나 session 기본 객체에 저장한 속성값을 읽어와 사용한다고 가정
=>
1)포함되는 파일 : 변수를 선언
<%
	String memberID=(String)session.getAttribute("MEMBERID");
	File tempFolder=(File)application.getAttribute("TEMPFOLDER");
%>

2)포함하는 파일 : include 디렉티브로 변수 선언 코드 삽입
<%@ include file="commonVariable.jspf"%>
...
<%=memberID%>
...
<%
	fw=new FileWriter(tempFolder,"name.tmp");
%>
.....

간단한 저작권 문장을 포함하고 있는 파일도 include 디렉티브로 읽을 수 있음
<%@ page contentType="text/html"; charset=utf-8" %>
이 사이트의 모든 저작물의 저작권은 홍길동에게 있습니다.

-----------

//2.3 코드 조각 자동 포함 기능

<%@ page contentType="text/html; charset=UTF-8"%>
<%@ include file="/common/variable.jspf" %>
<html>
...
<%@ include file="/common/footer.jspf" %>

이러한 코드 삽입 jsp파일이 여려개이면, 여러 JSP 파일 모두 코드를 삽입해야함
=>web.xml에 지정할 수 있음.
-<jsp-property-group>	: JSP의 프로퍼티를 포함한다.
-<url-pattern>			: 프로퍼티를 적용할 JSP 파일의 URL 패턴을 지정한다.(17장)
-<include-prelude>		: url-pattern 태그에 지정한 패턴에 해당하는 JSP 파일의 앞에 삽입할 파일을 지정한다.
-<include-coda>			: url-pattern 태그에 지정한 패턴에 해당하는 JSP 파일의 뒤에 삽입할 파일을 지정한다.



/*예제 */

/* chap07\WEB-INF\web.xml */

  <jsp-config>
  	<jsp-property-group>
  		<url-pattern>/view/*</url-pattern>
  		<include-prelude>/common/variable.jspf</include-prelude>
  		<include-coda>/common/footer.jspf</include-coda>  	
  	</jsp-property-group>
  </jsp-config> 
  
  
/* chap07\common\variable.jspf */  

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
	java.util.Date CURRENT_TIME=new java.util.Date();
%>



/* chap07\common\footer.jspf */  

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!-- 
	소스 코드 작성 : zaccoding
 -->
 
 
 
/* chap07\view\autoInclude.jsp */ 

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>자동 Include 실행</title>
</head>
<body>

현재 시간은 <%=CURRENT_TIME %> 입니다.

</body>
</html>



<< 실행 결과 >>
현재 시간은 Mon Oct 24 21:28:00 KST 2016 입니다. 

(소스코드 보기하면 주석 내용도 포함되어있음)



=>두 개 이상의 <jsp-property-group> 태그를 이용해서 자동으로 삽입 될 파일도 지정 가능.

  <jsp-config>
  	<jsp-property-group>
  		<url-pattern>/view/*</url-pattern>
  		<include-prelude>/common/variable.jspf</include-prelude>
  		<include-coda>/common/footer.jspf</include-coda>  	
  	</jsp-property-group>
  </jsp-config> 
  
    <jsp-config>
  	<jsp-property-group>
  		<url-pattern>*.jsp</url-pattern>
  		<include-prelude>/common/variable2.jspf</include-prelude>
  		<include-coda>/common/footer2.jspf</include-coda>  	
  	</jsp-property-group>
  </jsp-config> 

=>/view/autoInclude.jsp를 요청하면 이 요청은 위의 두 URL 패턴에 해당
=>autoInclude.jsp에는 variable.jspf, variable2.jspf 가 차례대로 삽입 & footer,footer2 도 삽입.

-----------

//2.4 <jsp:include> 액션 태그와 include 디렉티브의 비교

비교항목			<jsp:include>								include 디렉티브
──────────────────────────────────────────────────────────────────────────────────────────
처리시간			요청 시간에 처리							JSP파일을 자바 소스로 변환할 때 처리

기능				별도의 파일로 요청 처리 흐름을 이동			현재 파일에 삽입시킴

데이터 전달방법		request 기본 객체나 <jsp:param>을			페이지 내의 변수를 선언한 후, 변수에 값 저장
					이용한 파라미터 전달
				
용도				화면의 레이아웃의 일부분을 모듈화할 때 		다수의 JSP 페이지에서 공통으로 사용되는 변수를
					주로 사용									지정하는 코드나 저작권과 같은 문장을 포함한다.

---------------------------------------------------------------------------------------------


//03 <jsp:forwad> 액션 태그를 이용한 JSP 페이지 이동
;p177 그림 + 순서


-----------

//3.1 <jsp:forward> 액션 태그 사용법
<jsp:forward page="이동할 페이지"/>

/*예제*/

/* chap07\from\from.jsp */

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<%--
	<jsp:forwad> 액션 태그를 실행하면 생성했던 출력 결과는 모두 제거된다.
 --%>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>from.jsp의 제목</title>
</head>
<body>

이 페이지는 from.jsp가 생성한 것입니다.

<jsp:forward page="/to/to.jsp" />

</body>
</html>



/*  chap07\to\to.jsp    */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>to.jsp의 실행결과</title>
</head>
<body>

이 페이지는 to.jsp가 생성한 것입니다.

</body>
</html>


<< 실행 결과 >>
이 페이지는 to.jsp가 생성한 것입니다. 


=>
- from.jsp에서 <jsp:forward>를 사용해서 이동한 to.jsp가 생성한 결과가 웹 브라우저에 출력된다.
  (<jsp:forward> 액션 태그 다음 라인은 실행도 안됨)
- 웹 브라우저의 주소는 from.jsp 그대로이다. 즉, 리다이렉트처럼 to.jsp로 변경되지 않는다.



-----------

//3.2 <jsp:forward> 액션 태그와 출력 버퍼와의 관계

흐름 : 
from.jsp --> 출력 버퍼
<jsp:forward> --> 출력 버퍼 비움
to.jsp -->출력 버퍼 & flush -->웹 브라우저에 출력

=>
<jsp:forward> 액션 태그를 실행하기 전에 웹 브라우저에 데이터가 전송되면 안됨. & buffer 속성을 none으로 해도 안됨.


-----------

//3.3 <jsp:forward> 액션 태그의 활용

<jsp:forward> 활용의 예제 흐름
<%
	String forwardPage=null;
	
	//조건에 따라 이동할 페이지를 지정
	if(조건판단1)
		forwardPage="페이지URL1";
	else if(조건 판단2)
		forwardPage="페이지URL2";
	else if(조건 판단3)
		forwardPage="페이지URL3";
%>
<jsp:forward page="<%=forwardPage%>" />


=>
HTML 코드와 스크립트 코드가 섞이면 코드가 매우 복잡해 보임


---예제----


/*   chap07\select.jsp     */
//보고싶은 페이지 선택 : ㅁ 이동 나옴.


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>옵션 선택 화면</title>
</head>
<body>

<form action="<%=request.getContextPath() %>/view.jsp">

보고 싶은 페이지 선택 : 
	<select name="code">
		<option value="A">A 페이지</option>
		<option value="B">B 페이지</option>
		<option value="C">C 페이지</option>		
	</select>
	
<input type="submit" value="이동">

</form>

</body>
</html>



/*   view.jsp    */

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
	String code=request.getParameter("code");	//선택한 옵션을 code 변수에 저장
	String viewPageURI=null;					
	
	//code값에 따라 이동할 페이지 선택
	if(code.equals("A"))
		viewPageURI="/viewModule/a.jsp";
	else if(code.equals("B"))
		viewPageURI="/viewModule/b.jsp";
	else if(code.equals("C"))
		viewPageURI="/viewModule/c.jsp";
%>
<jsp:forward page="<%=viewPageURI %>" />	<!--  선택한 페이지로 이동 -->
	
	
/* 	chap07\viewModule\a.jsp    */

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>A페이지</title>
</head>
<body>

이 페이지는 <b><font size="5">A</font></b> 입니다.

</body>
</html>
/* 	chap07\viewModule\b.jsp    */
/* 	chap07\viewModule\c.jsp    */
==>b.jsp , c.jsp 는 위와 같음


-----------

//3.4 <jsp:param> 액션 태그를 이용해서 이동할 페이지에 파라미터 추가하기

<jsp:forward page="moveTo.jsp">
	<jsp:param name="first" value="coding" />
	<jsp:param name="last" value="Zac" />
</jsp:forward>
=>
<jsp:include>와 동일!


---------------------------------------------------------------------------------------------

//04 <jsp:include>와 <jsp:forward> 액션 태그의 page 속성 경로

위의 두 액션 태그는 page 속성을 사용해서 포함시키거나 이동할 페이지의 경로를 지정한다.
 -웹 어플리케이션 폴더를 기준으로 한 절대 경로
 -현재 JSP 페이지를 기준으로 한 상대 경로

-파일 구조
────────────────────
	  chap07
┬────────┴────┬─  
to			from
to.jsp		from.jsp
────────────────────

-from.jsp에서 jsp:forward로 to.jsp로 이동할 때
1)절대 경로
<jsp:forward page="/to/to.jsp" />
=> '/'로 시작하면 절대 경로가 됨. 맨 앞의 '/'가 절대 경로의 기준점인 웹 어플리케이션 폴더를 의미(위의 예제는 chap07)
=> OS 상관없이 경로를 구분할 때에는 '/'를 사용.

2)상대경로
from을 기준으로 to\to.jsp 나타내기
<jsp:forward page="../to/to.jsp" />

---------------------------------------------------------------------------------------------

//05 기본 객체의 속성을 이용해서 값 전달하기
;<jsp:include> 와 <jsp:forward>는 <jsp:param> 을 통해 파라미터를 추가로 전달 가능.
but <jsp:param>은 String 타입의 값만 전달할 수 있음.

=>포함하거나 이동할 페이지는 동일한 요청 범위(request 범위)를 갖는다.
=>request 기본 객체는 한 번의 요청에 대해 유효하게 동작하며 한 번의 요청을 처리하는데 사용되는 모든 JSP에서 공유

1)(in from.jsp)
request.setAttribute(이름1,값1);
request.setAttribute(이름2,값2);

2)
from.jsp ────────────────> to.jsp
			 request
			<이름1,값1>
			<이름2,값2>
			
3)(in to.jsp)
Object value1=request.getAttribute(이름1);			
Object value2=request.getAttribute(이름2);


---예제----

/*   chap07\from\makeTime.jsp   */

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.Calendar" %>
<%
	Calendar cal=Calendar.getInstance();
	request.setAttribute("time",cal);
%>
<jsp:forward page="/to/viewTime.jsp" />


/*   chap07\to/viewTime.jsp   */

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.Calendar" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>현재 시간</title>
</head>
<body>

<%
	Calendar cal=(Calendar)request.getAttribute("time");
	out.print("현재 시간은 : "+cal.get(Calendar.HOUR)+"시 ");
	out.print(cal.get(Calendar.MINUTE)+"분 ");
	out.print(cal.get(Calendar.SECOND)+"초 입니다.");
%>


</body>
</html>



<< 실행 결과 >>
현재 시간은 : 10시 36분 55초 입니다. 


-----------
-----------
-----------
-----------
-----------
-----------










































