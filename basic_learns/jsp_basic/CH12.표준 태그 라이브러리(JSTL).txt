-----------CH12.표준 태그 라이브러리(JSTL)-----------------
;이장에서 다루는 내용
-변수 지원 태그
-흐름 제어 태그
-URL 처리 태그
-출력 태그
-국제화 태그
-함수
=>커스텀 태그 중 많이 사용되는 것들을 모아서 JSTL(JSP Standard Tag Library)이라는 표준을 만듬

---------------------------------------------------------------------------------------------

//01 JSTL 이란

기존
<%
	if(list.size()>0){
		for(int i=0;i<list.size();i++){
			Data data=(Data)list.get(i);
%>
	<%= data.getTitle()%>
	...
<%
		}
	}else {
%>
	데이터가 없습니다.
<%
	}
%>

==>JSP는 실행 코드와 화면을 구성하는 HTML 코드를 쉽게 섞을 수 있어서 개발이 편리
==>BUT 스크립트 코드와  HTML 코드가 섞이면서 코드의 가독성을 떨어짐.
==>JSP는 <jsp:include>, <jsp:useBean>과 같은 액션 태그를 제공하는데, 이와 비슷하게 커스텀 태그도 
   특수한 기능을 수행하도록 작성 할 수 있음.
==>JSP 페이지에서 많이 사용되는 논리적인 판단, 반복처리, 포멧 처리를 위한 커스텀 태그를 표준으로 만들어서 
   정의한 것이 JSTL(JSP Standard Tag Library)
   
-----------

//1.1JSTL이 제공하는 태그의 종류

라이브러리		주요기능		접두어		관련URI
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
			변수지원
코어			흐름제어		c			http://java.sun.com/jsp/jstl/core
			URL 처리
			
			XML 코어
XML			흐름 제어		x			http://java.sun.com/jsp/jstl/xml	
			XML 변환

			지역
국제화		메시지 형식	fmt			http://java.sun.com/jsp/jstl/fmt
			숫자 및 날짜 형식

데이터베이스	SQL			sql			http://java.sun.com/jsp/jstl/sql

함수			컬렉션처리		fn			http://java.sun.com/jsp/jstl/functions
			String 처리
			

=>코어,국제화,함수 라이브러리를 많이 사용함
=>접두어는 JSP 페이지가 커스텀 태그를 호출할 때 사용.(다른 문자열도 가능)
=>관련 URI는 JSTL이 제공하는 커스텀 태그를 구분해주는 식별자이다.
			
-----------

//1.2 JSTL 라이브러리 받기

---------------------------------------------------------------------------------------------

//02 코어 태그
;코어 태그 라이브러리는 변수 설정,if-else 와 같은 논리 처리에 사용되는 스크립트 코드를 대체하는 태그를 제공
기능분류		태그			설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
변수지원		set			JSP에서 사용할 변수를 설정한다.
			remove		설정한 변수를 제거한다.

흐름제어		if			조건에 따라 내부 코드를 수행한다.
			choose		다중 조건을 처리할 때 사용된다.
			forEach		컬렉션이나 Map의 각 항목을 반복 처리할 때 사용된다.
			forTokens	구분자로 분리된 각각의 토큰을 처리할 때 사용된다.

URL 처리		import		URL을 사용하여 다른 자원의 결과를 삽입한다.			
			redirect	지정한 경로로 리다이렉트 한다.
			url			URL을 재작성 한다.

기타 태그		catch		익셉션을 처리할 때 사용한다.
			out			JspWriter에 내용을 출력한다.
			
			
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
=>prefix : JSP 코드에서 코어 태그 라이브러리를 호출할 때 사용할 접두어
=>uri : 위의 표와 동일

-----------

//2.1변수 지원 태그
;변수 지원 태그는 JSTL이 지원하는 태그에서 사용할 수 있는 변수를 설정하기 위해 사용한다.(set,remove 태그)

----

//2.1 <c:set> 태그
<c:set var="변수명" value="값" [scope="영역] />
<c:set var="변수명" [scope="영역]>값</c:set>

=>
-var : 값을 저장할 EL 변수 이름을 지정한다.
-value : 변수의 값을 지정한다. 표현식,EL,정적인 텍스트를 사용해서 값을 지정할 수 있다.
-score : 변수를 저장할 영역을 지정한다. 값은 page,request,session,application 중 하나가 온다.(default : page)

e.g)
<%
	pageContext.setAttribute("msg","Hello");
%>
==
<c:set var="msg" value="hello" scrop="page"/>


e.g1)EL변수를 서정하는 다양한 예

<%-- value 속성 사용 예 --%>
<c:set var="name" value="최범균" />
<c:set var="name" value="<%=m.getFirstName()%>" scope="request" />
<c:set var="name" value="${m.lastName} ${m.firstName}" />

<%-- 태그의 몸체를 값으로 사용하는 예 --%>
<c:set var="name">최범균</c:set>
<c:set var="name"><%=m.getLastName()%> <%=m.getFirstName()%> </c:set>
<c:set var="name">${m.lastName} ${m.firstName} </c:set>


e.g2)객체의 프로퍼티 값을 설정
<c:set target="대상" property="프로퍼티이름" value="값" />
<c:set target="대상" property="프로퍼티이름">값 </c:set>

=>
-target : 프로퍼티 값을 설정할 대상 객체를 지정한다. 표현식(<%=변수%>)이나 EL 변수(${varName})를 사용할 수 있다.
		  대상 객체는 자바빈 객체나 Map이어야 한다.
-property : 설정할 프로퍼티의 이름을 지정한다. target이 자바빈 객체인 경우 프로퍼티 target 객체는 setName()메소드를
			제공해야 한다. Map인 경우 Map.put(프로퍼티이름,값)을 이용해서 값을 설정한다.
-value : 프로퍼티의 값을 지정한다.

e.g)프로퍼티 값을 설정하기 위한 <c:set> 태그의 사용
<% Member member=new Member(); %>
<c:set target="<%=member%>" property="name" value="최범균1" />  <%-- == member.setName("최범균1") 과 동일 --%>
<%= member.getName()%>	<%-- 값 최범균1 출력 --%>

<c:set var="m" value="<%=member%>" /> 
<c:set target="${m}" property="name" value="최범균2" /> <%-- == member.setName("최범균2") 과 동일 --%>
${m.name}	<%-- 값 최범균2 출력 -->

<% Map<String,String> prop=new HashMap<String,String>(); %>		
<c:set target="<%=prop%>" property="host" value="localhost" />	<%-- prop.set("host","localhost")와 동일--%>
<%= prop.get("host") %>	<%-- 값 localhost 출력 -->

=>주의
target 대상이 EL 변수인 경우 target 속성의 값을 ${member}와 같이 EL을 이용해서 설정
(<c:set target="member" property="name" value="최범균2" /> X)

Note)
<c:set> 태그에서 value 속성의 값을 null로 설정할 수 있음
(변수의 값을 설정하는 <c:set>태그는 PageContext.removeAttribute(변수명,scope)를 이용해서 변수를 삭제)
(자바빈 객체인 경우 프로퍼티 값을 null로 처리 // Map인 경우 프로퍼티 이름에 해당하는 키를 Map에서 삭제


<< 요약 >>
속성			표현식/EL		타입			설명
var			사용 불가		String		EL 변수 이름
value		사용 가능		Object		변수에 할당할 값
scope		사용 불가		String		변수를 생성할 영역. 기본값은 page
target		사용 가능		Object		프로퍼티 값을 설정할 객체 지정
property 	사용 가능		String		프로퍼티 이름

----

//2.1.2 <c:remove> 태그
;remove 태그는 set 태그로 지정한 변수를 삭제할 때 사용
( <c:remove var="varName" [scope="영역"] />  )

=>삭제할 변수의 scope를 지정하지 않으면, 동일한 이름으로 저장된 모든 영역의 변수를 삭제

e.g)
<c:set var="name" value="최범균" scope="request" />
<c:set var="name" value="최범균" scope="session" />
<c:remove var="name" />

=>request,session에 각각 name,최범균 저장 & 둘다 삭제

<< 요약 >>
속성		표현식/EL		타입			설명
var		사용 불가		String		삭제할 EL 변수 이름
scope	사용 불가		String		삭제할 변수가 포함된 영역

-----------

//2.2 흐름 제어 태그
;if-else 블록이나 for 반복문 등을 조금만 중첩해서 사용해도 <% %>, {,} 등이 복잡
=>if,choose,forEach,forTokens 네 가지의 JSTL이 제공하는 흐름 제어 태그

----
//2.2.1 <c:if> 태그
;if-else 처럼 중첩된 효과를 낼 순 없지만 단순한 if 블록을 대체할 수 있음
<c:if test="조건">
...
</c:if>

=>test 속성은 true나 false에 해당하는 값이 옴. (표현식이나 EL 또는 정적 문자열을 값으로 가질 수 있음 // Deferred Expression X)

e.g)
1)<c:if test="true">..</c:if>
=>항상 true. 몸체 내용 실행
2)<c:if test="some text"> .. </c:if>
=>항상 false. 몸체 내용 실행하지 않음
3)<c:if test="${expr}"> .. </c:if>
=>EL의 결과값이 true인 경우 몸체 내용 실행
4)<c:if test="<%=expr%>"> .. </c:if>
=>표현식의 결과값이 true인 경우 몸체 내용 실행

e.g) <c:if> 태그의 test 속성의 계산 결과를 var 속성으로 지정한 EL 변수에 저장하는 예
<c:if test="<%=someCondition%>" var="testResult">
...
</c:if>
테스트 조건 검사 결과는 ${testResult}입니다.


/*chap12\use_if_tag.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>if 태그</title>
</head>
<body>

<c:if test="true">
무조건 수행<br>
</c:if>

<c:if test="${param.name=='bk'}">
name 파라미터의 값이 ${param.name} 입니다.<br>
</c:if>

<c:if test="${18<param.age}">
당신의 나이는 18세 이상입니다.
</c:if>

</body>
</html>



<< 실행 결과 : http://localhost:8080/chap12/use_if_tag.jsp?name=bk>>
무조건 수행
name 파라미터의 값이 bk 입니다.



<< 요약 >>
속성		표현식/EL		타입			설명
test	사용 가능		boolean		검사 조건
var		사용 불가		String		검사 조건의 계산 결과값을 저장할 EL 변수
scope	사용 불가		String		삭제할 변수가 포함된 영역

----

//2.2.2 <c:choose>,<c:when>,<c:otherwise> 태그
;<c:choose>는 switch 구문과 if-else 블록을 혼합한 형태
<c:choose>
	<c:when test="${member.level=='trial'}">
	...
	</c:when>

	<c:when test="${member.level=='regular'}">
	...
	</c:when>

	<c:when test="${member.level=='provider'}">
	...
	</c:when>

	<c:otherwise>
	...
	</c:otherwise>
</c:choose>


/* <c:choose>태그 활용 예제 : use_choose_tag.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>choose 태그</title>
</head>
<body>

<ul>
<c:choose>
	<c:when test="${param.name=='bk'}">
		<li>당신의 이름은 ${param.name} 입니다.
	</c:when>
	
	<c:when test="${param.age>=20}">
		<li>당신은 20세 이상입니다.
	</c:when>
	
	<c:otherwise>
		<li>당신은 'bk'가 아니고 20세 이상이 아닙니다.
	</c:otherwise>

</c:choose>
</ul>
</body>
</html>


<< 실행 결과 : http://localhost:8080/chap12/use_choose_tag.jsp?age=20 >>
?당신은 20세 이상입니다. 


<< 실행 결과 : http://localhost:8080/chap12/use_choose_tag.jsp?name=bk >>
?당신의 이름은 bk 입니다. 

<< 실행 결과 : http://localhost:8080/chap12/use_choose_tag.jsp >>
?당신은 'bk'가 아니고 20세 이상이 아닙니다. 

----

//2.2.3 <c:forEach> 태그
;배열,Collection 또는 Map에 저장되어 있는 값들을 순차적으로 처리할 때 사용
<c:forEach var="변수 이름" items="아이템(배열과 같은 집합체)">
	..
	<tr>
		<td align="right" bgcolor="#ffffff">
		${변수사용}
		</td>
	..
</c:forEach>

=>items 속성에는 Map,배열,Collection이 가능(기본 데이터 타입은 래퍼 클래스를 사용해서 처리)

e.g)begin과 end를 이용해 for 구문처럼 사용하기
<c:forEach var="i" begin="1" end="10">
	${i}사용
</c:forEach>

=>1~10까지

e.g)step 속성값 이용하기
<c:forEach var="i" begin="1" end="10" step="2">
	${i}사용
</c:forEach>

=>1,3,5,7,9 까지

e.g)정수형 배열에서 2~4번 인덱스의 값을 참고하는 예제
<c:forEach var="i" items="${intArray}" begin="2" end="4">
[${i}]
</c:forEach>


=>List,Iterator,Enumeration,Map에서도 begin,end 속성 가능(Iterator,Enumeration,Map의 경우 삽입한 순서와
읽어오는 순서가 일치하지 않을 수도 있다)


=>items 속성값으로 List와 같은 컬렉션이나 배열을 전달한 경우, forEach 태그의 몸체에서 현재 사용하는 항목의 인덱스 값을
  사용해야 할 때가 있다. 이 경우 varStatus 속성을 이용해서 인덱스 값을 사용할 수 있음

e.g)
<c:forEach var="item" items="<%=someItemList%>" varStatus="status">
${status.index+1} 번째 항목 : ${item.name}
</c:forEach>

=>varStatus 속성에 명시한 변수가 제공하는 프로퍼티
-index 	: 루프 실행에서 현재 인덱스
-count 	: 루프 실행 횟수
-begin 	: begin 속성값
-end	: end 속성값
-step	: step 속성값
-first	: 현재 실행이 첫 번째 실행인 경우 true
-last	: 현재 실행이 루프의 마지막 실행인 경우 true
-current: 컬렉션 중 현재 루프에서 사용할 객체


/*	e.g ) 	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>영화 목록</title>
</head>
<body>
<%
	String[] movieList = {"타이타닉","무간도","트로이","아저씨"};
	pageContext.setAttribute("movieList",movieList);
%>
<c:forEach var="movie" items="${movieList}">
	${movie}<br>
</c:forEach>

<table border="1" style="width:80%; text-align:center;">
	<tr>
		<th>first/last</th>	<th>index</th>		<th>count</th>		<th>movie</th>
	</tr>
<c:forEach var="movie" items="${movieList}" varStatus="status">
	<tr>
		<td>
			<c:choose>
				<c:when test="${status.first}">first</c:when>
				<c:when test="${status.last}">last</c:when>
				<c:otherwise>not first&last</c:otherwise>			
			</c:choose>						
		</td>
		<td>${status.index}</td>
		<td>${status.count}</td>
		<td>${movie}</td>
	</tr>
</c:forEach>

<h2>처음 리스트만 강조하기</h2>
<ul>
	<c:forEach var="movie" items="${movieList}" varStatus="status">
		<c:choose>
			<c:when test="${status.first}">
				<li style="font-weight:bold;color:red;">${movie}</li>		
			</c:when>
			<c:otherwise>
				<li>${movie}</li>		
			</c:otherwise>
		</c:choose>		
	</c:forEach>
</ul>
<hr>

<h2>마지막 리스트 ,없애기</h2>
	<c:forEach var="movie" items="${movieList}" varStatus="status">
		<c:choose>
			<c:when test="${status.last}">
				${movie}
			</c:when>
			<c:otherwise>
				${movie} ,
			</c:otherwise>
		</c:choose>	
	</c:forEach>
<hr>

</table>
</body>
</html>



/*<c:forEach> 태그의 다양한 사용 예제 :  use_foreach_tag.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.HashMap" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<%
	HashMap<String,Object> mapData=new HashMap<String,Object>();
	mapData.put("name","최범균");
	mapData.put("today",new java.util.Date());
%>
<c:set var="intArray" value="<%=new int[] {1,2,3,4,5} %>" />
<c:set var="map" value="<%=mapData %>" />

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>forEach 태그</title>
</head>
<body>

<h4>1)1부터 100까지 홀수의 합</h4>
<c:set var="sum" value="0" />
<c:forEach var="i" begin="1" end="100" step="2">
<c:set var="sum" value="${sum+i }"/>
</c:forEach>
결과 = ${sum}<br>

<h4>2)구구단 :4단 </h4>
<ul>
<c:forEach var="i" begin="1" end="9">
	<li>4*${i}=${4*i}
</c:forEach>
</ul>


<h4>3)int형 배열</h4>
<%-- 배열 intArray의 인덱스 2부터 4까지의 요소의 값을 변수 i에 저장. 루프 상태 값을 변수 status에 저장--%>
<c:forEach var="i" items="${intArray}" begin="2" end="4" varStatus="status"> 
	${status.index}-${status.count}-[${i}] <br/>
</c:forEach>

<h4>4)Map</h4>
<c:forEach var="i" items="${map}">	<%--Map의 각 원소를 나타내는 Map.Entry를 i에 저장 --%>
	${i.key}=${i.value}<br>
</c:forEach>


</body>
</html>


/*<c:forEach> 태그의 다양한 사용 예제 :  17_forEachList*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title> </title>
</head>
<body>

<h2>1~10까지 숫자 출력</h2>
<c:forEach var="cnt" begin="1" end="10" varStatus="status">
	${cnt} <c:if test="${not status.last}">,</c:if>
</c:forEach>
<hr>
<br><br>

<table border="1" style="width:80%; text-align:center">
	<tr>
		<th>index</th>	<th>count</th>	<th>cnt</th>
	</tr>
	<c:forEach var="cnt" begin="7" end="10" varStatus="status">
		<tr>
			<td>${status.index}</td>
			<td>${status.count}</td>
			<td>${cnt}</td>
		</tr>
	</c:forEach>
</table>
<br><br>
<table border="1" style="width:80%; text-align:center">
	<tr>
		<th>index</th>	<th>count</th>	<th>cnt</th>
	</tr>
	<c:forEach var="cnt" begin="1" end="9" step="2" varStatus="status">
		<tr>
			<td>${status.index}</td>
			<td>${status.count}</td>
			<td>${cnt}</td>
		</tr>	
	</c:forEach>
</table>

</body>
</html>


<< 실행 결과 >>
1)1부터 100까지 홀수의 합

결과 = 2500

2)구구단 :4단 

?4*1=4 
?4*2=8 
?4*3=12 
?4*4=16 
?4*5=20 
?4*6=24 
?4*7=28 
?4*8=32 
?4*9=36 

3)int형 배열

2-1-[3] 
3-2-[4] 
4-3-[5] 

4)Map

today=Thu Nov 03 19:06:39 KST 2016
name=최범균




<< 요약 >>
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
속성			표현식/EL		타입			설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
var			사용불가		String		몸체에서 사용할 EL 변수이름

items		사용가능		Collection,	
						Iterator,	반복 처리할 데이터
						Enumeration,
						Map,배열

varStatus	사용불가		String		루프 상태를 저장할 EL 변수 이름
begin		사용가능		int			시작 인덱스 값
end			사용가능		int			끝 인덱스 값
step		사용가능		int			인덱스 증분 값

----

//2.2.4 <c:forTokens>태그
;forTokens 태그는 java.util.StringTokenizer 클래스와 같은 기능을 제공

<c:forTokens var="token" item="문자열" delims="구분자>
	${token}의 사용
</c:forTokens>




/* 콤마(,)와 닷(.)을 구분자로 사용해서 문자열에서 토큰을 추출하는 예 : use_forTokens.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>forTokens 태그</title>
</head>
<body>

콤마와 점을 구분자로 사용 : <br>
<c:forTokens var="token" items="빨간색,주황색.노란색.초록색,파랑색,남색.보라색" delims=",.">
${token}
</c:forTokens>

</body>
</html>


<< 실행 결과 >>
콤마와 점을 구분자로 사용 : 
빨간색 주황색 노란색 초록색 파랑색 남색 보라색 

-----------

//2.3 URL 처리 태그
- URL 생성 : <c:url> 태그
- 리다이렉트 처리 : <c:redirect> 태그
- 다른 페이지 변수 저장 : <c:import> 태그
-----------

//2.3.0 <c:import> 태그
<c:import url="URL" [var="변수 이름"] [scope="영역"] [charEncoding="charEncoding"]>
</c:import>


/* 02_el.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>표현식 예제</title>
</head>
<body>

정수형 : ${5+2} <br>
실수형 : ${5.6} <br>
문자열 : ${"Zac"} <br>
논리형 : ${true} <br>
null : ${null} <br>

${3==3} ${3 eq 3 }
<br>
<%
	String name = null;
	String str = "";
%>
${empty name}
${empty str }
<br>
</body>
</html>

/*	19_jstlUrl.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

<c:import url="http://localhost:8080/web-study-07/02_el.jsp" var="data"></c:import>
${data}

</body>
</html>


//2.3.1 <c:url> 태그
;URL을 생성해주는 기능을 제공
<c:url value="URL" [var="varName"] [scope="영역"] >
	<c:param name="이름" value="값" />
</c:url>

=>var 속성 지정 : 해당 변수에 생성한 URL을 저장 // var 생략 : 현재 위치에 생성한 URL을 출력
=><c:param> 태그를 이용해서 파라미터를 URL에 추가할 수 있다.

=>value 속성(절대 URL // 상대 URL)
-절대 URL : http://javacan.tistory.com/100 과 같은 완전한 URL
-상대 URL :	-웹 어플리케이션 내에서 절대 경로 : 슬래시로 시작 e.g)/view/list.jsp
			-현재 JSP에 대한 상대 경로 : 슬래시로 시작하지 않음 e.g)../view/list.jsp

=>웹 어플리케이션 내에서의 절대 경로를 사용할 경우 실제로 생성되는 URL은 컨텍스트 경로를 포함
e.g)컨텍스트 경로 : /chap12
<c:url value="/view/list.jsp"/>
=>/chap12/view/list.jsp		<<생성하는 URL


/*	사진 url 사용하기	20_jstlUrl.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

<c:url value="images/11.jpg" var="data"></c:url>
<h3>${data}</h3>
<img src="${data}" width='150' height='150'>

</body>
</html>

<< 실행 결과 : WebContent\images\11.jsp 넣어야함	>>


			
			
/*   use_url_tag.jsp   */			


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

<c:url value="http://search.daum.net/search" var="searchUrl">
	<c:param name="w" value="blog" />
	<c:param name="q" value="공원" />
</c:url>

<ul>
	<li>${searchUrl}</li>
	<li><c:url value="/use_if_tag.jsp"/></li>
	<li><c:url value="./use_if_tag.jsp"/></li>	
</ul>

</body>
</html>



<< 실행 결과 >>
*http://search.daum.net/search?w=blog&q=%ea%b3%b5%ec%9b%90
*/chap12/use_if_tag.jsp
*./use_if_tag.jsp


<< 요약 >>
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
속성		표현식/EL		타입			설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
value	사용가능		String		읽어올 URL
var		사용불가		String		읽어온 결과를 저장할 변수 이름
scope	사용불가		String		변수를 저장할 영역

-----------

//2.3.2 <c:redirect> 태그
;response.sendRedirect()처럼 지정한 페이지로 리다이렉트 시켜주는 기능을 제공
<c:redirect url="URL" [context="컨텍스트경로"]>
	<c:param name="이름" value="값"/>
</c:redirect>


가정 : 현재 컨텍스트 경로 : chap12/
e.g)/chap12/use_c_set.jsp로 리다이렉트 하기
<c:redirect url="/use_c_set.jsp" />

e.g)/chap15/viewToday.jsp로 리다이렉트하기
<c:redirect url="/viewToday.jsp" context="/chap15" />

e.g)<c:param> 태그를 이용해서 파라미터 설정하기
<c:redirect url="http://search.daum.net/search">
	<c:param name="w" value="blog" />
	<c:param name="q" value="보라매 공원" />
</c:redirect>

=><c:redirect>를 실행하면 그 이후의 코드는 실행되지 않는다.



/* redirect를 이용해 use_if_tag.jsp의 파라미터 넘기기 : use_redirect_tag.jsp*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

<c:redirect url="/use_if_tag.jsp" >
	<c:param name="name" value="bk"/>
	<c:param name="age" value="20"/>
</c:redirect>

</body>
</html>


<< 실행 결과 >>
무조건 수행
name 파라미터의 값이 bk 입니다.
당신의 나이는 18세 이상입니다.

+ url 
: http://localhost:8080/chap12/use_if_tag.jsp?name=bk&age=20



<< 요약 >>
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
속성		표현식/EL		타입			설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
url		사용 가능		String		리다이렉트 할 URL
context	사용 가능		String		컨텍스트 경로

-----------

//2.4 기타 코어 태크

-----------

//2.4.1 <c:out> 태그
;out 태그는 JspWriter에 데이터를 출력할 때 사용되는 태그

<c:out value="value" [escapeXml="(true|false)"] [default="기본값"] />
<c:out value="value" [escapeXml="(true|false)"]>기본값</c:out>

=>out 태그의 속성
-value : JspWriter에 출력할 값을 나타낸다. 일반적으로 value 속성의 값은 String과 같은 문자열이다. value가 java.io.Reader의 
		한 종류라면 out 태그는 Reader로부터 데이터를 읽어와 JspWriter에 값을 출력한다.
-escapeXml : 이 속성값이 true이면 밑의 표와 같이 문자를 변경한다. 생략할 수 있으며 기본 값은 true
-default : value 속성에서 지정한 값이 존재하지 않을 때 사용될 값을 지정한다.

=>escapeXml 속성이 true일 경우 변환되는 문자
문자		변환된 형태
<		&lt;
>		&gt;
&		&amp;
'		&#039;
"		&#034;



/*   use_out_tag.jsp   */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.io.IOException,java.io.FileReader" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>소스 보기</title>
</head>
<body>

<%
	FileReader reader=null;
	try{
		String path=request.getParameter("path");
		reader=new FileReader(getServletContext().getRealPath(path));
%>
<pre>
소스 코드 = <%=path %>
<c:out value="<%=reader %>" escapeXml="true" />
</pre>
<%
	}catch(IOException ex){
	out.println("에러 : "+ex.getMessage());
	}finally{
		if(reader!=null)
			try{
				reader.close();
			}catch(IOException ex){}
	}
%>

</body>
</html>



<< 실행 결과 : http://localhost:8080/chap12/use_out_tag.jsp?path=/use_if_tag.jsp  >>
소스 코드 = /use_if_tag.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>if 태그</title>
</head>
<body>

<c:if test="true">
무조건 수행<br>
</c:if>

<c:if test="${param.name=='bk'}">
name 파라미터의 값이 ${param.name} 입니다.<br>
</c:if>

<c:if test="${18<param.age}">
당신의 나이는 18세 이상입니다.
</c:if>

</body>
</html>



<< 요약 >>
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
속성			표현식/EL		타입			설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
value		사용 가능		Object		출력할 값
escapeXml	사용 가능		boolean		특수 문자를 변환할 지의 여부
default		사용 가능		Object		value의 결과값이 null인 경우 출력할 값

-----------

//2.4.2 <c:catch> 태그
;발생된 익셉션을 EL 변수에 저장할 때 사용되는 태그
<c:catch var="exName">
..
익셉션이 발생할 수 있는 코드
..
</c:catch>
...
${exName}사용

=><c:catch> 태그 블록에서 익셉션이 발생할 경우 그 익셉션 객체를 exName 변수에 할당




/*   use_catch_tag.jsp   */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>catch 태그</title>
</head>
<body>

<c:catch var="ex">
name 파라미터의 값 = <%=request.getParameter("name") %> <br>
<% if(request.getParameter("name").equals("test")){ %>	<%--name 파라미터가 존재하지 않을 경우 NullPointerException 발생 --%>
${param.name}은 test입니다.
<%	} %>
</c:catch>

<p>	<%--ex 변수에 저장된 값이 null이 아닐경우 실행. 익셉션이 발생 =>ex 변수에 익셉션 객체 저장 & 실행 --%>
<c:if test="${ex!=null}">
익셉션이 발생하였습니다 : <br>
${ex}
</c:if>


</body>
</html>


<< 실행 결과 >>
name 파라미터의 값 = null 

익셉션이 발생하였습니다 : 
java.lang.NullPointerException 

---------------------------------------------------------------------------------------------

//03 국제화 태그
;특정 지역에 따라 알맞은 메세지를 출력해야 할 때 사용.
(e.g : 한글 브라우저에서는 한글, 영어에서는 영어 출력)

기능분류		태그					설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
로케일 지정	setLocale			Locale을 지정한다.
			requestEncoding		요청 파라미터의 캐릭터 인코딩을 지정한다.
			
메세지 처리	bundle				사용할 번들을 지정한다.
			message				지역에 알맞은 메세지를 출력한다.
			setBundle			리소스 번들을 읽어와 특정 변수에 저장한다.

숫자 및 		formatNumber		숫자를 포맷팅한다.
날짜 포멧팅	formatDate			Date 객체를 포멧팅 한다.
			parseDate			문자열로 표시된 날짜를 분석해서 Date 객체로 변환한다.
			parseNumber			문자열로 표시된 날짜를 분석해서 숫자로 변환한다.
			setTimeZone			시간대 정보를 특정 변수에 저장한다.
			timeZone			시간대를 지정한다.

-----------

//3.1 로케일 지정 태그
;로케일 지정과 관련된 태그
-<fmt:setLocale>		: 국제화 태그들이 사용할 로케일을 지정한다.
-<fmt:requestEncoding>	: 요청 파라미터의 캐릭터 인코딩을 지정한다.

=>웹브라우저(Accept-Language 헤더를 사용해서 수용 가능한 언어 목록을 전송) -> JSTL의 국제화 태그들은 이 헤더의 값을 사용해서 언어별로 알맞은 처리.

<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<fmt:setLocale value="ko" scope="request" />

=>
value	: Locale을 "언어코드_국가코드" 형식으로 지정. 두 글자 언어 코드는 반드시 지정해야 함. 두 글자로 된 국가 코드를 추가로 지정할 수 있음. 언어 코드와 국가 코드는 하이픈(-),언더바(_)로 구분
		 e.g:한글언어 한국 국가를 표현 => "ko_kr" (ko:한글의 언어코드, kr:한국의 국가 코드)
		 value가 null이면 기본 로케일 사용(기본 로케일 : JVM의 기본 로케일 or web.xml 파일에서 설정한 로케일)
scope	: 지정한 Locale이 영향을 미치는 범위를 지정한다. 기본 값 : page

=>
<c:requestEncoding> 태그는 요청 파라미터의 캐릭터 인코딩을 지정
e.g)
<fmt:requestEncoding value="utf-8" />
==
<%	request.setCharacterEncoding("utf-8"); %>


/*	국가별 locale 지정 : setLocaleTest.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

<c:set var="now" value="<%=new java.util.Date()%>" />
<pre>
톰켓 서버의 기본 로케일 : <%=response.getLocale()%>
<hr>
<fmt:setLocale value="ko_kr"/>
로케일을 한국어로 설정후 로케일 확인 : <%=response.getLocale()%>
currency : <fmt:formatNumber value="10000" type="currency" />
date : <fmt:formatDate value="${now}"/>
<hr>
<fmt:setLocale value="en_US"/>
로케일을 영어로 설정후 로케일 확인 : <%=response.getLocale()%>
currency : <fmt:formatNumber value="10000" type="currency" />
date : <fmt:formatDate value="${now}"/>
<hr>
<fmt:setLocale value="ja_JP"/>
로케일을 일본어로 설정후 로케일 확인 : <%=response.getLocale()%>
currency : <fmt:formatNumber value="10000" type="currency" />
date : <fmt:formatDate value="${now}"/>
</pre>
</body>
</html>



-----------

//3.2 예제로 사용할 리소스 번들


/*	영문 메세지를 보여줄 때 사용할 리소스 번들 파일 : chap12\WEB-INF\classes\resource\message.properties	*/
TITLE=MadVirus`s Learning JSP 2.3
GREETING=Hi! I`m BK
VISITOR=Your ID is {0}.


/*	한글 메세지를 보여줄 때 사용할 리소스 번들 파일 : chap12\WEB-INF\classes\resource\message_ko.properties.src 	*/
TITLE=최범균의 JSP 2.2 배우기
GREETING=안녕하세요 최범균 입니다.
VISITOR=당신의 아이디는 {0}입니다.

=>유니코드 숫자 상태로 변환해야 함.
C:\...\resource>native2ascii message_ko.properties.src message_ko.properties


-----------

//3.3 메세지 처리 태그
;메세지 처리 태그
-<fmt:bundle> : 태그 몸체에서 사용할 리소스 번들을 지정한다.
-<fmt:message> : 메세지를 출력한다.
-<fmt:setBundle> : 특정 메시지 번들을 사용할 수 있도록 로딩한다.

----

//3.3.1 <fmt:bundle> 태그와 <fmt:message> 태그

1)bundle태그
<fmt:bundle basename="resource.message">
...
	<fmt:message key="GREETING" />
...
</fmt:bundle>


속성			표현식/EL		타입			설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
basename	사용 가능		String		사용할 리소스 번들의 이름
prefix		사용 가능		String		bundle 태그의 내부에서 사용되는 message 태그의 key 속성의 값 앞에 자동으로 붙게 될 문자열

<fmt:bundle basename="resource.error" prefix="SYSTEM_">
	<fmt:message key="001" />
</fmt:bundle>

==
<fmt:bundle basename="resource.error">
	<fmt:message key="SYSTEM_001" />
</fmt:bundle>

+p.319 리소스 번들의 이름 읽어보기

2)message태그
-key	: 읽어올 메세지의 키 값
-var	: 메세지를 저장할 변수 명
-scope	: 변수가 저장되는 영역 지정
-bundle	: <fmt:setBundle> 태그를 사용해서 로딩한 번들로부터 메세지를 읽어올 때 사용

=>
VISITOR=Your ID is {0}.에서 {0}은 변경 가능한 요소를 제공하는 메세지 일 경우 <fmt:param>태그를 사용
<fmt:message key="MESSAGEKEY">
	<fmt:param value="${id}" />		<!-- {0}에 들어간다. -->
	<fmt:param value="${name}" />	<!-- {1}에 들어간다. -->
	<fmt:param value="${email}" />	<!-- {2}에 들어간다. -->
	...
</fmt:message>	

=>자바의 배열과 마찬가지로 시작 번호가 0임


/*	리소스 번들로부터 메세지를 읽어와 출력하는 예제 : chap12\use_message_tag.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- <fmt:setLocale value="en"/> -->
<fmt:bundle basename="resource.message">	<!-- resource.message 리소스 번들을 기본적으로 사용하도록 지정 -->
<fmt:message key="TITLE" var="title" />		<!-- 키값이 TITLE인 메세지 변수 title에 저장한다. -->

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>${title}</title>
</head>
<body>

<fmt:message key="GREETING" />	<!-- 키값이 GREETING인 메세지를 출력한다. -->
<br>
<c:if test="${!empty param.id }"> <!-- id가 존재할 경우 밑을 실행 -->
<fmt:message key="VISITOR">			<!-- key값이 VISITOR를 출력한다. -->
	<fmt:param value="${param.id}" />	<!-- 메세지의 {0}에는 id 파라미터의 값을 삽입 -->
</fmt:message>
</c:if>

</body>
</html>
</fmt:bundle>



<< 실행 결과 : http://localhost:8080/chap12/use_message_tag.jsp >>
Hi! I`m BK  



<< 실행 결과 : http://localhost:8080/chap12/use_message_tag.jsp?id=zac >>
Hi! I`m BK  
Your ID is zac. 


=>웹브라우저에 상관없이 <fmt:bundle> 태그가 사용하는 리소스 번들의 로케일을 변경하고 싶으면 밑의 주석 해제하면됨
<!-- <fmt:setLocale value="en"/> --> 

----

//3.3.2<fmt:setBundle> 태그와 <fmt:message> 태그
;
<fmt:bundle>	: 태그 안에서 사용될 리소스 번들을 지정
<fmt:setBundle> : 리소스 번들을 변수로 저장 & 어디서나 사용할 수 있도록 해줌

사용예)
<fmt:setBundle var="message" basename="resource.message" />
...
<fmt:message bundle="${message}" key="GREETING" />

속성			표현식/EL		타입			설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
basename 	사용 가능		String		읽어올 리소스 번들의 이름
var			사용 불가		String		리소스 번들을 저장할 변수명
scope		사용 불가		String		변수를 저장할 영역


/*	chap12\use_message_tag2.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<fmt:setBundle var="message" basename="resource.message" />

<fmt:message bundle="${message}" key="TITLE" var="title" />

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>${title}</title>
</head>
<body>

<fmt:message bundle="${message}" key="GREETING" />
<br>
<c:if test="${!empty param.id }" >
<fmt:message bundle="${message}" key="VISITOR">
	<fmt:param value="${param.id}" />
</fmt:message>
</c:if>

</body>
</html>

----

//3.3.3 <fmt:message> 태그의 리소스 번들 검색 순서
1)bundle 속성에 지정한 리소스 번들을 사용
2)<fmt:bundle> 태그에 중첩된 경우 <fmt:bundle> 태그에서 설정한 리소스 번들 사용
3)1,2가 아닐 경우 기본 리소스 번들 사용. 기본 리소스 번들은 web.xml 파일에서 javax.servlet.jsp.jstl.fmt.localizationContext
 컨텍스트 속성을 통해서 설정

---------------------------------------------------------------------------------------------

//3.4 숫자 및 날짜 포맷팅 처리 태그
-숫자 출력과 파싱 관련 : <fmt:formatNumber> , <fmt:parseNumber>
-날짜 출력과 파싱 관련 : <fmt:formatDate> , <fmt:parseDate>
-시간대 설정 관련 	: <fmt:setTimeZone> , <fmt:timeZone>

----

//3.4.1 <fmt:formatNumber> 태그
;숫자를 양식에 맞춰서 출력

<fmt:formatNumber value="숫자 값" 
	[type="값 타입(number | currency | percent)"] [pattern="패턴"]
	[currentCode="통화코드] [currencySymbol="통화심볼"]
	[groupingUsed="(true|false)"][var="변수명][score="영역"] />
	
속성			표현식/EL		타입				설명
value		사용 가능		String|Number	양식에 맞춰 출력할 숫자를 지정한다.
						
type		사용 가능		String			어떤 양식으로 출력할지 정한다.
										number(숫자형,기본)/percent(%)/currency(통화형식)

pattern		사용 가능		String			직접 숫자가 출력되는 양식을 지정한다. 
										java.text.DecimalFormat 클래스에서 정의되어 있는 패턴 사용 										

currencyCode 사용 가능		String			통화코드(ISO 4217에 정의)를 지정한다.(type 속성의 값이 currency 일 때만 의미O)
										e.g)'원'화에 대한 통화 코드 : KRW
										
currentSymbol 사용 가능	String			통화를 표현할 때 사용할 기호를 표시한다.(type 속성의 값이 currency 일 때만 의미O)

groupingUsed  사용 가능	boolean			콤마(,)와 같이 단위를 구분할 때 사용되는 기호를 사용할 지의 여부를 결정(기본 : true)
										true => 12,000  false 12000

var			사용 불가		String			포맷팅한 결과를 저장할 변수명을 지정. 저장할 변수 타입은 String
										(var 속성을 사용하지 않으면 결과를 곧바로 출력)

scope		사용 불가		String			변수를 저장할 영역을 지정(기본 : page)
										

/* 숫자를 타입별로 출력하는 예제 : use_number_tag.jsp 	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>numberFormat 태그 사용</title>
</head>
<body>

<c:set var="price" value="10000" />
<fmt:formatNumber value="${price}" type="number" var="numberType" />
<br/>
통화 : <fmt:formatNumber value="${price}" type="currency" currencySymbol="원" />
<br/>

퍼센트 : <fmt:formatNumber value="${price}" type="percent" groupingUsed="false"/>
<br/>

숫자 : ${numberType}
<br/>

패턴 : <fmt:formatNumber value="${price}" pattern="00000000.00" />


</body>
</html>


<< 실행 결과 >>

통화 : 원10,000 
퍼센트 : 1000000% 
숫자 : 10,000 
패턴 : 00010000.00 


/*	formatNumberTest.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
<fmt:formatNumber value="1234567.89" groupingUsed="true"/>
<br>
<fmt:formatNumber value="0.5" type="percent"/>
<br>
<fmt:formatNumber value="10000" type="currency"/>
<br>
<fmt:formatNumber value="10000" type="currency" currencySymbol="$"/>
<br>
<fmt:formatNumber value="1234567.8912345" pattern="#,#00.0#"/>
<br>
<fmt:formatNumber value="1234567.8" pattern="#,#00.0#"/>
<br>
<fmt:formatNumber value="1234567.89" pattern=".000#"/>
</body>
</html>


<< 실행 결과 >>
1,234,567.89 
50% 
￦10,000 
$10,000 
1,234,567.89 
1,234,567.8 
1234567.890 
										
----

//3.4.3 <fmt:formatDate>태그
;날짜 정보를 담고 있는 객체를 포맷팅하여 출력

<fmt:formatDate value="날짜값" [type="타입(time|date|both)"] 
	[dateStyle="날짜 스타일"] [timeStyle="시간스타일"]
	[pattern="패턴"] [timeZone="타임 존"] [var="변수명"] [scope="영역]
	
속성		표현식/EL		타입				설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
value	사용 가능		java.util.Date	포맷팅할 시간 값을 지정한다.

type	사용 가능		String			날짜,시간 또는 둘다 포맷팅할지 여부를 지정한다.(기본 Date)
									time, date, both 중 한 가지 값을 가질 수 있음
									
dateStyle 사용 가능	String			날짜에 대해 미리 정의된 포맷팅 스타일을 지정한다.(기본 default)
									default,short,medium,long,full 중 한가지 값
									
timeStyle 사용 가능	String			시간에 대해 미리 정의된 포맷팅 스타일을 지정한다.(기본 default)
									default,short,medium,long,full 중 한가지

patter	사용 가능		String			직접 파싱할 때 사용할 양식을 지정한다.
									java.text.DateFormat에 있는 양식을 사용
									
timeZone 사용 가능		String|			시간대를 변경하고 싶을 때 사용. <fmt:setTimeZone> 태그에서 생성한 TimeZone 객체 사용
					java.util.TimeZone
	
var		사용 불가		String			파싱한 결과를 저장할 변수명을 지정한다.

scope	사용 불가		String			변수를 저장할 영역을 지정한다.(기본 : page)
	

	
/* 날짜 포맷팅 예제 : use_date_tag.jsp 	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>formatDate 태그 사용</title>
</head>
<body>

<c:set var="now" value="<%=new java.util.Date() %>" />
---------------------------------------------------------------------------------------<br>
1)type="date" dateStyle=""<br>
dateStyle(defalut) : <fmt:formatDate value="${now}" type="date"/> <br>
dateStyle(short) : <fmt:formatDate value="${now}" type="date" dateStyle="short" /> <br>
dateStyle(medium) : <fmt:formatDate value="${now}" type="date" dateStyle="medium" /> <br>
dateStyle(long) : <fmt:formatDate value="${now}" type="date" dateStyle="long" /> <br>
dateStyle(full) : <fmt:formatDate value="${now}" type="date" dateStyle="full" /> <br>
---------------------------------------------------------------------------------------<br>
2)type="time"<br>
timeStype(default) : <fmt:formatDate value="${now}" type="time" /> <br>
timeStype(short) : <fmt:formatDate value="${now}" type="time" timeStyle="short" /> <br>
timeStype(medium) : <fmt:formatDate value="${now}" type="time" timeStyle="medium" /> <br>
timeStype(long) : <fmt:formatDate value="${now}" type="time" timeStyle="long" /> <br>
timeStype(full) : <fmt:formatDate value="${now}" type="time" timeStyle="full" /> <br>
---------------------------------------------------------------------------------------<br>
3)type="both"<br>
<fmt:formatDate value="${now }" type="both" dateStyle="full" timeStyle="full" /> <br>
---------------------------------------------------------------------------------------<br>
4)pattern="yyyy-MM-dd z a h:mm"<br>
<fmt:formatDate value="${now }" pattern="yyyy-MM-dd z a h:mm" /><br>

</body>
</html>


<< 실행 결과 >>
---------------------------------------------------------------------------------------
1)type="date" dateStyle=""
dateStyle(defalut) : 2016. 11. 4 
dateStyle(short) : 16. 11. 4 
dateStyle(medium) : 2016. 11. 4 
dateStyle(long) : 2016년 11월 4일 (금) 
dateStyle(full) : 2016년 11월 4일 금요일 
---------------------------------------------------------------------------------------
2)type="time"
timeStype(default) : 오후 7:55:41 
timeStype(short) : 오후 7:55 
timeStype(medium) : 오후 7:55:41 
timeStype(long) : 오후 7시 55분 41초 
timeStype(full) : 오후 7시 55분 41초 KST 
---------------------------------------------------------------------------------------
3)type="both"
2016년 11월 4일 금요일 오후 7시 55분 41초 KST 
---------------------------------------------------------------------------------------
4)pattern="yyyy-MM-dd z a h:mm"
2016-11-04 KST 오후 7:55

	
----

//3.4.4 <fmt:parseDate> 태그
;문자열로 표시된 날짜와 시간 값을 java.util.Date로 파싱해주는 기능을 제공

<fmt:parseDate value="날짜값" [type="타입"] [dateStyle="날짜스타일"] [timeStyle="시간스타일"]
	[pattern="패턴"] [timeZone="타임존"] [parseLocale="로케일"] [var="변수명"] [scope="영역"]
	
	
속성			표현식/EL		타입				설명	
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
value		사용 가능		String			파싱할 문자열을 지정한다.

type		사용 가능		String			날짜,시간 또는 둘다 포맷팅할지 여부를 지정.(기본 date)
										time,date,both 중 한가지 값 가짐
										
dateStyle	사용 가능		String			날짜에 대해 미리 정의된 포맷팅 스타일을 지정(기본 : default)
										default,short,medium,long,full 중 한가지
										
timeStyle	사용 가능 		String			시간에 대해 미리 정의된 포맷팅 스타일을 지정(기본 default)
										default,short,medium,long,full 중 한가지
										
pattern		사용 가능		String			직접 파싱할 때 사용할 양식을 지정(java.text.DateFormat에 있는 양식

timeZone	사용 가능		String | java.	시간대를 변경하고 싶을 때 사용한다.
						util.TimeZone 	<fmt:setTimeZone> 태그에서 생성한 TimeZone 객체를 사용

parseLocale	사용 가능		String | java.	파싱할 때 사용할 로케일을 지정한다.					
						util.Locale
						
var			사용 불가		String			파싱한 결과를 저장할 변수명을 지정						
scope		사용 불가		String			변수를 저장할 영역을 지정한다(기본 : page)

e.g)
--파싱--<br>
<fmt:parseDate value="2009-03-01 13:00:59" pattern="yyyy-MM-dd HH:mm:ss" var="date"/>
<fmt:formatDate value="${date}" type="both"/>

<< 실행 결과 >>
--파싱--
2009. 3. 1 오후 1:00:59 

----

//3.4.5 <fmt:timeZone> 태그와 <fmt:setTimeZone> 태그
;시간대별로 시간을 처리할 수 있는 기능을 제공

1)<fmt:timeZone>
<fmt:timeZone value="Hongkong">
...
	<fmt:formatDate .../> <!-- 사용하는 시간을 Hongkong 시간대에 맞춘다 -->
...
</fmt:timeZone>

/*	현재 시간과 홍콩 시간 두 가지로 출력하는 예제 : use_timezone_tag.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>timeZone 태그 사용</title>
</head>
<body>

<c:set var="now" value="<%=new java.util.Date()%>" />

한국 시간 : <fmt:formatDate value="${now }" type="both" dateStyle="full" timeStyle="full" />
<br>

<fmt:timeZone value="Hongkong">
홍콩 시간 : <fmt:formatDate value="${now }" type="both" dateStyle="full" timeStyle="full" />
</fmt:timeZone>

</body>
</html>


<< 실행 결과 >>
한국 시간 : 2016년 11월 4일 금요일 오후 8시 16분 24초 KST 
홍콩 시간 : 2016년 11월 4일 금요일 오후 7시 16분 24초 HKT 


=>timeZone 태그의 value 속성에는 String | TimeZone 객체 사용 가능

/*	TimeZone 클래스를 사용해서 사용 가능한 시간대 목록을 출력해주는 예 : listTimeZone.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>시간대 목록</title>
</head>
<body>

<c:forEach var="id" items="<%=java.util.TimeZone.getAvailableIDs() %>" >
	${id }<br/>
</c:forEach>	

</body>
</html>


<< 실행 결과 >>
Africa/Abidjan
Africa/Accra
Africa/Addis_Ababa
Africa/Algiers
Africa/Asmara
Africa/Asmera
Africa/Bamako
.....

-----------

//3.5 web.xml 파일에 국제화 관련 태그 기본값 설정하기

-국제화 관련 컨텍스트 초기화 파라미터
속성 이름										설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
javax.servlet.jstl.fmt.localizationContext	기본으로 사용할 리소스 번들을 지정한다. 리소스 번들의 basename을 입력
javax.servlet.jstl.fmt.locale				기본으로 사용할 로케일을 지정한다.
javax.servlet.jstl.fmt.timeZone				기본으로 사용할 시간대를 지정한다.



e.g) 기본 리소스 번들 : resource.message // 시간대 홍콩 시간대
<web-app...>
...
	<context-param>
		<param-name>javax.servlet.jstl.fmt.localizationContext</param-name>
		<param-value>resource.message</param-value>
	</context-param>		
	
	<context-param>
		<param-name>javax.servlet.jstl.fmt.timeZone</param-name>
		<param-value>Hongkong</param-value>
	</context-param>		
...
</web-app>



---------------------------------------------------------------------------------------------

//04 함수
;JSTL은 표현 언어에서 사용할 수 있는 함수를 제공(EL에서 객체의 메소드를 직접 호출하면서 효용성이 떨어졌음)
+p333 함수표 보기


/* 함수 사용 예제 : use_functions.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>함수 사용</title>
</head>
<body>

<c:set var="str1" value="Functions <태그>를 사용합니다." />
<c:set var="str2" value="사용" />
<c:set var="tokens" value="1,2,3,4,5,6,7,8,9,10" />

length(str1) = ${fn:length(str1)} <br>
toUpperCase(str1) = "${fn:toUpperCase(str1)}"<br>
toLowerCase(str1) = "${fn:toLowerCase(str1) }"<br>
substring(str1,3,6) = "${fn:substring(str1,3,6)}"<br>
substringAfter(str1,str2) = "${fn:substringAfter(str1,str2)}"<br>
substringBefore(str1,str2) = "${fn:substringBefore(str1,str2) }"<br>
trim(str1) = "${fn:trim(str1)}"<br>
replace(str1," ","-") = "${fn:replace(str1," ","-")}"<br>
indexOf(str1,str2) = "${fn:indexOf(str1,str2)}"<br>
startsWith(str1,str2) = "${fn:startsWith(str1,str2)}"<br>
endsWith(str1,str2) = "${fn:endsWith(str1,str2)}"<br>
contains(str1,str2) = "${fn:contains(str1,str2)}"<br>
containsIgnoreCase(str1,str2) = "${fn:containsIgnoreCase(str1,str2)}"<br>

<c:set var="array" value="${fn:split(tokens,',')}" />
join(array,"-") = "${fn:join(array,"-")}"<br> <!-- array에 저장된 문자열을 합치고 각 문자열 사이에 -를 붙임 -->
escapeXml(str1) = "${fn:escapeXml(str1)}"<br> <!--XML의 객체 참조에 해당하는 특수 문자를 처리한다. '&' => '&amp;'	


</body>
</html>



<< 실행 결과 >>
length(str1) = 22 
toUpperCase(str1) = "FUNCTIONS <태그>를 사용합니다."
toLowerCase(str1) = "functions <태그>를 사용합니다."
substring(str1,3,6) = "cti"
substringAfter(str1,str2) = "합니다."
substringBefore(str1,str2) = "Functions <태그>를 "
trim(str1) = "Functions <태그>를 사용합니다."
replace(str1," ","-") = "Functions-<태그>를-사용합니다."
indexOf(str1,str2) = "16"
startsWith(str1,str2) = "false"
endsWith(str1,str2) = "false"
contains(str1,str2) = "true"
containsIgnoreCase(str1,str2) = "true"
join(array,"-") = "1-2-3-4-5-6-7-8-9-10"
escapeXml(str1) = "Functions <태그>를 사용합니다."

































