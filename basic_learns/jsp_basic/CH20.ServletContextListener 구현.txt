-----------CH20.ServletContextListener 구현-----------------
;ServletContextListener 구현
=>서블릿은 다양한 시점에서 발생하는 이벤트와 이벤트를 처리하기 위한 인터페이스를 정의
=>이벤트와 인터페이스를 이용하면 웹 어플리케이션에서 필요로 하는 데이터의 초기화나 요청 처리 등을 추적할 수 있음
=>서블릿 규약은 다양한 이벤트를 처리할 수 있는 인터페이스를 정의

---------------------------------------------------------------------------------------------

//01 ServletContextListener를 이용한 이벤트 처리

=>웹 컨테이너는 웹 어플리케이션(컨텍스트)이 시작되거나 종료되는 시점에 특정 클래스의 메소드를 실행할 수 있는 기능을 제공
e.g)웹 어플리케이션을 실행할 때 필요한 초기화 작업 or 종료 후 사용된 자원을 반환 등등


e.g)웹 어플리케이션이 시작되고 종료될 때 특정한 기능을 실행하는 코드 구성
1.javax.servlet.ServletContextListener 인터페이스를 구현한 클래스 작성
2.web.xml 파일에 1번에서 작성한 클래스 등록
=>
-public void contextInitialized(ServletContextEvent sce)
: 웹 어플리케이션을 초기화할 때 호출
-public void contextDestroyed(ServletContextEvent sce)
: 웹 어플리케이션을 종료할 때 호출



=>실습
ServletContextListener를 이용해서 커넥션 풀을 초기화하는 클래스 구현
-web.xml 파일에 커넥션 풀을 초기화할 때 사용할 컨텍스트 초기화 파라미터를 설정
-ServletContextListener 인터페이스를 구현한 클래스는 contextInitialized() 메소드에서 컨텍스트 초기화 
 파라미터를 이용해서 커넥션 풀을 초기화하는 데 필요한 값을 로딩
 
/*	chap20/WebContent/WEB-INF/web.xml	*/

 
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
		http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	version="3.1">
  
  <listener>
  	<listener-class>jdbc.DBCPInitListener</listener-class>  	
  </listener>
  
  <context-param>
  	<param-name>poolConfig</param-name>
  	<param-value>
  		jdbcdriver=com.mysql.jdbc.Driver
  		jdbcUrl=jdbc:mysql://localhost:3306/guestbook?characterEncoding=utf8
  		dbUser=jspexam
  		dbPass=jsppw
  		poolName=guestbook
  	</param-value>
  </context-param>
  
  
</web-app>



/*	chap20/jdbc/DBCPInitListener.java	*/

package jdbc;

import java.io.IOException;
import java.io.StringReader;
import java.sql.DriverManager;
import java.util.Properties;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.apache.tomcat.dbcp.dbcp2.ConnectionFactory;
import org.apache.tomcat.dbcp.dbcp2.DriverManagerConnectionFactory;
import org.apache.tomcat.dbcp.dbcp2.PoolableConnection;
import org.apache.tomcat.dbcp.dbcp2.PoolableConnectionFactory;
import org.apache.tomcat.dbcp.dbcp2.PoolingDriver;
import org.apache.tomcat.dbcp.pool2.impl.GenericObjectPool;
import org.apache.tomcat.dbcp.pool2.impl.GenericObjectPoolConfig;

public class DBCPInitListener implements ServletContextListener{
	@Override
	public void contextInitialized(ServletContextEvent sce){
		String poolConfig=sce.getServletContext().getInitParameter("poolConfig");
		Properties prop=new Properties();
		
		try{
			prop.load(new StringReader(poolConfig));
			//Properties.load()는 "키=값" 형식에서 값을 로딩
		}catch(IOException e){
			throw new RuntimeException(e);			
		}
		loadJDBCDriver(prop);
		initConnectionPool(prop);		
	}
	
	@Override
	public void contextDestroyed(ServletContextEvent sce){
		
	}
	
	
	private void loadJDBCDriver(Properties prop){
		String driverClass=prop.getProperty("jdbcdriver");
		try{
			Class.forName(driverClass);
		}catch(ClassNotFoundException ex){
			throw new RuntimeException("fail to load JDBC Driver",ex);
		}
	}
	
	private void initConnectionPool(Properties prop){
		try{
			String jdbcUrl=prop.getProperty("jdbcUrl");
			String username=prop.getProperty("dbUser");
			String pw=prop.getProperty("dbPass");
			
			ConnectionFactory connFactory=new DriverManagerConnectionFactory(jdbcUrl,username,pw);
			
			PoolableConnectionFactory poolableConnFactory=new PoolableConnectionFactory(connFactory,null);
			poolableConnFactory.setValidationQuery("select 1");
			
			GenericObjectPoolConfig poolConfig=new GenericObjectPoolConfig();
			poolConfig.setTimeBetweenEvictionRunsMillis(1000L*60L*5L);
			poolConfig.setMinIdle(4);
			poolConfig.setMaxTotal(50);
			
			GenericObjectPool<PoolableConnection> connectionPool=new GenericObjectPool<>(poolableConnFactory,poolConfig);
			poolableConnFactory.setPool(connectionPool);
			
			Class.forName("org.apache.commons.dbcp2.PoolingDriver");
			PoolingDriver driver=(PoolingDriver)DriverManager.getDriver("jdbc:apache:commons:dbcp:");
			String poolName=prop.getProperty("poolName");
			driver.registerPool(poolName, connectionPool);			
		}catch(Exception e){
			throw new RuntimeException(e);
		}
	}

}


-----------

/1.1 리스너의 실행 순서
=>웹 어플리케이션에는 한 개 이상의 리스너를 web.xml 파일에 등록할 수 있음

<web-app...>

	<listener>
		<listener-class>chap20.listener.AListener</listener-class>
	</listener>
	
	<listener>
		<listener-class>chap20.listener.BListener</listener-class>
	</listener>

<web.app...>

=>등록 된 순서대로 contextInitialized() 메소드 실행 
=>등록의 반대 순서대로 contextDestroyed() 메소드 실행
i.e
웹 어플리케이션이 시작될 때 AListener -> BListener 
웹 어플리케이션이 종료될 때 BListener -> AListener

-----------

/1.2 리스너에서의 익셉션 처리

		try{
			prop.load(new StringReader(poolConfig));
		}catch(IOException e){
			throw new RuntimeException(e);			
		}
		loadJDBCDriver(prop);
		initConnectionPool(prop);

=>contextInitialized()메소드 정의에 throws가 없음
=>Properties.load() 메소드의 예외처리 
=>발생시킬 수 있는 checked 익셉션을 지정하고 있지 않으므로 익셉션을 발생 시키려면, RuntimeException이나
  그 하위 타입의 익셉션을 발생시켜야 함.

-----------

/1.3 애노테이션을 이용한 리스너 등록
=>서블릿 3.0 버전부터는 web.xml 파일에 등록하지 않고 @WebListener 애노테이션을 리스너 클래스에 적용하면 자동으로 리스너로 등록

import javax.servlet.annotation.WebListener;

@WebListener
public class DBCPInitListener implements ServletContextListener{
....
}
































