-----------CH16.커스텀태그만들기-----------------
;이장에서 다루는 내용
-커스텀 태그란
-태그 파일을 이용한 내용 출력
-태그 파일의 속성
-몸체 내용 처리하기
-변수 생성하기

=>스크립트 요소가 많으면 JSP 코드 복잡
=>이를 해결하는 방법 중 하나 : 커스텀 태그
=>JSTL과 같은 커스텀 태그 작성 및 활용

---------------------------------------------------------------------------------------------

//01 커스텀 태그
;JSP가 기본적으로 제공하는 액션 태그 & JSTL 이 제공하는 태그, 스크립트 코드 , EL을 사용해서 원하는 기능 구현
<jsp:include page=".." flush="false" />
<c:set var="name" value="..." />

=>프로그램을 개발하다 보면 JSP 액션 태그나 JSTL 태그만으로 부족할 상황이 존재

e.g)로그인에 성공했을 때 세션의 "member" 속성에 Member 타입 객체를 저장한다고 가정.

1)JSTL
<c:if test="${!empty sessionScope.member}">
	로그인 한 상태
</c:if>
<c:if test="${empty sessionScope.member}">
	로그인 하지 않은 상태
</c:if>

2)스크립트 코드
<%
	Member member=(Member)session.getAttribute("member");
	if(member!=null){
		out.println("로그인 한 상태");
	}else{
		out.println("로그인 하지 않은 상태");
	}
%>


3)커스텀 태그
<ct:login>
	로그인 한 상태
</ct>

<ct:login value="false">
	로그인 하지 않은 상태
</ct:login>

=>
<c:if>태그와 커스텀 태그를 비교해 봐도 , 코드를 보고 한눈에 로그인 상태를 알 수 있음

=>
원하는 목적에 맞게 작성한 태그를 커스텀태그(custom tag)라 부르고 JSTL은 커스텀 태그의 일종(자주 사용하는 것 라이브러리 만든 것)

-----------

/1.1 커스텀 태그의 장점
-재사용	: 한 번 작성한 커스텀 태그는 어떤 JSP 컨테이너에서도 사용 가능
-쉽고 단순한 JSP 코드 작성 : 자바 코드에 익숙하지 않은 개발자들도 커스텀 태그를 사용하면 쉽게 JSP 페이지를 작성할 수 있음
						(e.g JSTL과 EL을 사용하는 것이 스크립트 코드만 사용하기보다 쉽다)
-코드 가독성 향상	: 커스텀 태그는 뚜렷한 의도를 갖고, 커스텀 태그를 사용하면 스크립트 코드를 줄일 수 있기 때문에 가독성 높임

-----------

/1.2 커스텀 태그 종류

-커스텀 태그를 구현하는 방법
1)JSP 1.2 스타일로 구현한 커스텀 태그
2)JSP 2.0 또는 그 이상 버전의 SimpleTag를 사용한 커스텀 태그
1),2) : 자바 기반의 커스텀 태그 -> 자바 개발자가 구현하기에 적합한 방식.(커스텀 태그의 표준 인터페이스를 구현하거나 클래스를 상속받아서 구현)

3)JSP 2.0 또는 그 이상 버전의 태그 파일을 사용한 커스텀 태그
:JSP와 유사한 방식으로 커스텀 태그를 구현. 서블릿 대신 JSP로 구현하듯 커스텀 태그 클래스를 커스텀 태그 파일로 구현할 수 있음

=>이책에서는 3) 태그파일을 살펴볼 것

---------------------------------------------------------------------------------------------

//02 예제를 위한 프로젝트 생성

Dynamic Web Project -> chap16 -> lib -> jstl-1.2.jar 추가

---------------------------------------------------------------------------------------------

//03 태그 파일을 이용한 커스텀 태그 구현

-태그 파일 이전 커스텀 태그 구현
 정해진 규칙대로 자바 코드 작성 -> 컴파일 & 클래스 파일 -> TLD 파일 작성 -> web.xml 파일에 TLD관련 정보 기술

=>태그 파일
 : " JSP 문법을 사용해서 커스텀 태그로 동작할 수 있도록 만들어진 소스 코드 " 

-----------

/3.1 태그 파일의 기본

-태그 파일에서 사용할 수 있는 디렉티브
디렉티브			설명
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
tag				JSP 페이지의 page 디렉티브와 동일.
				(page 디렉티브가 JSP페이지에 대한 설정 정보 등을 명시하는 것처럼 tag 디렉티브는 태그 파일의 정보를 명시)
taglib			태그파일에서 사용할 태그 라이브러리를 명시할 때 사용(사용법은 JSP와 동일)
include			JSP페이지와 마찬가지로 태그 파일에 특정한 파일을 포함시킬 때 사용
				(단, 태그파일에 포함되는 파일은 태그 파일에 알맞은 문법으로 작성)
attribute		태그 파일을 커스텀 태그로 사용할 때 입력받을 속성을 명시
variable		EL 변수로 사용할 변수에 대한 정보를 지정


-tag 디렉티브의 속성
속성								설명
display-name					태그 파일의 도구에서 보여줄 때 사용될 이름을 지정(기본값 : 확장자".tag"를 제외한 태그 파일의 나머지 이름)(선택)

body-content					몸체 내용의 종류를 입력한다.(empty,tagdependent,scriptless(기본 값)의 세 가지 값중 하나 사용.(선택)

dynamic-attributes				동적 속성을 사용할 때, 속성의 <이름,값>을 저장하는 Map객체를 page위의 속성에 저장할 때 사용할 이름을 지정한다.
								(JSP페이지의 pageContext 기본 객체와 비슷하게, jspContext 기본 객체를 지원,이 jspContext 기본 객체에 저장할 속성 명을 지정)
								EL에서 변수이름으로 사용가능(선택)
						
description						태그에 대한 설명을 입력한다(선택)
import							page 디렉티브의 import 속성과 동일(선택)
pageEncoding					page 디렉티브의 pageEncoding 속성과 동일(선택)
isELIgnored				 		page 디렉티브의 isELIgnored 속성과 동일(선택)
defferedSyntaxAllowedAsLiteral 	page디렉티브의 defferedSyntaxAllowedAsLiteral 속성과 동일(선택)
trimDirectiveWhitespaces 		page디렉티브의 trimDirectiveWhitespaces 속성과 동일(선택)

------

/3.1.1 태그 파일의 위치와 태그 파일의 참조 방법
=>태그파일은 WEB-INF/tags 폴더나 그 하위 폴더에 위치. 확장자는 .tag or .tagx 

e.g)/WEB-INF/tags/util 폴더에 removeHtml.tag 위치할 경우
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags/util" %>
...
<tf:removeHtml>...</tf:removeHtml>

=>taglib 디렉티브의 uri 속성 대신 tagdir 속성을 사용해서 태그 파일이 위치한 폴더 경로를 입력

------

/3.1.2 파일 내용에서 사용가능한 기본 객체
;태그 파일도 JSP 페이지와 마찬가지로 몇 가지 기본 객체를 사용할 수 있음

-jspContext	: pageContext가 제공하는 setAttribute(),getAttribute() 메소드를 그대로 제공 
-request	: JSP 페이지의 request 기본 객체와 동일
-response	: JSP페이지의 response 기본 객체와 동일
-session	: JSP 페이지의 session 기본 객체와 동일
-application : JSP 페이지의 application 기본 객체와 동일
-out		: JSP페이지의 out 기본 객체와 동일

-----------

//3.2 내용을 출력하는 단순 태그 파일 구현


e.g)현재 시간을 출력하는 기능을 제공
/*	chap16/WebContent/WEB-INF/tag/now.tag	*/

<%@ tag body-content="empty" pageEncoding="utf-8" %> <%-- 커스텀 태그 몸체 내용이 없다고 설정 --%>
<%@ tag import="java.util.Calendar" %>
<%
	Calendar cal=Calendar.getInstance();
%>
<%= cal.get(Calendar.YEAR) %> 년
<%= cal.get(Calendar.MONTH)+1 %> 월
<%= cal.get(Calendar.DATE) %> 일



/*	chap16/WebContent/now.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags" %>
<%-- tagdir 속성은 웹 어플리케이션 루트를 기준으로 태그 파일이 위치한 폴더 경로를 지정 --%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>now</title>
</head>
<body>

오늘은 <b><tf:now/></b>입니다. <%-- <tf:now>에서 now는 태그 파일의 이름 --%>

</body>
</html>


<< 실행 결과 >>
오늘은 2016 년 11 월 11 일 입니다. 

-----------

//3.3 태그 파일의 속성 설정 방법
;JSTL의 <c:if> 태그나 <c:forEach> 태그는 test,var,items 등의 속성을 이용해서 태그를 실행
=>태그 파일도 속성을 이용해서 태그 파일을 실행하는 데 필요한 값을 전달받음
=>attribute 디렉티브를 사용해서 속성 정보를 설정

-attribute 디렉티브의 속성
속성				설명
descrption		속성에 대한 설명을 입력(선택)
name			속성의 이름을 입력(필수)(태그 파일 내에서 스크립트 변수나 EL 변수의 이름으로 사용된다.)
				(각 attribute 디렉티브의 name 속성값은 서로 달라야 함. name 속성 값이 tag 디렉티브의 dynamic-attributes 속성과
				같거나 variable 디렉티브의 name-given 속성값과 같으면 에러가 발생)
required		속성의 필수 여부를 지정한다(선택) (true : 필수 false : 선택(기본값) )
rtexprvalue		속성값으로 표현식을 사용할 수 있는지 여부를 지정한다.(선택) (기본값 : true)
type			속성값의 타입을 명시(선택)(기본값 String // 클래스의 인스턴스만 가능)
fragment		<jsp:attribute> 액션 태그로 속성값을 전달할 때 이 값을 true로 지정(선택)
				(fragment 속성값 true -> rtexprvalue : true -> type 속성: javax.servlet.jsp.tagext.jspFragment)


------

/3.3.1 속성값을 전달하는 기본 방식



/*	chap16/WebContent/WEB-INF/tag/header.tag	*/


<%@ tag body-content="empty" pageEncoding="utf-8" %>
<%@ tag trimDirectiveWhitespaces="true" %>
<%@ attribute name="title" required="true" %> <%-- title 속성 지정 & 필수 --%>
<%@ attribute name="level" type="java.lang.Integer"%> <%--level 속성 지정 & 타입 Integer --%>
<%
	String headStartTag=null;
	String headEndTag=null;
	if(level==null){ //스크립트 변수로 level속성을 사용
		headStartTag="<h1>";
		headEndTag="</h1>";		
	}else if(level==1){
		headStartTag="<h1>";
		headEndTag="</h1>";	
	}else if(level==2){
		headStartTag="<h2>";
		headEndTag="</h2>";	
	}else if(level==3){
		headStartTag="<h3>";
		headEndTag="</h3>";	
	}
%>
<%=headStartTag %>
${title} <%--EL변수로 title 속성을 사용 --%>
<%=headEndTag%>



/*	chap16/WebContent/use_header.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>제목 출력</title>
</head>
<body>
<tf:header title="텍스트 제목" level="2" />
<tf:header title="${'EL 제목'}" level="3" /> <%-- EL 변수로 title 속성을 사용 --%>
<tf:header title='<%="표현식 제목" %>' />
</body>
</html>


<< 실행 결과 >>
텍스트 제목	<<h2크기
EL 제목		<<h3크기
표현식 제목	<<h1크기


=>use_header에서 title 속성을 이용해서 태그 파일에 값을 전달할 수 있음.
=>소스 보기 하면
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>제목 출력</title>
</head>
<body>

<h2>텍스트 제목</h2>

<h3>EL 제목</h3>

<h1>표현식 제목</h1>

</body>
</html>

------

/3.3.2 <jsp:attribute> 액션 태그를 이용한 속성값 전달
;attribute 디렉티브의 fragment 속성값 true -> JSP는 속성에 값을 전달할 때 <jsp:attribute> 액션 태그를 사용 해야 함


e.g)

<%--	header.tag	--%>
<%@ attribute name="title" fragment="true"%>

<%--	.jsp	--%>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags"%>
....
<tf:header>
	<jsp:attribute name="title">${article.title}</jsp:attribute>
</tf:header>

=> <jsp:attribute> 태그의 속성
name	: 속성의 이름을 지정한다(필수)
trim	: 속성값 좌우의 공백문자들을 제거할지 여부를 지정한다. 기본값은 true

=>
<jsp:attribute>의 몸체에는 일반 탬플릿 텍스트, EL , <jsp:include> 액션 태그 가능 // 스크립트코드(표현식,스크립트릿) 사용 불가

e.g)
<jsp:attribute name="currentTime">
	<%=new java.util.Date() %> <!-- 표현식 사용시 에러 발생 -->
	현재시간 - <jsp:include page="now.jsp" flush="true" />	<!-- 사용가능 -->
</jsp:attribute>

=>
<jsp:attribute> 액션 태그를 이용하여 태그의 속성값을 지정하면 태그 파일에서는 <jsp:invoke> 액션 태그를 이용해야함

<%@ attribute="title" fragment="true" %>

1)첫번째, <jsp:attribute>의 몸체 내용을 그대로 처리하여 출력
<jsp:invoke fragment="title" />

2)두번째, <jsp:attribute>의 몸체 내용을 처리한 결과를 지정한 영역의 속성에 저장
<jsp:invoke fragment="title" var="rs" scope="page" />
${pageScope.rs} 또는 ${rs}

->
var 속성과 scope 속성을 사용하면 <jsp:attribute> 액션 태그의 몸체 내용을 처리한 결과를 scope 속성에 지정한 영역에 저장
이때 var 속성을 이용해서 영역에 저장할때 사용할 이름을 지정.
위 코드는 PAGE영역(즉,태그 파일 내에서) "rs"라는 속성에 <jsp:attribute> 액션 태그의 몸체 처리 결과를 저장한다.
이후 EL을 이용해서 저장된 객체의 값을 사용할 수 있게 된다.

------

/3.3.3 동적 속성 전달
;기본적으로 attibute 디렉티브로 정의하지 않은 속성을 사용하면 에러 발생. 
BUT 동일한 태그 파일을 사용하더라도 상황에 따라서 attribute 디렉티브로 정의하지 않은 속성을 사용해야하는 경우도 있음

e.g)<select>와 <option>태그를 생성해주는 커스텀 태그 
<tf:select name="code" cod1="텍스트1" code2="텍스트2" code3="텍스트3" />
=>
<select name="code>
	<option value="code1">텍스트1</option>
	<option value="code2">텍스트2</option>
	<option value="code3">텍스트3</option>
</select>

=>
<tf:select> 태그를 특정 분야에서만 사용한다면 attribute 디렉티브를 이용해서 사용 가능한 모든 속성을 정의할 수 있음
BUT 범용적으로 사용할 수 있으려면 임의의 속성을 설정할 수 있어야 함.
=>
tag 디렉티브의 dynamic-attributes 속성에 독정 속성을 저장할 변수명을 입력
<%@ tag dynamic-attributes="dynamicMap"%>
...
${dynamicMap.attrName}..	<!-- attrName 속성값 -->


e.g)

/*	chap16/WebContent/WEB-INF/tag/select.tag	*/


<%@ tag body-content="empty" pageEncoding="utf-8" %>
<%@ tag trimDirectiveWhitespaces="true" %>
<%@ tag dynamic-attributes="optionMap" %>	<%--동적 속성을 저장할 EL 변수이름을 optionMap으로 설정 --%>
<%@ attribute name="name" required="true" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<select name="${name }">
	<c:forEach items="${optionMap}" var="option">
	<option value="${option.key}">${option.value} </option>
	</c:forEach>		
</select>



/*	chap16/WebContent/use_select.jsp	*/

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>태그 사용</title>
</head>
<body>

<tf:select name="code" rgb="RGB 모드" wb="흑백 모드"/> <%-- rgb와 wb 속성을 동적 속성으로 전달 --%>
<tf:select name="genre" rock="락" ballad="발라드" metal="메탈" />	<%-- rock,ballad,metal 속성을 동적 속성으로 전달 --%>

</body>
</html>


=>소스코드 보기
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>태그 사용</title>
</head>
<body>

<select name="code">
	<option value="wb">흑백 모드</option>
	<option value="rgb">RGB 모드</option>
</select>

<select name="genre">
	<option value="rock">락</option>
	<option value="ballad">발라드</option>
	<option value="metal">메탈</option>
</select>

-----------

//3.4 몸체 내용 처리
;<c:if> 태그는 test 속성값이 true일 경우 몸체 내용을 출력한다.

<c:if test="${someCondition}">
	someCondition이 true인 경우 몸체 내용을 출력
</c:if>

=> 태그 파일도 태그의 몸체 내용을 출력 & 데이터로 사용할 수 있고 반복적으로 몸체 내용을 출력할 수 있음.

=>태그 파일로 구현된 태그에 몸체를 전달하는 방법

1)시작 태그와 끝 태그 사이에 몸체 내용을 삽입(In JSP)
	<tf:someTagFile attr1="속성값">
		여기에 몸체 내용을 입력한다.
	</tf:someTagFile>

2)<jsp:body> 태그를 이용해서 몸체 내용을 전달
	<tf:someTagFile attr1="속성값">
		<jsp:attribute name="attr2">value</jsp:attribute>
		<jsp:body>
			여기에 몸체 내용을 입력한다.
		</jsp:body>
	</tf:someTagFile>

=>태그 파일에 몸체 내용을 전달할 때 주의 할점 : 스크립트 요소(표현식,스크립트릿)를 사용할 수 없음
	<tf:someTagFile attr1="속성값">
	<%=someVar%>	<%-- 에러 --%>
	</tf:someTagFile>

------

/3.4.1 EL과 태그를 처리한 몸체 내용 사용하기
;태그파일에서 몸체 내용의 EL 이나 액션 태그 등을 처리한 결과를 사용하려면
	-tag 디렉티브의 body-content 속성값을 scriptless로 지정(기본 값임)
	-<jsp:doBody> 액션태그를 이용해서 몸체 내용을 출력하거나 EL 변수로 저장
	
=><jsp:doBody> 액션태그
-<jsp:doBody /> : 몸체로 전달받은 내용을 그대로 출력
-<jsp:doBody var="변수명" scope="영역" />	
	: 몸체로 전달받은 내용을 var 속성으로 지정한 EL 변수에 저장한다. scope 속성을 이용해서 EL 변수를 저장할 영역을 지정한다. 기본값 : page
	
	
e.g) <jsp:doBody> 액션 태그를 이용해서 전달 받은 몸체 내용에서 HTML 태그를 제거해주는 기능을 제공하는 태그파일

	
/*	chap16/WebContent/WEB-INF/tag/removeHtml.tag	*/


<%-- 전달받은 몸체 내용에서 HTML 태그를 제거해주는 기능 제공 --%>
<%@ tag body-content="scriptless" pageEncoding="utf-8" %>
<%@ attribute name="length" type="java.lang.Integer" %>
<%@ attribute name="trail" %>
<%@ attribute name="trim" %>

<jsp:doBody var="content" scope="page" />	<%-- 몸체 내용을 jspContext 기본 객체의 content 속성에 저장 --%>
<%
	String content = (String)jspContext.getAttribute("content");
	
	if (trim != null && trim.equals("true")) {
		content = content.trim();
	}
	
	content = content.replaceAll(
		"<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?>", "");  // "<????>" -> "" 바꿔주는 정규식
	
	if (length != null && length.intValue() > 0 && content.length() > length.intValue()) {
		content = content.substring(0, length.intValue()); 
		
		if (trail != null) {
			content = content + trail;
		}
	}	
%>
<%=content %>




/*	chap16/WebContent/use_removeHtml.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.Date" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>removeHtml</title>
</head>
<body>

<c:set var="dateEL" value="<%=new Date() %>" />
<tf:removeHtml trim="true">
	<font size="10">현재 <style>시간</style>은 ${dateEL} 입니다.</font>
</tf:removeHtml>
<br>

<tf:removeHtml length="15" trail="..." trim="true"> <%-- 웹 컨테이너가 자동으로 문자열 값을 java.lang.Integer 타입으로 변환--%>
	<u>현재 시간</u>은 <b>${dateEL}</b>입니다.
</tf:removeHtml>
<br>

<tf:removeHtml length="15">
	<jsp:body><u>현재 시간</u>은 <b>${dateEL}</b>입니다.</jsp:body>
</tf:removeHtml>


</body>
</html>


<< 실행 결과 >>
현재 시간은 Fri Nov 11 21:05:51 KST 2016 입니다. 
현재 시간은 Fri Nov ... 
현재 시간은 Fri Nov 

==> 소스 코드 보기 하면

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>removeHtml</title>
</head>
<body>
<font size="10">현재 시간은 Tue Jan 24 16:12:22 KST 2017입니다.</font>
<br>
현재 시간은 Tue Jan ...
<br>
	현재 시간은 Tue J
</body>
</html>

------

/3.4.2 몸체 내용 자체를 데이터로 사용하기
;tag 디렉티브의 body-content 속성의 값을 tagdependent로 지정하면 몸체 내용에 포함된
 EL or 액션 태그 처리x -> 몸체 내용 자체를 텍스트 값으로 사용하게 됨
 
 
/*	chap16/WebContent/WEB-INF/tag/out.tag	*/
 
<%@ tag body-content="tagdependent" pageEncoding="utf-8" %> <%--몸체 내용을 텍스트 값으로 전달받도록 설정한다. --%>
<%@ tag trimDirectiveWhitespaces="true" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<jsp:doBody var="bodyText" /> <%-- <jsp:doBody>태그를 이용해서 몸체 내용을 bodyText라는 EL 변수에 저장한다. --%>
<c:out value="${bodyText}" escapeXml="true" /> 
<%--<c:out> 태그를 이용해서 bodyText 출력 // escapeXml==true => '<'와 '>'문자를 치환해서 출력 --%>



/*	use_out.jsp		*/	


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.Date" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>out</title>
</head>
<body>

<%-- EL 문법의 문자열을 태그의 몸체 값으로 전달--%>
<tf:out>
	<jsp:body><u>현재 시간</u>은 <b>${dateEL }</b> 입니다.</jsp:body>
</tf:out>

<br>

<%-- 표현식,EL문법의 문자열을 태그의 몸체 값으로 전달--%>
<tf:out>
	<%=new Date() %> <u>현재 시간</u>은 <b>${dateEL }</b>입니다.
</tf:out>




</body>
</html>


<< 실행 결과 >>


<u>현재 시간</u>은 <b>${dateEL }</b> 입니다. 
<%=new Date() %> <u>현재 시간</u>은 <b>${dateEL }</b>입니다. 

------

/3.4.3 몸체 내용을 반복적으로 사용하기
;몸체 내용을 반복적 사용하려면 <jsp:doBody> 액션 태그를 반복적으로 실행

/*	chap16/WebContent/WEB-INF/tag/multiple.tag	*/


<%@ tag pageEncoding="utf-8" %>
<%@ tag trimDirectiveWhitespaces="true" %>
<%@ attribute name="count" required="true" type="java.lang.Integer" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:forEach begin="${1}" end="${count}">
<jsp:doBody />
</c:forEach>





/*chap16/WebContent/use_multiple.jsp	*/



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>multiple 태그 사용</title>
</head>
<body>

<c:set var="num" value="${1 }" />	<%-- 초기 num 에 1 넣고 출력 --%>
<tf:multiple count="10">
${num }<br/>
<c:set var="num" value="${num+1 }" /> <%-- num=num+1 증가 --%>
</tf:multiple>


</body>
</html>



<< 실행 결과 >>
1
2
3
4
5
6
7
8
9
10

-----------

//3.5 변수의 생성
;JSTL 태그 <c:forEach> 태그 : var 속성을 이용해서 태그 몸체 내부에서 사용될 EL 변수를 정의할 수 있는 기능을 제공.
          <c:set> 태그 : 태그를 사용하는 페이지에 새로운 EL 변수를 추가
e.g)
<!-- 태그 몸체에서 사용 가능한 EL 변수(prod) 추가 -->
<c:forEach var="prod" items="${prodList}">
${prod.name}
</c:forEach>

<!-- 태그 실행 이후 사용 가능한 EL 변수(name) 추가 -->
<c:set var="name" value="bk" />
${name}

------		  

/3.5.1 variable 디렉티브와 name-given을 이용한 변수 추가
;태그 파일에서 EL 변수를 추가하려면 variable 디렉티브를 사용하면 된다.
	<%@ variable name-given="EL 변수" variable-class="변수타입" scope="변수범위" />
=>

-name-given : 이 태그를 호출한 페이지에 추가할 변수 이름을 정의한다.
-variable-class : 추가될 변수의 타입을 지정한다. 기본값은 java.lang.String
-scope : 변수의 범위를 지정한다. AT_BEGIN,AT_END,NESTED(기본) 중 한 개의 값을 갖는다.

scope 예제(+그림)
<tf:someTag> (1) </tf:someTag> (2)
AT_BEGIN : (1) + (2)
NESTED : (1)
AT_END : (2)


e.g)variable 디렉티브를 이용해서 태그 몸체 내부에서 사용할 수 있는 EL 변수를 추가하는 태그 파일


/*	chap16/WebContent/WEB-INF/tag/sum.tag	*/



<%@ tag pageEncoding="utf-8" %>
<%@ tag trimDirectiveWhitespaces="true" %>
<%@ attribute name="begin" required="true" type="java.lang.Integer" %>
<%@ attribute name="end" required="true" type="java.lang.Integer" %>

<%-- 이름이 sum 태그의 몸체 내부에서 사용 가능한 EL 변수 추가 --%>
<%@ variable name-given="sum" variable-class="java.lang.Integer" scope="NESTED" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<c:set var="sum" value="${0}"/> <%--EL 변수 값 설정 --%>
<c:forEach var="num" begin="${begin}" end="${end}">
<c:set var="sum" value="${sum+num }"/> <%--EL 변수 값 설정 --%>
</c:forEach>
<jsp:doBody/> <%-- <jsp:doBody>를 실행하면, 몸체 내용을 실행하기 전에 태그 파일에서 정의한 변수 sum을 태그를 호출한 페이지에 전달--%>




/*	chap16/WebContent/use_sum.jsp	*/



<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>sum사용</title>
</head>
<body>

<tf:sum begin="1" end="10">
1-10까지 합 : ${sum}	<%-- sum.tag 파일에서 생성한 EL 변수 sum을 사용한다. --%>
</tf:sum>

</body>
</html>


<< 실행 결과 >>
1-10까지 합 : 55 

------

/3.5.2 variable 디렉티브와 name-from-attribute 속성을 이용한 변수 생성
;name-given : 정해진 변수명만 사용 -> 원하는 이름을 갖는 변수를 추가하고 싶은 경우
e.g) <c:forEach var="name"...>
		${name}
	 </c:forEach>
==>name-from-attribute 속성을 사용 -> 원하는 이름을 갖는 변수를 추가할 수 있음.

e.g)사용예제

<%@ attribute name="var" rtexprvalue="false" required="true" type="java.lang.String" %>
<%@ variable alias="localName" name-from-attribute="var" scope="영역"%>
...
<c:set var="localName" value="..."/>

=>
alias : 태그 파일에서 변수의 값을 설정할 때 사용할 이름 지정
name-from-attribute : 변수의 이름을 생성할 때 사용할 속성의 이름을 지정한다.




e.g)removeHtml.tag 파일을 일부 수정해서, 처리 결과를 출력하지 않고 변수에 저장하도록 구현하는 예제



/*	chap16/WebContent/WEB-INF/tag/removeHtml.tag	*/


<%@ tag body-content="scriptless" pageEncoding="utf-8" %>
<%@ attribute name="length" type="java.lang.Integer" %>
<%@ attribute name="trail" %>
<%@ attribute name="trim" %>
<%@ attribute name="var" type="java.lang.String" rtexprvalue="false" required="true" %>
<%@ variable name-from-attribute="var" alias="result" variable-class="java.lang.String" scope="AT_END" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<jsp:doBody var="content" scope="page" />
<%
String content = (String)jspContext.getAttribute("content");
if (trim != null && trim.equals("true")) {
	content = content.trim();
}
content = content.replaceAll(
	"<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?>", ""); 

if (length != null && length.intValue() > 0 &&
	content.length() > length.intValue()) {
	content = content.substring(0, length.intValue()); 
	if (trail != null) {
		content = content + trail;
	}
}
%>
<c:set var="result" value="<%=content %>" />






/*	chap16/WebContent/use_removeHtmlVar.jsp		*/



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.Date" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="tf" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>removeHtmlVar</title>
</head>
<body>

<c:set var="dateEL" value="<%=new Date() %>"/>
<tf:removeHtmlVar trim="true" var="removed">
	<font size="10">현재 <style>시간</style>은 ${dateEL}입니다.</font>
</tf:removeHtmlVar>

처리결과:${removed}

</body>
</html>


<< 실행 결과 >>
처리결과:현재 시간은 Sat Nov 12 21:47:20 KST 2016입니다. 


=>JSP는 var 속성을 사용해서 원하는 이름을 갖는 EL 변수에 removeHtmlVar.tag의 처리 결과를 저장할 수 있음.

------

/3.5.3 변수의 동기화 처리
;태그파일이 생성하는 변수는 NESTED, AT_BEGIN, AT_END 의 세 가지 범위 중 하나
->JSP 컨테이너는 태그 파일에서 생성한 변수의 값을 태그 파일을 호출한 페이지의 변수의 값과 동기화 함.(방식은 범위에따라 다름)


구분					AT_BEGIN		NESTED			AT_END
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
태그시작				아무것도 안함		EL 변수 저장		아무것도 안 함
<jsp:doBody/>실행 전	태그->페이지 복사	태그->페이지 복사	아무것도 안 함
태그 끝				태그->페이지 복사	EL 변수 복구		태그->페이지 복사


e.g) 태그 파일 내 변수 : T // 태그 파일이 호출하는 페이지 내 변수 : P

-태그 -> 페이지 복사 : 태그 파일에 T가 존재 -> 그 값을 이용해서 호출하는 페이지의 P를 생성(또는 수정).
					       T가 존재X -> 호출하는 페이지의 page 영역에서 P를 삭제
-EL 변수 저장	: 호출하는 페이지의 P의 값을 저장한다.(만약 P가 존재하지 않았다면,존재하지 않았다는 것도 기억)
-EL 변수 복구 : 'EL  변수 저장' 시점에서 저장했던 P의 값을 호출하는 페이지에 복구한다. 
			 만약 P가 존재하지 않았다면 호출하는 페이지에도 존재하지 않도록 한다.						   
			 

1)AT_BEGIN 예제
/*	example1.tag	*/


<%@ variable name-given="x" scope="AT_BEGIN" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

${x} <%-- (x==null), 태그 파일 내에서의 x변수 --%>

<c:set var="x" value="2" />
<jsp:doBody /> <%-- 몸체 내용을 처리하기 전에 변수 x가 페이지에서 복사-->

${x} <%-- (x==2), 페이지에서 같은 이름의 변수 값을 바꿔도 반영 안됨.
<c:set var="x" value="4" />



/*	use_example1.jsp	*/


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="my" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

<c:set var="x" value="1" />
${x}(j) <%--(x==1) --%>

<my:example1>
	${x}(j) <%--(x==2) 태그 파일의 변수 x가 복사된 값 --%>
	<c:set var="x" value="3" /> <%--페이지에서 x를 바꿔도 태그 파일에 복사 안됨 --%>
</my:example1>
${x}(j) <%--(x==2) 태그 파일의 변수 x가 복사된 값 --%>



</body>
</html>


<< 실행 결과 >>
1(j) 
2(j) 
2 4(j) 



2)NESTED 영역 예제


/*	example2.tag	*/

<%@ variable name-given="x" scope="NESTED" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

${x} <%-- x==null --%>

<c:set var="x" value="2" />
<jsp:doBody />

${x} <%-- x==2 --%>

<c:set var="x" value="4" />





/*	use_example2.jsp	*/



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="my" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

<c:set var="x" value="1"/>
${x}(jsp)
<my:example2>
	${x}(jsp) <%-- x==2 --%>
	<c:set var="x" value="3" />
</my:example2>

<%--태그 종료 후 변수 x값 복구 --%>
${x}(jsp) <%-- x==1 --%>

</body>
</html>



<< 실행 결과 >>
1(jsp) 2(jsp) 2 1(jsp) 



=>
태그 시작 : 변수 저장
태그 종료 : 변수 복구








































