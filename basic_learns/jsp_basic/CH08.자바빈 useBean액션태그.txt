-----------CH08.자바빈과 <jsp:useBean> 액션태그-----------------
;이장에서 다루는 내용
-자바빈과 프로퍼티
-<jsp:useBean> 액션태그

=> JSP 기반 웹 어플리케이션에서 정보를 표현할 때 사용하는 것 중 하나가 자바빈(JavaBeans)
 (회원정보, 게시판 글 등의 정보를 출력할때, 저장하고 있는 자바빈 객체를 사용)
 
---------------------------------------------------------------------------------------------

//01 자바빈(JavaBeans)
;자바빈은 속성(데이터), 변경 이벤트, 객체 직렬화를 위한 표준
=> 자바빈 규약을 따르는 클래스를 자바빈 이라고 부름.
e.g)
public class BeanClassName implements java.io.Serializable {
	/* 값을 저장하는 필드 */
	private String value;
	
	/* BeanClassName의 기본 생성자*/
	public BeanClassName(){}
	
	/* 필드의 값을 읽어오는 값 */
	public String getValue(){
		return value;
	}
	
	/* 필드의 값을 변경하는 값 */
	public void setValue(String value){
		this.value=value;
	}
}




-----------
//자바 빈 관련 액션 태그

// 1.1 자바빈 프로퍼티
;프로퍼티 : 자바빈에 저장되는 값
=>getter, setter의 역할이 적용됨 boolean express 는 isFinished()로
=>getter, setter는 필요에의해 정의

public class Temperature {
	private double celsius;
	
	public double getCelsius(){
		return celsius;
	}
	
	public void setCelsius(double celsius){
		this.celsius=celsius;
	}
	
	//읽기 전용
	public double getFahrenheit(){
		return (celsius*9.0/5.0+32.0);
	}
}

---------------------------------------------------------------------------------------------

//02 예제에서 사용할 자바빈 클래스

MemberInfo 자바빈의 프로퍼티 목록
id				String				읽기/쓰기
password		String				읽기/쓰기
name			String				읽기/쓰기
address			String				읽기/쓰기
regesterData	java.util.data		읽기/쓰기
email			String				읽기/쓰기


package chap08;

import java.util.Calendar;

public class MemberInfo {
	private String id;
	private String password;
	private String name;
	private String registerDate;
	private String email;
	
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getRegisterDate() {
		return registerDate;
	}
	public void setRegisterDate() {
		Calendar cal=Calendar.getInstance();
		int year=cal.get(Calendar.YEAR);
		int month=cal.get(Calendar.MONTH)+1;
		int date=cal.get(Calendar.DATE);
		registerDate=new String(year+"년 "+month+"월 "+date+"일");		
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	
}


---------------------------------------------------------------------------------------------

//03 <jsp:useBean> 태그를 이용한 자바 객체 사용
예제
<%
	MemberInfo mi=new MemberInfo();
	mi.setId("zaccoding");
	mi.setName("김명수느님");
%>
이름 - <%=mi.getName() %> , 아이디 - <%=mi.getId() %>

-----------

//3.1 <jsp:useBean> 액션 태그를 사용하여 객체 생성하기

<jsp:useBean id="[빈이름]" class="[자바빈클래스이름]" scope="[범위]" />

id		: JSP 페이지에서 자바빈 객체에 접근할 때 사용할 이름을 지정한다.
class	: 패키지 이름을 포함한 자바빈 클래스의 완전한 이름을 입력한다.
scope	: 자바빈 객체를 저장할 영역을 지정한다. page, request, session, application 중 하나를 값으로 갖는다.
		  기본은 page
-- scope 속성 값 --		  
page 	: 자바 빈은 생성된 페이지 내에서만 접근되어 사용할 수 있다.
request : 자바 빈이 생성된 요청을 수행하는 페이지들에서 사용할 수 있다.
session : 자바 빈이 생성된 세션에서 요청을 처리하는 페이지들에서 사용할 수 있다.
application : 자바 빈이 생성된 응용 프로그램에 포함된 모든 페이지들에서 사용할 수 있다.
		  
e.g)
<jsp:useBean id="info" class="chap08.memebr.MemberInfo" scope="request" />

=>info에 class의 객체 생성 & request에 "info" 속성의 값으로 생성된 객체를 저장 
i.e
MemberInfo info=new MemberInfo();
request.setAttribute("info",info);

=> <jsp:useBean> 액션 태그는 지정한 영역에 이미 id 속성에서 지정한 이름의 속성값이 존재하면 기존 객체를 사용
i.e
MemberInfo info=(MemberInfo)request.getAttribute("info");
if(info==null){
	info==new MemberInfo();
	request.setAttribute("info",info);
}

=> <jsp:useBean> 액션 태그는 scope 속성값에 따라 객체는 서로 다른 기본 객체에 저장된다.
-page : pageContext 기본 객체 (자바 빈은 생성된 페이지 내에서만 접근되어 사용할 수 있다.)
-request : request 기본 객체 (자바 빈이 생성된 요청을 수행하는 페이지들에서 사용할 수 있다.)
-session : session 기본 객체 (자바 빈이 생성된 세션에서 요청을 처리하는 페이지들에서 사용할 수 있다.)
-application : application 기본 객체 (자바 빈이 생성된 응용 프로그램에 포함된 모든 페이지들에서 사용할 수 있다.)



/*useBean 을 이용하여 기본 객체를 생성하고 다른 jsp에 넘겨서 생성한 객체를 사용하는 예제 */
/* chap08/makeObject.jsp  */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<jsp:useBean id="member" scope="request" class="chap08.MemberInfo" /> <!-- 이름이 member인 객체를 생성해서 request 기본 객체에 저장한다. -->
<%	
	//<jsp:useBean> 액션 태그의 id 속성에 지정한 이름을 변수명으로 사용하기 때문에,
	//스크립트 코드에서 이 이름을 사용하여 생성한 객체에 접근할 수 있다.
	member.setId("zaccoding");	
	member.setName("ZAC");
%>
<jsp:forward page="/useObject.jsp" />




/*  chap08/useObject.jsp   */



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<jsp:useBean id="member" scope="request" class="chap08.MemberInfo" />
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>인사말</title>
</head>
<body>
<%=member.getName() %> <%=member.getId() %> 회원님
반갑습니다.

</body>
</html>




<< 실행 결과 : http://localhost:8080/chap08/makeObject.jsp >>
Zac zaccoding 회원님 반갑습니다. 


=>useObject.jsp를 직접 실행하면 request 기본 객체에 "memebr" 속성이 존재하지 않으므로 새로운 MemberInfo 인스턴스 생성
null null 회원님 반갑습니다.  <<이렇게 출력됨


=> <jsp:useBean> 액션 태그에 class 대신 type를 사용가능
<jsp:useBean id="member" type="chap08.MemberInfo" scope="request"/>

->type 속성을 사용하면 지정한 영역에 이미 객체가 존재한다고 가정.
i.e
MemberInfo member=(MemberInfo)request.getAttribute("member");
if(member==null)
	//에러 발생
.....

-----------

//3.2 <jsp:setProperty> 액션 태그와 <jsp:getProperty> 액션 태그

1)<jsp:setProperty> 액션 태그
;생성한 자바빈 객체의 프로퍼티 값을 변경할 수 있다.
<jsp:setProperty name="[자바빈]" property="이름" value="값" />

-name : 프로퍼티의 값을 변경할 자바빈 객체의 이름을 지정한다. <jsp:useBean>액션 태그의 id 속성에서 지정한 값을 사용한다.
-property : 값을 지정할 프로퍼티의 이름을 지정한다.
-value : 프로퍼티의 값을 지정한다. 표현식(<%=값%>)이나 EL(${값})을 사용할 수 있다. (EL은 11장에서)

e.g)자바빈 객체의 name 프로퍼티의 값을 "Zac"으로 지정하고 싶으면
<jsp:useBean id="member" class="chap08.MemberInfo" />
<jsp:setProperty name="memebr" property="name" value="Zac" />

e.g)memberId 파라미터의 값을 자바빈 객체의 id 프로퍼티의 값으로 지정하고 싶다면 
<jsp:setProperty name="memebr" property="id" param="memberId" /> <!-- param과 value는 같이 쓸 수 없음 -->

e.g)property 속성의 값을 "*"로 지정하면, 각 프로퍼티의 값을 같은 이름을 갖는 파라미터의 값으로 설정한다.
<jsp:useBean id="member" class="chap08.MemberInfo" />
<jsp:setProperty name="memebr" property="*" />
=>name 요청 파라미터와 email 요청 파라미터가 있다고 가정하면, 
name 파라미터의 값을 name 프로퍼티의 값으로 설정 & email 파라미터의 값을 email 프로퍼티의 값으로 지정.




2)<jsp:getProperty> 액션 태그
<jsp:getProperty name="자바빈이름" property="프로퍼티이름" />
-name : <jsp:useBean>의 id 속성에서 지정한 자바빈 객체의 이름을 지정한다.
-property :  출력할 프로퍼티의 이름을 지정한다.

e.g)자바빈 객체의 name 프로퍼티의 값을 출력하고 싶으면
<jsp:getProperty name="member" property="name" />





/*  회원가입 양식에 값을 입력한 후 [회원가입] 버튼을 누르면 입력한 값을 출력 해주는 예제  */


/* memebrshipForm.jsp */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>회원가입 입력 폼</title>
</head>
<body>
<form action="/chap08/processJoining.jsp" method="post"> <!-- [회원가입] 버튼을 누르면 입력한 데이터를 POST 방식으로 processJoining.jsp에 전달 -->
<table border="1" cellpadding="0" cellspacing="0">
<tr>
	<td>아이디</td>
	<td colspan="3"><input type="text" name="id" size="10"></td>
</tr>
<tr>
	<td>이름</td>
	<td><input type="text" name="name" size="10"></td>
	<td>이메일</td>
	<td><input type="text" name="email" size="10"></td>
</tr>	
<tr>
	<td colspan="4" align="center">
	<input type="submit" value="회원가입">
	</td>	
</tr>
</table>
</form>
</body>
</html>





/* processJoining.jsp   */


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
	request.setCharacterEncoding("utf-8");	//읽어올 파라미터의 캐릭터 인코딩을 UTF-8로 지정
%>
<jsp:useBean id="memberInfo" class="chap08.MemberInfo" />	<!-- MemberInfo 자바빈 클래스의 객체를 생성(디폴트 생성자) & memberInfo에 저장 -->
<jsp:setProperty name="memberInfo" property="*" />			<!-- 파라미터 값을 memberInfo 자바빈 객체의 프로퍼티 값으로 지정 -->
<jsp:setProperty name="memberInfo" property="password" value="<%=memberInfo.getId() %>" />
<!-- memberInfo 자바빈 객체의 password 프로퍼티 값을 memberInfo.getId()와 동일하게 지정한다. -->
<%
	memberInfo.setRegisterDate();	//가입날짜 set
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>가입</title>
</head>
<body>

<table width="400" border="1" cellpadding="0" cellspacing="0">
<tr>
	<td>아이디</td>
	<td><jsp:getProperty name="memberInfo" property="id"/></td>
	<td>암호</td>
	<td><jsp:getProperty name="memberInfo" property="password"/></td>
</tr>
<tr>
	<td>이름</td>
	<td><jsp:getProperty name="memberInfo" property="name"/></td>
	<td>이메일</td>
	<td><jsp:getProperty name="memberInfo" property="email"/></td>
</tr>
<tr>
	<td>가입날짜</td>
	<td colspan="3"><jsp:getProperty name="memberInfo" property="registerDate"/></td>
</tr>	

</table>

</body>
</html>






=>만약 <jsp:setProperty> 액션 태그를 사용하지 않았으면
<jsp:setProperty name="memberInfo" property="*" />를
memberInfo.setId(request.getPrameter("id");
memberInfo.setName(request.getPrameter("name");
memberInfo.setEmail(request.getPrameter("email");

=>사용자가 입력한 폼 값을 자바빈 객체에 저장할 때에는 <jsp:setProperty> 액션 태그를 사용할 수 있도록
파라미터의 이름과 자바빈 프로퍼티의 이름을 맞춘다.


-----------

//3.3 자바빈 프로퍼티 타입에 따른 값 매핑

e.g)자바빈 프로퍼티의 타입이 int인 경우
<jsp:setProperty name="someBean" property="width" value="100" />

=>
Boolean Byte Short Character Integer Long Double Float 클래스를 이용해서
Inter.valueOf(String)을 얻으면 됨.


*<jsp:useBean> 액션 태그의 사용 감소 이유 :
-18장에서 MVC를 사용하는 경우 로직은 자바 클래스에서 처리하고 그 결과를 JSP를 통해 보여주게 된다.
-표현 언어(Expression Language)가 추가
<jsp:getProperty name="memberInfo" property="email" />
->
${memberInfo.email}





















