//리스트의 이해

1)리스트의 구분
 -순차 리스트 ; 배열을 기반으로 구현된 리스트
 -연결 리스트 ; 메모리의 동적 할당을 기반으로 구현된 리스트
 
2)리스트의 특징
 -저장 형태 : 데이터를 나란히(하나의 열로)저장한다.
 -저장 특성 : 중복이 되는 데이터의 저장을 허용한다.
(특성을 먼저 정의하고 -> 구현방법 )

3)배열 기반 리스트의 장점과 단점
단점 :
 -배열의 길이가 초기에 결정되어야 한다. 변경이 불가능하다.
 -삭제의 과정에서 데이터의 이동(복사)가 매우 빈번히 일어난다.
장점 :
 -데이터의 참조가 쉽다. 인덱스 값 기준으로 어디든 한 번에 참조 가능. 
 
 

-----------------------------------------------------------------------
//리스트의 ADT

*void ListInit(List* plist);	//리스트의 초기화(C에서)
 -초기화할 리스트의 주소 값을 인자로 전달된다.
 -리스트 생성 후 제일 먼저 호출되어야 하는 함수이다.
 
*void LInsert(List* plist, LData data);	//데이터 저장
 -리스트에 데이터를 저장한다. 매개변수 data에 전달된 값을 저장한다.

*int LFirst(List* plist, LData* pdata);	//저장된 데이터의 탐색 및 탐색 초기화
 -첫 번째 데이터가 pdata가 가리키는 메모리에 저장된다.
 -데이터의 참조를 위한 초기화가 진행된다.
 -참조 성공 시 TRUE(1), 실패시 FALSE(0)을 반환

*int LNext(List* plist, LData * pdata);	//다음 데이터의 참조(반환)을 목적으로 호출
 -참조된 데이터의 다음 데이터가 pdata가 가리키는 메모리에 저장된다.
 -순차적인 참조를 위해서 반복 호출이 가능하다.
 -참조를 새로 시작하려면 먼저 LFirst 함수를 호출해야 한다.
 -참조 성공 시 TRUE(1), 실패시 FALSE(0)을 반환 

*LData LRemove(List* plist);	//바로 이전에 참조(반환)이 이뤄진 데이터의 삭제
 -LFirst 또는 LNext 함수의 마지막 반환 데이터를 삭제한다.
 -삭제된 데이터는 반환된다.
 -마지막 반환 데이터를 삭제하므로 연이은 반복 호출을 허용하지 않는다.

*int LCount(List* plist);		//현재 저장되어 있는 데이터의 수 반환
 -리스트에 저장되어 있는 데이터의 수를 반환한다.

----------------------------------------------------------------------- 
//ArrayList.h

#ifndef __ARRAY_LIST_H__
#define __ARRAY_LIST_H__

#define TRUE	1
#define FALSE	0

/*** ArrayList의 정의 ****/
#define LIST_LEN	100
typedef int LData;	//저장할 대상의 자료형을 변경을 위한 typedef 선언

typedef struct __ArrayList
{
	LData arr[LIST_LEN];
	int numOfData;
	int curPosition;
} ArrayList;


/*** ArrayList와 관련된 연산들 ****/
typedef ArrayList List;	//리스트의 변경을 용이하게 하기 위한 typedef 선언

void ListInit(List * plist);				//초기화
void LInsert(List * plist, LData data);		//데이터 저장

int LFirst(List * plist, LData * pdata);	//첫 데이터 참조
int LNext(List * plist, LData * pdata);		//두 번째 이후 데이터 참조

LData LRemove(List * plist);				//참조한 데이터 삭제
int LCount(List * plist);					//저장된 데이터의 수 반환

#endif


-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------






 