--병합 정렬(Merge Sort)--

=>분할정복법 3단계 알고리즘
1단계 분할(Divide)		해결이 용이한 단계까지 문제를 분할해 나간다
2단계 정복(Conquer)	해결이 용이한 수준까지 분할된 문제를 해결한다.
3단계 결합(Combine)	분할해서 해결한 결과를 결합하여 마무리 한다.

#include <stdio.h>
#include <stdlib.h>

void MergeToArea(int arr[], int left, int mid, int right) {
	int fIdx = left;
	int rIdx = mid + 1;
	int i;

	int* sortArr = (int*)malloc(sizeof(int)*(right + 1));
	int sIdx = left;

	while (fIdx <= mid&&rIdx <= right) {
		if (arr[fIdx] < arr[rIdx]) {
			sortArr[sIdx] = arr[fIdx++];
		}
		else {
			sortArr[sIdx] = arr[rIdx++];
		}
		sIdx++;
	}
	
	if (fIdx > mid) {
		for (i = rIdx; i <= right; i++, sIdx++) {
			sortArr[sIdx] = arr[i];
		}
	}
	else {
		for (i = fIdx; i <= mid; i++, sIdx++) {
			sortArr[sIdx] = arr[i];
		}		
	}

	for (i = left; i <= right; i++) {
		arr[i] = sortArr[i];
	}

	free(sortArr);
}

void MergeSort(int arr[], int left, int right) {
	int mid;

	if (left < right) {	//만약 분할이 덜 이뤄졌으면
		//중간 지점을 구한다.
		mid = (left + right) / 2;

		//e둘로 나눠서 각각을 정렬한다.
		MergeSort(arr, left, mid);		//left~mid에 위치한 데이터 정렬
		MergeSort(arr, mid + 1, right);	//mid+1~right에 위치한 데이터 정렬

		MergeToArea(arr, left, mid, right); //정렬된 두 배열을 병합한다.
	}
}


int main(void) {
	int arr[8] = { 8,2,3,7,1,5,4,6 };
	int size = sizeof(arr) / sizeof(int);
	int i;
		
	MergeSort(arr, 0, size-1);

	for (i = 0; i < size; i++) {
		printf("%d ", arr[i]);
	}

	printf("\n\n");
	
	return 0;
}

