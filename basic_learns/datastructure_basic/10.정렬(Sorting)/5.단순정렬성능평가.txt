성능평가
1)비교의 횟수 	: 두 데이터간의 비교연산의 횟수
2)이동의 횟수 	: 위치의 변경을 위한 데이터의 이동 횟수

			비교의 횟수 		이동의 횟수
버블정렬		O(n^2)			O(n^2)
선택정렬		O(n^2)			O(n)	
삽입정렬		O(n&2)			O(n^2)	

	
	
	
1.버블 정렬
	for (i = 0; i < size - 1; i++) {
		for (j = 0; j < size - i-1; j++) {
			if (arr[j] > arr[j + 1]) {	//버블정렬의 비교연산
				temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}

=>
1)비교의 횟수
:데이터가 n개 일때, 비교 횟수
(n-1) + (n-2) + ... + 2 + 1
=>시그마 => O(n^2)
2)이동의 횟수
:최선의 경우 -> 이동 한번도X
 최악의 경우 -> 비교연산 *3 
=>O(n^2)


2.선택정렬
	for (i = 0; i < size - 1; i++) {
		maxIdx = i;
		for (j = i + 1; j < size; j++) {
			if (arr[j] < arr[maxIdx])	//선택정렬의 비교연산
				maxIdx = j;
		}
		temp = arr[i];
		arr[i] = arr[maxIdx];
		arr[maxIdx] = temp;
	}

=>
1)비교의 횟수
:데이터가 n개 일때, 비교 횟수
(n-1) + (n-2) + ... + 2 + 1
=>시그마 => O(n^2)
2)이동의 횟수
=>O(n)


3.삽입정렬
	for (i = 1; i < size; i++) {
		insData = arr[i];
		for (j = i-1; j >= 0; j--) {			
			if (insData < arr[j]) {	//데이터간 비교 연산
				arr[j+1] = arr[j];				
			}			
			else {
				break;
			}
		}
		arr[j+1] = insData;	//데이터 이동의 핵심 연산	
	}

1)비교의 횟수
:데이터가 n개 일때, 비교 횟수
1+2+...+(n-2)+(n-1)
=>시그마 => O(n^2)
2)이동의 횟수
=>O(n^2)










