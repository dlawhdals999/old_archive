import java.util.Arrays;

public class Main {
	// 1.버블 정렬
	public static void bubbleSort(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			for (int j = i; j < arr.length - i - 1; j++) {
				if (arr[j] > arr[j + 1]) {
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
	}

	// 2.선택정렬
	public static void selectSort(int[] arr) {
		int maxIdx;
		for (int i = 0; i < arr.length - 1; i++) {
			maxIdx = i;
			for (int j = i + 1; j < arr.length; j++) {
				if (arr[maxIdx] > arr[j])
					maxIdx = j;
			}
			int temp = arr[maxIdx];
			arr[maxIdx] = arr[i];
			arr[i] = temp;
		}
	}

	// 3.삽입정렬
	public static void insertionSort(int[] arr) {
		int j = 1;
		for (int i = 1; i < arr.length; i++) {
			int tempData = arr[i];
			for (j = i - 1; j >= 0; j--) {
				if (tempData < arr[j])
					arr[j + 1] = arr[j];
				else
					break;
			}
			arr[j + 1] = tempData;
		}
	}

	// 4.병합정렬(분할)
	public static void mergeSort(int[] arr, int left, int right) {
		if (left < right) {
			int mid = (left + right) / 2;
			// 분할
			mergeSort(arr, left, mid);
			mergeSort(arr, mid + 1, right);
			// 병합
			mergeToArea(arr, left, mid, right);
		}
	}

	// 병합정렬(병합)
	public static void mergeToArea(int[] arr, int left, int mid, int right) {
		int[] sortArr = new int[arr.length];

		int idx = left;
		int low = left;
		int high = mid + 1;

		while (low <= mid && high <= right) {
			if (arr[low] < arr[high]) {
				sortArr[idx] = arr[low++];
			} else {
				sortArr[idx] = arr[high++];
			}
			idx++;
		}

		if (low > mid) {
			for (int i = high; i <= right; i++, idx++) {
				sortArr[idx] = arr[i];
			}
		} else {
			for (int i = low; i <= mid; i++, idx++) {
				sortArr[idx] = arr[i];
			}
		}

		for (int i = left; i <= right; i++) {
			arr[i] = sortArr[i];
		}
	}

	// 5.퀵정렬
	public static void quickSort(int[] arr, int left, int right) {
		if (left < right) {
			int pivot = partition(arr, left, right);

			quickSort(arr, left, pivot - 1);
			quickSort(arr, pivot + 1, right);
		}
	}

	public static int partition(int[] arr, int left, int right) {
		int pivot = arr[left];
		int low = left + 1;
		int high = right;

		while (low <= high) {
			while (arr[low] <= pivot && low <= high) {
				low++;
			}

			while (arr[high] >= pivot && low <= high) {
				high--;
			}
			
			if (low < high) {
				int temp = arr[low];
				arr[low] = arr[high];
				arr[high] = temp;
			}
		}

		if (left < high) {
			int temp = arr[left];
			arr[left] = arr[high];
			arr[high] = temp;
		}

		return high;
	}

	public static void main(String[] args) {
		int[] arr = new int[] { 2, 5, 12345, 3, 121, 3, 20 };
		int[] testArr;
		System.out.println("[원본]");
		System.out.println(Arrays.toString(arr));
		System.out.println();

		// 1.버블 정렬
		System.out.println("[버블정렬]");
		testArr = arr.clone();
		bubbleSort(testArr);
		System.out.println(Arrays.toString(testArr));
		System.out.println();

		// 2.선택 정렬
		System.out.println("[선택정렬]");
		testArr = arr.clone();
		selectSort(testArr);
		System.out.println(Arrays.toString(testArr));
		System.out.println();

		// 3.삽입 정렬
		System.out.println("[삽입정렬]");
		testArr = arr.clone();
		insertionSort(testArr);
		System.out.println(Arrays.toString(testArr));
		System.out.println();

		// 4.병합 정렬
		System.out.println("[병합정렬]");
		testArr = arr.clone();
		mergeSort(testArr, 0, testArr.length - 1);
		System.out.println(Arrays.toString(testArr));
		System.out.println();

		// 5.힙정렬
		System.out.println("[퀵정렬]");
		testArr = arr.clone();
		quickSort(testArr, 0, arr.length - 1);
		System.out.println(Arrays.toString(testArr));
		System.out.println();

		System.out.println("[]");

	}
}
