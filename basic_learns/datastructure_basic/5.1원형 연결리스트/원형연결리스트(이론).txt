원형 연결 리스트
필요한 이유 : 시스템 레벨에서 활용 => 메모리를 순환적으로 사용할 수 있는 모델(OS/HW를 컨트롤 할 때)
(e.g round-robin scheduling)

기본 모델 : 그림사진

특징 : 
head or tail에 추가하는 경우
같은 점 : 두 경우의 노드 연결 순서가 같다.
다른 점 : head가 가리키는 노드가 다르다.

=>
노드의 저장 순서를 근거로 i.e 포인터변수가 가리키는 것을 근거로 머리,꼬리를 구분
BUT 메모리상으로는 사실상 머리와 꼬리의 구분이 없다.

//원형 연결 리스트의 대표적인 장점 
;"단순 연결 리스트처럼 머리와 꼬리를 가리키는 포인터 변수를 각각 두지 않아도, 
하나의 포인터 변수만 있어도 머리 또는 꼬리에 노드를 간단히 추가할 수 있다."
=>변형된 원형 연결 리스트는 tail을 기준으로 구현.

;머리와 꼬리를 구분하지 않는다.(게임에서 A -> B -> C -> A.. 다시 돌아옴)


