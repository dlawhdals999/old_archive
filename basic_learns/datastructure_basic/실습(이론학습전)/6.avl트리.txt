#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>

typedef struct node {
	int data;
	int level;
	struct node *Slink, *Llink;
}NODE;

void print_menu(NODE *); //메뉴출력
void ins(void);    //데이터 입력
void insert_AVL(NODE *, int); //노드 생성 + 연결
NODE* get_node(void);   //동적할당 
void LevModify(NODE *);   //Level 변경
void Rotation_Check(NODE *); //
int LevCheck(NODE *); //자식과의 레벨 차이
void RRRotation(NODE*, NODE*); //RR로테이션함수
void RLRotation(NODE*, NODE*); //RL로테이션함수
void LLRotation(NODE*, NODE*); //LL로테이션함수
void LRRotation(NODE*, NODE*); //LR로테이션함수
void gotoxy(int, int);     //좌표 출력
void show_tree(NODE *); //트리 보여주기
void init_show_tree(NODE *);
void print_data(NODE *); //출력
void preorder(NODE *);  //preorder출력
void inorder(NODE *); //inorder 출력

					  //삭제 함수들
NODE* find_min(NODE *, NODE **);
void del_func(NODE *, int, int);
void del(NODE *);
int result_of_search(NODE *p, int n);
void LeftSwap(NODE*);
//
void search_data(NODE *);//4.데이터 검색
void del_node(NODE *);

NODE *list = NULL;
NODE *prev = NULL;

int main(void)
{
	int choice;
	while (1) {
		show_tree(list);
		print_menu(list);
		scanf("%d", &choice);
		if (choice < 1 || choice>6) {
			system("cls");
			continue;
		}
		else if (choice == 1) {
			ins();
		}
		else if (choice == 2) {
			del(list);
			Rotation_Check(list);
		}
		else if (choice == 3) {
			print_data(list);
			system("pause");
		}
		else if (choice == 4) {
			search_data(list);
			system("pause");
		}
		else if (choice == 5) {
			del_node(list);
			list = NULL;
		}

		else if (choice == 6) {
			del_node(list);
			break;
		}
		system("cls");
	}

	return 0;

}

void ins(void)
{
	int data;
	printf("데이터 입력 : ");
	scanf("%d", &data);
	if (list == NULL) {
		list = get_node();
		(list)->data = data;
	}
	else {
		insert_AVL(list, data);
		Rotation_Check(list);
	}
}

NODE* get_node()
{
	NODE *tmp;
	tmp = (NODE*)malloc(sizeof(NODE));
	tmp->Slink = NULL; tmp->Llink = NULL;
	tmp->level = 1;
	return tmp;
}

void insert_AVL(NODE *p, int data)
{
	if (p->data < data) {
		if (p->Llink != NULL) {
			insert_AVL(p->Llink, data);
		}
		else {
			p->Llink = get_node();
			p->Llink->data = data;
		}

	}
	else if (p->data > data) {
		if (p->Slink != NULL) {
			insert_AVL(p->Slink, data);
		}
		else {
			p->Slink = get_node();
			p->Slink->data = data;
		}
	}
	else {
		printf("데이터가 존재합니다.\n");
		return;
	}
	LevModify(list);
}
void Rotation_Check(NODE *p)
{
	int result1, result2;

	result1 = LevCheck(p);

	//오른쪽으로 데이터가 추가 된 경우 RR or RL
	if (result1 == 0) return;
	else if (result1 >0) {
		if (result1 == 2) {
			//오른쪽의 자식 level체크
			result2 = LevCheck(p->Llink);

			//자식의 RR or RL
			if (result2 == 2) {
				prev = p;
				Rotation_Check(p->Llink); //자식의 lev_check
			}
			//RR로테이션
			else if (result2 == 1) {
				RRRotation(p, p->Llink);
				return;
			}
			//RL로테이션
			else if (result2 == -1) {
				RLRotation(p, p->Llink);
				return;
			}
		}
		else if (result1 == 1) {
			prev = p;
			Rotation_Check(p->Llink);
		}
		else return;
	}

	//LL or LR 로테이션
	else {
		if (result1 == -2) {
			//왼쪽의 자식 level체크
			result2 = LevCheck(p->Slink);

			//자식의 LL or LR
			if (result2 == -2) {
				prev = p;
				Rotation_Check(p->Slink); //자식의 lev_check
			}

			//LL로테이션
			else if (result2 == -1) {
				LLRotation(p, p->Slink);
				return;
			}
			//RL로테이션
			else if (result2 == 1) {
				LRRotation(p, p->Slink);
				return;
			}
		}
		else if (result1 == -1)
		{
			prev = p;
			Rotation_Check(p->Slink);
		}
		else return;
	}
}

int LevCheck(NODE *p)
{
	//왼쪽 오른쪽 자식 있는 경우
	if (p->Slink != NULL&&p->Llink != NULL) {
		return (p->Llink->level) - (p->Slink->level);
	}
	//왼쪽만 자식이 있는 경우
	else if (p->Slink != NULL) {
		return -(p->Slink->level);
	}
	//오른쪽만 자식이 있는 경우
	else if (p->Llink != NULL) {
		return p->Llink->level;
	}
}

void LevModify(NODE *p)
{
	//왼쪽 자식이 있는 경우
	if (p->Slink != NULL) {
		LevModify(p->Slink);
	}

	//오른쪽 자식이 있는 경우
	if (p->Llink != NULL) {
		LevModify(p->Llink);
	}


	if (p->Slink == NULL&&p->Llink == NULL) {
		p->level = 1;
	}

	else {
		//왼쪽 오른쪽 자식이 있는 경우
		if (p->Slink != NULL&&p->Llink != NULL) {
			p->level = (p->Slink->level) > (p->Llink->level) ? ((p->Slink->level) + 1) : ((p->Llink->level) + 1);
		}
		//왼쪽만 자식이 있는 경우
		else if (p->Slink != NULL) {
			p->level = (p->Slink->level) + 1;
		}
		//오른쪽만 자식이 있는 경우
		else if (p->Llink != NULL) {
			p->level = (p->Llink->level) + 1;
		}
	}
}


void RRRotation(NODE* parent, NODE* children)
{
	if (parent == list) {
		//3번그림
		if (children->Slink != NULL) {
			list = children;
			parent->Llink = children->Slink;
			children->Slink = parent;

		}
		//2번 그림
		else {
			list = children;
			parent->Llink = NULL;
			children->Slink = parent;
		}
	}
	//2번 그림
	else {
		prev->Llink = children;
		children->Slink = parent;
		parent->Llink = NULL;
	}
	LevModify(list);
}



void LLRotation(NODE* parent, NODE* children)
{
	if (parent == list) {
		//3번그림
		if (children->Llink != NULL) {
			list = children;
			parent->Slink = children->Llink;
			children->Llink = parent;

		}
		//1번 그림
		else {
			list = children;
			list->Llink = parent;
			parent->Slink = NULL;
		}
	}

	//2번 그림
	else {
		prev->Slink = children;
		children->Llink = parent;
		parent->Slink = NULL;
	}
	LevModify(list);
}


void RLRotation(NODE* parent, NODE* children)
{
	if (parent == list) {
		//2번그림
		if (children->Slink != NULL&&children->Slink->Slink != NULL) {
			list = children->Slink;
			list->Llink = children;
			children->Slink = NULL;
			parent->Llink = list->Slink;
			list->Slink = parent;
		}

		//1번 그림
		else {
			list = children->Slink;
			list->Llink = children;
			list->Slink = parent;
			parent->Llink = NULL;
			children->Slink = NULL;
		}
	}
	//3번그림
	else {
		children->Slink->Slink = parent;
		children->Slink->Llink = children;
		prev->Llink = children->Slink;
		children->Slink = NULL;
		parent->Llink = NULL;
	}
	LevModify(list);
}


void LRRotation(NODE* parent, NODE* children)
{
	if (parent == list) {
		//2번그림
		if (children->Llink != NULL&&children->Llink->Llink != NULL) {
			list = children->Llink;
			list->Slink = children;
			parent->Slink = NULL;
			children->Llink = list->Llink;
			list->Llink = parent;
		}

		//1번 그림
		else {
			list = children->Llink;
			list->Slink = children;
			list->Llink = parent;
			parent->Slink = NULL;
			children->Llink = NULL;
		}


	}
	//3번 그림
	else {
		children->Llink->Llink = parent;
		children->Llink->Slink = children;
		prev->Slink = children->Llink;
		children->Llink = NULL;
		parent->Slink = NULL;
	}
	LevModify(list);
}

//메뉴 출력 함수
void print_menu(NODE *p)
{
	//메뉴 좌표 밑으로 내리기
	if (p != NULL) {
		gotoxy(0, 12);
	}
	puts("1.data 추가");
	puts("2.data 삭제");
	puts("3.data 출력");
	puts("4.data 검색");
	puts("5.초 기 화 ");
	puts("6.나 가 기");
	printf("선  택 : ");

}



//좌표 
void gotoxy(int x, int y) {
	COORD pos = { x,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}



//트리를 보여주는 함수
void show_tree(NODE *p)
{
	if (p == NULL) {
		return;
	}
	else {
		static int i = 0;
		static int j = 60;
		static int k;
		int count = 0;
		if (p == list) {
			k = 1;
			int m;
			for (m = 1; m < (list->level) - 1; m++) {
				k *= 2;
			}
		}
		gotoxy(j, i);
		printf("%d", p->data);
		if (p->Slink != NULL) {
			i += 2;
			j -= (4 * k);
			if (k != 1) {
				k /= 2;
				count++;
			}
			show_tree(p->Slink);
			i -= 2;
			if (count != 0) {
				k *= 2;
				count--;
			}
			j += (4 * k);
		}
		count = 0;
		if (p->Llink != NULL) {
			i += 2;
			j += (4 * k);
			if (k != 1) {
				k /= 2;
				count++;
			}
			show_tree(p->Llink);
			i -= 2;
			if (count != 0) {
				k *= 2;
				count--;
			}
			j -= (4 * k);
		}
	}
}



//3-1데이터 출력
void print_data(NODE *p)
{
	printf("\n\n");
	printf("Preorder 출력 : \n");
	preorder(p);
	printf("\nInorder 출력 : \n");
	inorder(p);
}

//3-2출력(preorder)
void preorder(NODE * p)
{

	if (p == NULL) {
		return;
	}
	else {
		printf("%d<level=%d> ", p->data, p->level);
		if (p->Slink != NULL) {
			preorder(p->Slink);
		}
		if (p->Llink != NULL) {
			preorder(p->Llink);
		}
	}
}
//인오더 출력
void inorder(NODE * p)
{

	if (p == NULL) {
		return;
	}
	else {
		if (p->Slink != NULL) {
			inorder(p->Slink);
		}
		printf("%d ", p->data);
		if (p->Llink != NULL) {
			inorder(p->Llink);
		}
	}
}

void search_data(NODE *p)
{
	int data, result;
	printf("검색할 숫자 입력 : ");
	scanf("%d", &data);
	result = result_of_search(p, data);
	if (result == 1) {
		printf("%d는 존재합니다.\n", data);
	}
	else {
		printf("%d는 존재하지 않습니다.\n", data);
	}
}

int result_of_search(NODE *p, int n)
{
	//검색이 끝나도 data가 없는 경우
	if (p == NULL) {
		return 0;
	}
	//n과 비교해서 같으면 1반환 , 크거나 작으면 다음 연결리스트를 재귀함수로 보냄
	else {
		if (n == p->data) {
			return 1;
		}
		else if (n > p->data) {
			result_of_search(p->Llink, n);
		}
		else if (n < p->data) {
			result_of_search(p->Slink, n);
		}
	}
}

//왼쪽 children이랑 스왑 재귀함수
void LeftSwap(NODE* p)
{
	int tmp;
	NODE *q;
	if (p->Slink != NULL) {
		q = p->Slink;
		tmp = p->data;
		p->data = q->data;
		q->data = tmp;
	}

	else return;

	LeftSwap(p->Slink);
}


void del(NODE *qlist)
{
	int data;
	int result;
	printf("삭제할 데이터 입력 : ");
	scanf("%d", &data);
	result = result_of_search(qlist, data);
	if (result == 0) {
		printf("데이터가 없습니다.\n");
		return;
	}
	else {
		//연결이 없는 초기 노드를 삭제하는 경우
		if (qlist->data == data && qlist->Slink == NULL && qlist->Llink == NULL) {
			free(qlist);
			list = NULL;
		}
		else {
			del_func(qlist, data, 0);
		}
	}
}
//2-1데이터 삭제

void del_func(NODE *p, int data, int n)
{

	NODE *tmp;
	static NODE *prev = NULL;
	NODE *q = NULL;

	//삭제 데이터랑 현재 데이터랑 같은경우
	if (data == p->data) {
		//삭제 데이터의 연결리스트가 없는 경우
		if (p->Slink == NULL&&p->Llink == NULL) {
			if (n == -1) {
				prev->Slink = NULL;
			}
			else {
				prev->Llink = NULL;
			}
			free(p);
		}

		//삭제 데이터의 연결리스트가 최소 1개는 존재
		else {
			//삭제 자료의 오른쪽 연결리스트가 존재하는 경우
			if (p->Llink != NULL) {
				//삭제데이터 오른쪽의 왼쪽이 있는 경우
				if (p->Llink->Slink != NULL) {
					prev = p;
					tmp = find_min(p->Llink, &prev);
					p->data = tmp->data;
					if (tmp->Llink != NULL) {
						prev->Slink = tmp->Llink;
					}
					else {
						prev->Slink = NULL;
					}
				}
				//삭제데이터 오른쪽의 왼쪽이 없는 경우
				else {
					prev = p;
					tmp = find_min(p->Llink, &prev);
					p->data = tmp->data;
					//오른쪽의 오른쪽이 없는 경우
					if (tmp->Llink == NULL) {
						prev->Llink = NULL;

					}
					//오른쪽의 오른쪽이 있는 경우
					else {
						prev->Llink = tmp->Llink;

					}
				}
				free(tmp);
			}


			//삭제 자료의 오른쪽 연결 리스트가 없는 경우(왼쪽은 있음)
			else {

				prev = p;
				tmp = find_min(p->Slink, &prev);

				LeftSwap(p);

				if (tmp->Llink != NULL) {
					prev->Slink = NULL;
					prev->Llink = tmp->Llink;
				}
				else {
					prev->Slink = NULL;
				}
				free(tmp);
			}
		}
	}

	//삭제 데이터가 현재 데이터보다 작은경우
	else if (data < p->data) {
		prev = p;
		del_func(p->Slink, data, -1);
	}

	//삭제 데이터가 현재 데이터보다 큰 경우
	//data>p->data
	else {
		prev = p;
		del_func(p->Llink, data, 1);
	}
}

//2-2 최소값 찾기
NODE* find_min(NODE *p, NODE **pprev)
{
	if (p->Slink == NULL) {
		return p;
	}
	else {
		*pprev = p;
		find_min(p->Slink, &(*pprev));
	}
}


//동적할당 해제
void del_node(NODE *p)
{
	if (p == NULL) {
		return;
	}
	else {
		if (p->Slink != NULL) {
			del_node(p->Slink);
		}
		if (p->Llink != NULL) {
			del_node(p->Llink);
		}
		free(p);
	}
}


