#include "SimpleHeap.h"

void HeapInit(Heap* ph) {
	ph->numOfData = 0;
}
int HIsEmpty(Heap* ph) {
	if (ph->numOfData == 0)
		return TRUE;
	else
		return FALSE;
}

int GetParentIndex(int index) {
	return index / 2;
}

int GetLChildIndex(int index) {
	return index * 2;
}

int GetRChildIndex(int index) {
	return index * 2 + 1;
}

//두 개의 자식 노드 중 높은 우선순위의 자식 노드 인덱스 값 반환
int GetHiPriChildIDX(Heap* ph, int idx) {

	int leftChiIdx = GetLChildIndex(idx);
	int rightChiIdx = GetRChildIndex(idx);
	
	//자식 노드가 없는 경우
	if (leftChiIdx > ph->numOfData)	
		return 0;
	//자식 노드가 1개인 경우
	else if (leftChiIdx == ph->numOfData)	
		return leftChiIdx;
	//자식 노드가 2개인 경우
	else {	
		return (ph->heapArr[leftChiIdx].pr) < (ph->heapArr[rightChiIdx].pr) ? leftChiIdx : rightChiIdx;
	}
}


//힙에 데이터 저장
void HInsert(Heap*ph, HData data, Priority pr) {
	int idx = ph->numOfData + 1;
	HeapElem nelem = { pr,data };
	int parentIdx;

	while (idx != 1) {
		parentIdx = GetParentIndex(idx);
		if (pr < (ph->heapArr[parentIdx].pr)) {
			ph->heapArr[idx] = ph->heapArr[parentIdx];
			idx = parentIdx;
		}
		else{
			break;
		}
	}

	ph->heapArr[idx] = nelem;
	ph->numOfData++;
}

HData HDelete(Heap* ph) {	
	HData retData = (ph->heapArr[1]).data;
	HeapElem lastElem = ph->heapArr[ph->numOfData];

	int parentIdx = 1;
	int childIdx;

	while (childIdx=GetHiPriChildIDX(ph,parentIdx)){	
		if (lastElem.pr <= ph->heapArr[childIdx].pr)
			break;
		ph->heapArr[parentIdx] = ph->heapArr[childIdx];
		parentIdx = childIdx;
	}

	ph->heapArr[parentIdx] = lastElem;
	ph->numOfData--;
	return retData;
}
