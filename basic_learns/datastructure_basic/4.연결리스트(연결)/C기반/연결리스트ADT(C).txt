//새 노드의 추가 위치에 따른 장점과 단점

1)새 노드를 연결 리스트의 머리에 추가하는 경우
장점 : 포인터 변수 tail이 불필요하다.
단점 : 저장된 순서를 유지하지 않는다.

2)새 노드를 연결 리스트의 꼬리에 추가하는 경우
장점 : 저장된 순서가 유지된다.
단점 : 포인터 변수 tail이 필요하다.



//리스트의 ADT(더미노드 추가해서 구현하기)

*void ListInit(List* plist);	//리스트의 초기화(C에서)
 -초기화할 리스트의 주소 값을 인자로 전달된다.
 -리스트 생성 후 제일 먼저 호출되어야 하는 함수이다.
 
*void LInsert(List* plist, LData data);	//데이터 저장
 -리스트에 데이터를 저장한다. 매개변수 data에 전달된 값을 저장한다.

*int LFirst(List* plist, LData* pdata);	//저장된 데이터의 탐색 및 탐색 초기화
 -첫 번째 데이터가 pdata가 가리키는 메모리에 저장된다.
 -데이터의 참조를 위한 초기화가 진행된다.
 -참조 성공 시 TRUE(1), 실패시 FALSE(0)을 반환

*int LNext(List* plist, LData * pdata);	//다음 데이터의 참조(반환)을 목적으로 호출
 -참조된 데이터의 다음 데이터가 pdata가 가리키는 메모리에 저장된다.
 -순차적인 참조를 위해서 반복 호출이 가능하다.
 -참조를 새로 시작하려면 먼저 LFirst 함수를 호출해야 한다.
 -참조 성공 시 TRUE(1), 실패시 FALSE(0)을 반환 

*LData LRemove(List* plist);	//바로 이전에 참조(반환)이 이뤄진 데이터의 삭제
 -LFirst 또는 LNext 함수의 마지막 반환 데이터를 삭제한다.
 -삭제된 데이터는 반환된다.
 -마지막 반환 데이터를 삭제하므로 연이은 반복 호출을 허용하지 않는다.

*int LCount(List* plist);		//현재 저장되어 있는 데이터의 수 반환
 -리스트에 저장되어 있는 데이터의 수를 반환한다.
 
*void SetSortRule(List* plist,int (*comp)(LData d1,LData d2));
 -리스트에 정렬의 기준이 되는 함수를 등록한다.
 -d1이 정렬 순서상 앞서면 0을 반환, d2가 정렬 순서상 앞서거나 같으면 1을 반환
 
 
 
//DLinkedList.h

#ifndef __D_LINKED_LIST_H__
#define __D_LINKED_LIST_H__

#define TRUE	1
#define FALSE	0

typedef int LData;

typedef struct _node
{
	LData data;
	struct _node * next;
} Node;

typedef struct _linkedList
{
	Node * head;	//더미 노드를 가리키는 맴버
	Node * cur;		//참조 및 삭제를 돕는 멤버
	Node * before;	//삭제를 돕는 멤버
	int numOfData;	//저장된 데이터의 수를 기록하기 위한 멤버
	int(*comp)(LData d1, LData d2);	//정렬의 기준을 등록하기 위한 멤버
} LinkedList;


typedef LinkedList List;

void ListInit(List * plist);

void LInsert(List * plist, LData data);

int LFirst(List * plist, LData * pdata);
int LNext(List * plist, LData * pdata);

LData LRemove(List * plist);

int LCount(List * plist);

void SetSortRule(List * plist, int(*comp)(LData d1, LData d2));
//int형을 반환하고 LData인자를 2개로 받을 수 있는 함수의 주소를 담는 comp는 포인터 변수 

#endif
 
 
 
 
 