#include "DLinkedList.h"
#include <stdio.h>
#include <stdlib.h>

void ListInit(List * plist) {
	plist->head = (Node*)malloc(sizeof(Node));
	plist->head->next = NULL;
	plist->comp = NULL;
	plist->numOfData = 0;
}

void FInsert(List* plist, LData data) {
	Node* newNode = (Node*)malloc(sizeof(Node));	//새 노드 생성
	newNode->data = data;				//새 노드에 데이터 저장
	
	newNode->next = plist->head->next;	//새 노드가 다른 노드를 가리키게 함.
	plist->head->next = newNode;		//더미 노드가 새 노드를 가리키게 함.
	
	plist->numOfData++;					//저장 된 노드 수 하나 증가
}

void SInsert(List* plist, LData data) {
	/*내 코드*/
	//Node* newNode = (Node*)malloc(sizeof(Node));	
	//Node* pred = plist->head->next;
	//Node* before = plist->head;	
	//newNode->data = data;

	//while (pred != NULL) {
	//	if (plist->comp(data, pred->data) == 0) {
	//		break;
	//	}
	//	before = pred;
	//	pred = pred->next;
	//}
	//before->next = newNode;
	//newNode->next = pred;
	//(plist->numOfData)++;

	/*책 코드*/
	Node* newNode = (Node*)malloc(sizeof(Node));
	Node* pred = plist->head;
	newNode->data = data;

	//새 노드가 들어갈 위치를 찾기 위한 반복문!
	while ((pred->next != NULL) && (plist->comp(data, pred->next->data)) != 0) {
		pred = pred->next;
	}
	newNode->next = pred->next;
	pred->next = newNode;
	(plist->numOfData)++;
}

void LInsert(List * plist, LData data) {
	if (plist->comp == NULL)	//정렬기준이 마련되지 않았다면
		FInsert(plist, data);	//머리에 노드를 추가
	else 						//정렬기준이 마련 되었으면	
		SInsert(plist, data);	//정렬기준에 근거하여 노드를 추가!
}


int LFirst(List * plist, LData * pdata) {
	if (plist->head->next == NULL)
		return FALSE;

	plist->before = plist->head;	//before는 더미 노드를 가리키게 함.<<노드 삭제를 위해서
	plist->cur = plist->head->next;	//cur은 첫 번째 노드를 가리키게 함

	*pdata = plist->cur->data;		//첫 번째 노드의 데이터 전달
	return TRUE;					//데이터 반환 성공.
}

int LNext(List * plist, LData * pdata) {
	if ((plist->cur->next) == NULL)	//cur이 NULL을 가리키면
		return FALSE;				//반환할 데이터 없음

	plist->before = plist->cur;		//cur이 가리키던 것을 before가 가리킴
	plist->cur = plist->cur->next;	//cur은 그 다음 노드를 가리킴

	*pdata = plist->cur->data;		//cur이 가리키는 노드의 데이터 전달
	return TRUE;					//데이터 반환 성공
}

LData LRemove(List * plist) {
	Node* rpos = plist->cur;		//소멸 대상의 주소 값을 rpos에 저장
	LData rdata = plist->cur->data;	//소멸 대상의 데이터를 rdata에 저장

	plist->before->next = plist->cur->next;	//소멸 대상을 리스트에서 제거
	plist->cur = plist->before;		//cur이 가리키는 위치를 재조정
	free(rpos);		//리스트에서 제거된 노드 소멸
	(plist->numOfData)--;	//저장된 데이터의 수 하나 감소
	return rdata;	//제거된 노드의 데이터 반환
}

int LCount(List * plist) {
	return (plist->numOfData);
}

void SetSortRule(List * plist, int(*comp)(LData d1, LData d2)) {
	plist->comp = comp;
}