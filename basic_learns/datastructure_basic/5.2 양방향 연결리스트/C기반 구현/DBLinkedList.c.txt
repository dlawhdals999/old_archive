#include "DBLinkedList.h"
#include <stdio.h>
#include <stdlib.h>

//init method
void ListInit(List * plist) {
	plist->head = NULL;	
	plist->numOfData = 0;
}

//update method
void LInsert(List * plist, Data data) {
	Node* newNode = (Node*)malloc(sizeof(Node));
	newNode->data = data;
	if (plist->head != NULL) 
		plist->head->prev = newNode;
			
	newNode->next = plist->head;
	plist->head = newNode;
	newNode->prev = NULL;
	(plist->numOfData)++;
}

//access method
int LFirst(List * plist, Data * pdata) {
	if (plist->head == NULL)
		return FALSE;
	plist->cur = plist->head;
	*pdata = plist->cur->data;
	return TRUE;
}
int LNext(List * plist, Data * pdata) {
	if (plist->cur==NULL||plist->cur->next == NULL)
		return FALSE;
	
	plist->cur = plist->cur->next;
	*pdata = plist->cur->data;
	return TRUE;
}

int LPrevious(List * plist, Data * pdata) {
	if (plist->cur->prev == NULL)
		return FALSE;

	plist->cur = plist->cur->prev;
	*pdata = plist->cur->data;
	return TRUE;
}

Data LRemove(List* plist) {
	Node* rpos = plist->cur;
	Data rdata = plist->cur->data;
	if (plist->head == plist->cur) {	//head를 삭제
		//데이터가 1개
		if (plist->cur->next == NULL) {
			plist->head = NULL;
			plist->cur = NULL;
		}
		//데이터가 2개 이상(미완 cur처리)
		else {
			rpos->next->prev = NULL;
			plist->head = rpos->next;

		}
	}
	else{	//head가 아닌 것 삭제 & 데이터 2개 이상
		if (plist->cur->next == NULL) {	//마지막 노드를 삭제하는 경우
			rpos->prev->next = NULL;
			plist->cur = rpos->prev;
		}
		else {	//삭제 노드의 next가 있는 경우
			rpos->prev->next = rpos->next;
			rpos->next->prev = rpos->prev;
			plist->cur = rpos->prev;
		}		
	}
	free(rpos);
	return rdata;
}

int LCount(List * plist) {
	return (plist->numOfData);
}

void TotalRemove(List* plist) {
	if (plist->head == NULL)
		return;
	Node* last;
	Node* rpos;
	Data data;
	last = plist->head;
	while (1) {
		if (last->next == NULL)
			break;
		last = last->next;
	}	
	while (1) {
		rpos = last;
		if (rpos == NULL)
			break;
		last = last->prev;
		data = rpos->data;
		printf("%d삭제\n", data);
		free(rpos);
	}

}