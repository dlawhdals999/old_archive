//양방향 연결 리스트
;앞의 연결리스트에 추가적으로 적용되는 시나리오로 생각!

양쪽으로만 연결되면, head, tail dummy 등등 은 추가적인 요소

=>실제로 구현해야할 일은 드믐. 그래서 단지 특성만 알고 너무 구현에 연연하지 말것 
=>
typedef struct _node{
	Data data;
	struct _node* next;
	struct _node* prev;	//기존과 다르게 이전 것을 참조할 수 있어야함.
}

//양방향으로 노드를 연결하는 이유
-오른쪽 노드로의 이동이 용이하다! 양방향으로 이동이 가능하다!
-양방향 연결 코드에서 보이듯이 양방향으로 연결한다 하여 더 복잡한 것은 아니다!(before연산이 사라짐) 그렇게 느낀다면 선입견이다.
=>before라는 멤버가 불필요해진데 의미!



























