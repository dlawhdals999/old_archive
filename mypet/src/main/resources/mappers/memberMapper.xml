<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mypet.mapper.MemberMapper">
	
	<!-- 아이디로 검색 -->
	<select id="selectById" resultType="MemberVO">
		select * from tbl_member where user_id = #{user_id}	
	</select>
	
	<!-- USER_NO로 검색 -->
	<select id="selectByNum" resultType="MemberVO">
		select * from tbl_member where user_no = #{user_no}
	</select>
	
	<!-- 회원 등록 -->
	<insert id="registerMember">
		insert into tbl_member 
			(user_no,user_id,user_password,user_name,user_email,user_phone,postcode_fk,address)		
		values
			(member_seq.nextval,#{user_id},#{user_password},#{user_name},#{user_email},#{user_phone},#{postcode_fk},#{address})
	</insert>
	
	<!-- 등록된 회원 정보 가져오기 수정 필요 -->
	<select id="getLastInsertedMember" resultType="MemberVO">
		select * from tbl_member where user_no = member_seq.currval
	</select>	

	<!-- 회원 가입 인증 등록 -->
	<insert id="registerAuthToken">
		insert into tbl_email_auth (user_id,auth_token,auth_limit) values(#{user_id},#{auth_token},#{auth_limit})
	</insert>
	
	<!-- 회원 가입 인증 가져오기 -->
	<select id="getEmailAuth" resultType="com.mypet.dto.EmailAuthDTO">
		select * from tbl_email_auth where user_id = #{user_id} and auth_token = #{auth_token} and auth_limit >= sysdate
	</select>
	
	<!-- 회원 정보 변경 -->
	<update id="modify">
		update tbl_member set
		user_phone = #{user_phone}, address = #{address}
		where user_no = #{user_no}
	</update>
	
	<!-- 회원 이메일 인증 확인 -->
	<update id="registerMemberAuth">
		update tbl_member set email_auth = 'y' where user_id = #{user_id}
	</update>

	<!-- 회원 이메일 인증 기간 지난 것 지우기(메) -->
	<delete id="removeExpiredAuthMember">
		delete from tbl_member where user_id in(select user_id from tbl_email_auth where sysdate >= auth_limit)
	</delete>	
	
	<!-- 회원 이메일 인증 기간 지난 것 지우기(인증테이블) -->
	<delete id="removeExpiredAuthEmail">
		delete tbl_email_auth where sysdate >= auth_limit		
	</delete>
	
	<!-- 회원 리스트 -->
	<select id="listSearchCriteria" resultType="MemberVO">
		<![CDATA[		
		select * from (
			select tbl_member.*,row_number() over (order by user_no desc)R
		from tbl_member where user_no > 0
		]]>
			<include refid="search"/>
		<![CDATA[
			) where R between #{pageStart} and #{pageLast}
		]]>	
	</select>
	
	<!-- 회원 검색 리스트 카운트 -->
	<select id="listSearchCount" resultType="int">
		<![CDATA[
		select 
			count(user_no)
		from
			tbl_member
		where user_no > 0		
		]]>
		<include refid="search"/>
	</select>
	
	
	<!-- search sql -->
	<sql id="search">
	<if test="searchType != null">
		<if test="searchType=='i'.toString()">
			and user_id like CONCAT(CONCAT('%',#{keyword}),'%')
		</if>
		
		<if test="searchType=='n'.toString()">
			and user_name like CONCAT(CONCAT('%',#{keyword}),'%')
		</if>
		
		<if test="searchType=='e'.toString()">
			and user_email like CONCAT(CONCAT('%',#{keyword}),'%')
		</if>
		
		<if test="searchType=='p'.toString()">
			and user_phone like CONCAT(CONCAT('%',#{keyword}),'%')
		</if>
		
		
		<if test="searchType=='cw'.toString()">
			and (content like CONCAT('%',#{keyword},'%') OR writer like CONCAT('%',#{keyword},'%'))
		</if>
		
		<if test="searchType=='tcw'.toString()">
			and (title like CONCAT('%',#{keyword},'%') OR 
				content like CONCAT('%',#{keyword},'%') OR 
				writer like CONCAT('%',#{keyword},'%'))
		</if>
	</if>	
	</sql>	
	
	
</mapper>